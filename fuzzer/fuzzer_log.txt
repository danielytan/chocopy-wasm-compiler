--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0 = 1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:class class_0(object):
  pass
class_0_0:class_0 = None
def func_class_0(func_class_0_param_0: int) -> undefined:
  func_class_0_param_0:int = 1
  number_1:int = 1
  number_1
  return None is None is None is None is None is None is None is None is None is None is None is None is None is None is None is None is None
1
class_0_0 = func_class_0(1 % 1)
1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:if True:
  False
None is None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
if False:
  1 * 1 + 1 % 1 * (-number_0)
  True
else:
  1 - (-1) > number_0
  1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
number_5:int = 1
number_6:int = 1
number_7:int = 1
number_8:int = 1
number_9:int = 1
number_10:int = 1
number_11:int = 1
bool_0:bool = False
bool_1:bool = False
bool_2:bool = False
def func_none_0(func_none_0_param_0: int):
  func_none_0_param_0:int = 1
  1
  return func_none_0(1) is None
def func_bool_0(func_bool_0_param_0: int) -> bool:
  func_bool_0_param_0:int = 1
  1
  return bool_0
number_0 + number_1
1
if (not number_1 - number_0 == None is func_none_0(number_0) is None is func_none_0(1) is None is func_none_0((-number_1))):
  bool_0
  if False:
    number_2
    1
    (-number_3)
  elif bool_1 :
    bool_2
  else:
    (-1)
    1
    (-number_1)
    number_4
  func_none_0(number_4) is None is None is func_none_0(1 + number_0) is None
elif number_5 > 1 or 1 >= number_6 % number_5 :
  number_7 = 1
  1 - number_8
if True:
  False
else:
  func_bool_0(1 * 1)
number_4
if (-number_7) > number_5:
  if func_bool_0(number_2):
    1
  elif func_bool_0(1) :
    1
    number_9
  1 - (-number_8) % number_10
  (not True)
  number_11 = number_8
  1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:def func_number_0() -> int:
  bool_0:bool = False
  number_0:int = 1
  def func_none_0():
    number_1:int = 1
    def func_none_1():
      1
      return None
    number_1 = (-1)
    return func_none_1()
  bool_0 = func_number_0() == None is None is None is None is func_none_0() is None is None
  return (-number_0) - func_number_0()
1
1 // func_number_0() >= 1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:class class_0(object):
  pass
number_0:int = 1
class_0_0:class_0 = None
1
class_0_0
number_0 % number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
if bool_0:
  1
  1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:def func_number_0(func_number_0_param_0: int, func_number_0_param_1: int) -> int:
  func_number_0_param_0:int = 1
  func_number_0_param_1:int = 1
  number_2:int = 1
  number_2 = (-1)
  True
  return func_number_0_param_1
func_number_0(1, 1)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
number_5:int = 1
def func_none_0(func_none_0_param_0: int):
  bool_1:bool = False
  bool_2:bool = False
  bool_3:bool = False
  func_none_0_param_0:int = 1
  number_7:int = 1
  number_8:int = 1
  number_9:int = 1
  number_10:int = 1
  number_11:int = 1
  number_12:int = 1
  number_13:int = 1
  number_14:int = 1
  number_15:int = 1
  def func_none_1():
    1
    return None
  def func_number_0(func_number_0_param_0: int) -> int:
    func_number_0_param_0:int = 1
    number_17:int = 1
    if False:
      number_17 % 1
      1
    else:
      1
      func_number_1()
    func_number_1() % number_12 // (-(-(-1)))
    return func_number_2()
  def func_number_1() -> int:
    1
    return func_number_1()
  def func_number_2() -> int:
    1
    1
    return func_number_0(1)
  def func_number_3() -> int:
    bool_4:bool = False
    bool_5:bool = False
    bool_6:bool = False
    number_16:int = 1
    number_17:int = 1
    number_18:int = 1
    number_19:int = 1
    number_20:int = 1
    number_21:int = 1
    number_22:int = 1
    number_23:int = 1
    number_24:int = 1
    number_25:int = 1
    number_26:int = 1
    number_27:int = 1
    number_28:int = 1
    number_29:int = 1
    number_30:int = 1
    number_31:int = 1
    def func_none_2(func_none_2_param_0: int):
      func_none_2_param_0:int = 1
      number_33:int = 1
      bool_2 = True
      return func_none_2((-(-(-(-1 % number_23))) + 1 * (-number_33)))
    def func_number_4(func_number_4_param_0: int, func_number_4_param_1: int, func_number_4_param_2: int) -> int:
      func_number_4_param_0:int = 1
      func_number_4_param_1:int = 1
      func_number_4_param_2:int = 1
      number_35:int = 1
      1 // number_19 <= func_number_2()
      return func_number_0(number_18) - 1 % number_35
    def func_number_5() -> int:
      bool_7:bool = False
      number_32:int = 1
      def func_bool_2() -> bool:
        bool_8:bool = False
        None is None is func_none_2(1) is None
        return bool_8
      bool_1
      if func_bool_2():
        number_32
        None
      else:
        1
        func_number_5()
        func_number_2()
        1
        func_number_6()
        True
      if True:
        bool_7 = False
      elif False :
        (not (not func_bool_2()) or bool_1 or (not bool_5))
      1
      1
      return func_number_2()
    def func_number_6() -> int:
      1
      return func_number_6()
    def func_bool_1(func_bool_1_param_0: int, func_bool_1_param_1: int, func_bool_1_param_2: bool, func_bool_1_param_3: bool) -> bool:
      func_bool_1_param_2:bool = False
      func_bool_1_param_3:bool = False
      func_bool_1_param_0:int = 1
      func_bool_1_param_1:int = 1
      1
      return func_bool_1_param_2
    if func_bool_0(bool_4, True):
      if False:
        if bool_5:
          bool_0 = True
          (-1)
          number_3 = func_number_0(number_16)
        number_7
      elif (-1) * (-func_number_4(1, 1, 1) - number_3) < func_number_2() :
        if False:
          number_17 = func_number_5()
      elif func_bool_0(True, func_bool_0(bool_4, bool_3)) :
        if func_bool_0(1 >= number_18, bool_1):
          func_bool_0(True, 1 % number_1 + number_8 >= number_19)
          1 % func_number_3()
          if (not True):
            func_number_5() >= 1 // func_number_3()
          else:
            (-(-1))
            func_bool_0(func_bool_0(bool_3 != 1 + (-func_number_5()), func_bool_0(False, bool_5 or False)), None is func_none_2(number_2) == func_number_3() // number_20 - number_21 - func_number_0(1) // 1)
            if func_bool_0((not number_4 >= number_22), func_bool_0(False, number_23 > (-1))):
              (not True)
      else:
        bool_3 = True
        number_24
        func_number_1()
        1 % 1 - number_15 != None
    elif func_bool_1(func_number_3(), number_25, False, func_bool_0(False, False)) :
      1
      1
      1
    if func_bool_1(number_26, 1, bool_6, False):
      bool_0
      number_27
    else:
      1
      func_number_0(number_27)
      func_number_4(func_number_5(), 1, 1 + (-number_28) % func_number_1() + number_24)
      if True:
        None is func_none_0(number_16) is func_none_0((-func_number_1() // (-(-1 - 1 * number_29)) * func_number_4(number_4, number_30, 1) // (-number_31) + func_number_1() % 1) // 1) is None
    return func_number_4(1, 1 - func_number_3() + func_number_6() * number_30, 1)
  def func_bool_0(func_bool_0_param_0: bool, func_bool_0_param_1: bool) -> bool:
    func_bool_0_param_0:bool = False
    func_bool_0_param_1:bool = False
    number_13 = 1
    return (not False)
  if bool_1:
    if (not 1 * number_7 < 1):
      if bool_1:
        1
        if False:
          number_2
        elif False :
          if True:
            func_number_0((-(-1) * 1 % 1))
          number_0
        else:
          if True:
            if func_number_0(1) != func_number_0(1) - number_1 != func_number_1():
              func_number_1()
            else:
              if True or True:
                func_number_1()
            func_number_1() > number_8
            if True:
              if bool_1:
                1
            else:
              func_number_0(1)
              if 1 > (-number_5):
                func_none_1()
                True
                number_4 % func_number_1()
                func_number_0(func_number_0((-func_number_0(number_9))) + 1 // number_10)
                1
                number_11
                func_number_0(1)
              func_number_1()
            func_number_1()
            bool_0
            func_number_1()
          else:
            number_4
      else:
        1
        func_number_2()
        if func_number_2() > func_number_0(number_4):
          func_number_1()
        elif True :
          if False:
            if (not bool_2) or bool_1:
              func_number_1() > number_5
            else:
              number_9 = number_10
              number_7 = 1
        if func_bool_0(1 >= 1, number_2 != func_number_2()):
          True
          if False:
            func_number_2() + 1 + 1
            if bool_1:
              func_number_2()
            number_12
            1
            False
            1
          else:
            func_bool_0(bool_3, True)
        else:
          1 >= func_number_2() // number_9
      number_5
    else:
      if (not number_13 <= func_number_3()):
        1 + func_number_2() == func_number_3()
        if (not False):
          1
        else:
          number_14 = number_15 % 1
    1
    False
  return None
1
if bool_0:
  None is None is None
  None is func_none_0(1)
elif True :
  (-number_0)
  1
else:
  (-1) + number_0 * number_0
  (-(-1))
  1 < number_1
  number_2 <= (-(-number_1) % number_3 % (-1 + 1 - number_4) + number_5 // 1)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
number_5:int = 1
number_6:int = 1
number_7:int = 1
number_8:int = 1
number_9:int = 1
number_10:int = 1
number_11:int = 1
number_12:int = 1
number_13:int = 1
number_14:int = 1
number_15:int = 1
number_16:int = 1
number_17:int = 1
number_18:int = 1
number_19:int = 1
number_20:int = 1
number_21:int = 1
bool_0:bool = False
bool_1:bool = False
bool_2:bool = False
def func_number_0(func_number_0_param_0: int, func_number_0_param_1: int, func_number_0_param_2: int) -> int:
  func_number_0_param_0:int = 1
  func_number_0_param_1:int = 1
  func_number_0_param_2:int = 1
  bool_3:bool = False
  func_number_3() > 1 or bool_3
  return 1
def func_number_1() -> int:
  number_22:int = 1
  number_23:int = 1
  number_24:int = 1
  number_25:int = 1
  number_26:int = 1
  number_27:int = 1
  number_28:int = 1
  bool_3:bool = False
  bool_4:bool = False
  def func_bool_0(func_bool_0_param_0: bool, func_bool_0_param_1: int) -> bool:
    func_bool_0_param_1:int = 1
    number_30:int = 1
    number_31:int = 1
    number_32:int = 1
    number_33:int = 1
    number_34:int = 1
    number_35:int = 1
    number_36:int = 1
    func_bool_0_param_0:bool = False
    bool_6:bool = False
    bool_7:bool = False
    def func_number_5() -> int:
      number_37:int = 1
      bool_8:bool = False
      func_number_1()
      func_number_2() != True
      if True:
        func_bool_0(func_bool_0(bool_8, func_number_6()), 1)
        (not False == number_37)
      else:
        False
        1
      True or False
      return 1 - 1
    def func_number_6() -> int:
      number_37:int = 1
      number_37 + 1
      return 1 * func_bool_0_param_1
    def func_none_0(func_none_0_param_0: bool, func_none_0_param_1: int, func_none_0_param_2: int):
      func_none_0_param_1:int = 1
      func_none_0_param_2:int = 1
      func_none_0_param_0:bool = False
      (-1)
      return None is func_none_0(False, 1, 1)
    if func_bool_0(func_bool_0_param_0, number_8 % 1):
      1
      1 == (-1)
      None is None is None is func_none_0(False, 1, 1) is None is None is None is None is func_none_0(number_30 <= number_31, 1, func_number_5()) is None is None is func_none_0(bool_6, 1, number_32) is func_none_0(bool_7, number_9 // func_number_6() - 1, 1)
      1 // 1 // 1 // 1 // 1
    elif True :
      number_33
    elif 1 <= func_number_3() :
      number_34
    number_33 = 1 % number_35 - (-func_number_0(1 - 1, 1, 1 + (-(-func_number_0(1, 1, 1))) // 1))
    number_36
    return False
  True
  func_bool_0(False, func_number_2())
  if func_bool_0(number_5 > 1, (-number_20)):
    func_bool_0(func_bool_0(False, number_22), func_number_3())
  else:
    if func_bool_0(func_bool_0(True, (-(-1 + func_number_1()))), number_23):
      if func_bool_0(bool_3, 1):
        func_number_4((not False))
      if (not (not 1 > 1)):
        1
        func_number_3()
        number_24
      (-1 * (-func_number_0(number_16 // number_18, (-(-1)), func_number_2()))) > number_25 // 1
    else:
      1 // func_number_4(bool_4)
      1 % 1 // number_26 + func_number_3() % number_21
  func_number_0(number_12, number_27 + 1, number_28)
  return 1
def func_number_2() -> int:
  number_22:int = 1
  number_23:int = 1
  1 % (-number_22) + number_3 // func_number_1()
  return 1 - 1 % number_23
def func_number_3() -> int:
  number_22:int = 1
  number_23:int = 1
  def func_bool_0(func_bool_0_param_0: int, func_bool_0_param_1: int) -> bool:
    func_bool_0_param_0:int = 1
    func_bool_0_param_1:int = 1
    True
    return bool_0
  if (not False):
    if True:
      number_6
  else:
    1
    (not True)
    func_number_1() * number_4 + number_11 - number_22
    if func_bool_0(func_number_2(), 1):
      False
    number_23
  return func_number_1() - (-1)
def func_number_4(func_number_4_param_0: bool) -> int:
  number_22:int = 1
  func_number_4_param_0:bool = False
  bool_4:bool = False
  bool_5:bool = False
  if bool_4:
    if (not False):
      if True:
        1
        number_22 = number_8
    else:
      bool_5
      1 * 1
      (-1 + 1)
      func_number_3()
  return 1
1 - number_0
if (not bool_0):
  1
  bool_0 = bool_1
  1 > number_0
  (-(-1))
  if False:
    bool_0
    number_0
    1
    number_0 = number_0
elif False :
  1
  if func_number_0(func_number_0(1, 1, number_1), (-1 - 1) + 1, func_number_0(number_1, 1, number_0)) - func_number_0((-number_1) % 1 % 1, func_number_0(func_number_0(number_1 + func_number_0((-func_number_0(number_1, (-number_2 % number_0 % number_3), 1)) // number_4, number_4, 1) * 1 + func_number_0(1, 1, number_1), (-func_number_0(func_number_0(number_5, number_0, number_1), number_6, number_2) % number_0), number_4), func_number_0(func_number_0(func_number_0(func_number_0(1, number_5, func_number_0(func_number_0(1, 1, func_number_0(func_number_0(1, func_number_0((-1), func_number_0(func_number_0(1, 1, number_7), 1 // number_7 // (-1 % 1) // 1, number_4 - 1 + 1), number_8) % number_7, func_number_0(number_8, func_number_0(func_number_0(func_number_0(1, number_0, (-number_9)), number_4, number_2 // func_number_0(1, 1, 1) % number_10), (-1) % 1, number_0), 1)), 1, func_number_0(number_7, func_number_0(1, func_number_0(number_11, func_number_0(1, number_12, func_number_0(func_number_0(1, func_number_0(number_10, 1 * 1 - 1, number_0), number_12 % 1 % 1), 1, func_number_0((-(-func_number_0(func_number_0(func_number_0(number_0, func_number_0(1, (-number_4 + 1 - 1), number_13), func_number_0((-number_12), number_14, number_2)) + 1 // (-number_11), 1, number_9 - 1 // 1) + (-1) - func_number_0(func_number_1(), 1, number_8), (-number_8), func_number_0(func_number_1(), func_number_0(number_15, (-func_number_2()), 1), 1)) // func_number_3())), func_number_3() % number_12 + func_number_0(1, func_number_1() % func_number_2() % func_number_3() % 1, func_number_4((not 1 > 1))), func_number_2()))), 1 // (-1 * 1 % number_16 * func_number_3() * 1)), 1), (-number_17))) * number_18), number_15, 1) * func_number_1() * 1 * (-number_15)), func_number_3(), 1), (-1), number_6), 1 % 1 % 1 % number_6, 1), number_7 * 1), func_number_3()) - 1 // number_19 > func_number_2():
    1
  1
else:
  bool_2 = (-number_20) >= (-func_number_4((not False))) // number_21 * (-number_13 // func_number_1())
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:False
if True:
  1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
False
number_0 = number_1
1
number_2 = number_1
None
(-1 - 1) - number_1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
number_0:int = 1
(not (not bool_0))
(-number_0)
False
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
number_0:int = 1
def func_number_0() -> int:
  number_1:int = 1
  if bool_0:
    (-number_1)
  (-func_number_0())
  number_1
  return number_1
1 // 1
bool_0
if bool_0:
  if False:
    if bool_0:
      if func_number_0() < 1:
        number_0
  else:
    number_0 = func_number_0()
    True
  None is None
bool_0 or True
func_number_0()
1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
bool_1:bool = False
bool_2:bool = False
number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
number_5:int = 1
if bool_0:
  if bool_1:
    number_0 = (-1) - number_1
    bool_2 = bool_0 or True
  elif (not number_1 <= 1) != (-(-number_2) - number_1 + number_3 + 1) :
    if number_1 <= (-number_3 % 1):
      number_3 * number_4
      if number_3 % 1 * number_2 > (-1) - number_5:
        1
        1
    (-(-1))
    True
    1
  elif (not True) :
    True
    number_2 = (-(-1))
else:
  1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
True
if False:
  1
number_0
1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:class class_0(object):
  pass
class_0_0:class_0 = None
class_0_0
None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:class class_0(object):
  pass
number_0:int = 1
bool_0:bool = False
class_0_0:class_0 = None
number_0 = 1
class_0_0
bool_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
bool_0:bool = False
def func_none_0(func_none_0_param_0: int, func_none_0_param_1: int, func_none_0_param_2: bool):
  func_none_0_param_0:int = 1
  func_none_0_param_1:int = 1
  number_6:int = 1
  number_7:int = 1
  number_8:int = 1
  number_9:int = 1
  number_10:int = 1
  number_11:int = 1
  number_12:int = 1
  number_13:int = 1
  func_none_0_param_2:bool = False
  bool_2:bool = False
  bool_3:bool = False
  bool_4:bool = False
  bool_5:bool = False
  bool_6:bool = False
  bool_7:bool = False
  bool_8:bool = False
  bool_9:bool = False
  if False:
    if bool_0:
      bool_2
      number_6
      number_2 = 1
      bool_3 = func_none_0_param_1 > func_number_0()
      (not bool_4)
    else:
      bool_5 = False
      1
      if 1 == number_7 + func_number_0():
        number_0
      bool_6
  else:
    bool_4 = bool_7
  bool_8 = (not bool_7)
  1
  if 1 <= number_3:
    number_8
    if False:
      number_6 = (-func_none_0_param_1)
    elif False :
      func_number_0()
      func_number_0()
      bool_8
      if (not func_number_0() > 1 * 1):
        1
        if False:
          number_2
        elif (not True) :
          bool_0
          if False:
            1
      else:
        (-1 * number_9 % func_number_0())
        (-1 * number_10) < 1
        (not 1 > number_11 * 1 or True)
        number_8 - func_none_0_param_0
      if bool_6:
        number_12 = number_12
        if 1 > 1:
          func_number_0() % 1 // 1 * number_8 % 1
      elif (not bool_0) :
        if True:
          True != 1
        else:
          if False:
            False
            False or bool_6
            1
            (not 1 % func_number_0() <= number_13)
    else:
      1
      (-1)
  1
  return func_none_0(1, 1 // func_number_0() // 1, bool_9)
def func_number_0() -> int:
  number_4:int = 1
  func_none_0((-(-1)), 1, False)
  1
  return number_4
None is None is None is func_none_0((-number_0), 1, bool_0) is None is func_none_0((-1), number_0 - (-1 // 1 * number_1) % (-number_2) - number_3 - func_number_0() + number_3, False) is None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
number_0:int = 1
number_1:int = 1
(-1) == bool_0
None is None is None
1 % 1
number_0
number_1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:class class_0(object):
  pass
number_0:int = 1
class_0_0:class_0 = None
if 1 < 1:
  number_0 - 1
class_0_0 = None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
1
number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
number_0 = number_0
number_1 + number_2
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
number_0:int = 1
bool_0 = (not (not number_0 + number_0 != 1 % 1))
if 1 >= 1:
  False
else:
  number_0 = (-(-(-number_0 // 1)))
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
1
bool_0
None is None is None is None is None
(-1)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
bool_0:bool = False
if number_0 - number_0 >= (-1):
  bool_0 = 1 <= 1 // number_0
else:
  False
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
bool_0 or False
1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
bool_1:bool = False
bool_2:bool = False
bool_3:bool = False
bool_4:bool = False
number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
number_5:int = 1
number_6:int = 1
number_7:int = 1
number_8:int = 1
def func_number_0() -> int:
  False
  return 1
def func_number_1(func_number_1_param_0: int) -> int:
  bool_5:bool = False
  bool_6:bool = False
  bool_7:bool = False
  func_number_1_param_0:int = 1
  number_10:int = 1
  number_11:int = 1
  number_12:int = 1
  number_13:int = 1
  number_14:int = 1
  number_15:int = 1
  number_16:int = 1
  def func_number_2() -> int:
    number_17:int = 1
    bool_2
    return number_17
  def func_number_3(func_number_3_param_0: int) -> int:
    bool_8:bool = False
    func_number_3_param_0:int = 1
    number_18:int = 1
    number_19:int = 1
    number_20:int = 1
    if func_bool_0():
      number_18 = number_19
    else:
      bool_8 = func_bool_0()
    func_number_3(1) != True
    return number_20 - 1
  def func_number_4() -> int:
    number_17:int = 1
    number_18:int = 1
    number_17 % (-1)
    return number_18
  def func_bool_0() -> bool:
    bool_8:bool = False
    bool_8
    return func_number_0() < func_number_2()
  1
  if bool_2:
    True
    if bool_5:
      number_8
      number_10 - 1 + 1 - 1 != number_6
      1
      1
      number_4
      if True:
        (-func_number_0() + (-(-func_number_0() - number_7 // number_11) + func_number_2()))
        (-number_4)
      else:
        number_11 * number_5
        number_7 + func_number_3(func_number_4())
        number_12
        1 // number_13
      True
      bool_6
    elif bool_0 :
      number_14
    elif 1 > 1 :
      1
    else:
      True or True
      True
    func_number_1((-func_number_1((-1 - 1 + 1 + (-1)) + func_number_3(number_5))))
  else:
    if func_bool_0():
      number_13 = func_number_1_param_0
  if bool_7:
    number_15 = func_number_1_param_0
  elif 1 + 1 >= number_16 :
    1
    (-(-1))
  return func_number_2()
if (not (not True)):
  1
  1
  if bool_0:
    1
    if bool_1:
      1
    if 1 < 1 - 1:
      False
    1
    if bool_2:
      1 - func_number_0()
      1 // func_number_0() + (-1) - number_0 % 1 % 1 // (-func_number_0()) * 1 // func_number_0()
      1
      number_0
      number_0
      number_1 = func_number_0()
    else:
      number_2
      True
    if False:
      number_0 = number_3
      1 >= func_number_0()
    elif True :
      False
      1
    else:
      1
      if bool_3:
        False
      else:
        1
        func_number_0() - func_number_0() * (-func_number_0()) * 1
        bool_1
      (not func_number_0() >= 1)
      (not True)
    if True:
      number_4 = func_number_0()
      if bool_4 != None:
        func_number_1(number_5 + func_number_1(func_number_1(1) // number_4 + 1) - 1 - 1 * number_6 % number_7 * 1)
      1 // number_8 // func_number_0() * 1
  else:
    1
  1
else:
  (-func_number_1(1))
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
bool_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:None
1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
(-1 * 1)
True
1 % 1 - (-(-number_0 * number_1 // 1 // number_2 - (-1) + number_1 // 1 * (-(-1)) - number_0 % (-1) + 1 - (-number_2))) * number_3
1 // number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:class class_0(object):
  pass
number_0:int = 1
class_0_0:class_0 = None
def func_number_0(func_number_0_param_0: bool) -> int:
  number_1:int = 1
  number_2:int = 1
  func_number_0_param_0:bool = False
  1 + number_1 * number_1 + 1 * number_2 - 1
  func_number_0(True)
  number_2 = 1
  return 1
def func_number_1() -> int:
  number_1:int = 1
  number_1 > (-number_0 % func_number_1() * 1 % number_1)
  (-1) % func_number_1()
  1
  return (-(-1)) - number_0
func_number_0((-func_number_1() - 1) > number_0)
class_0_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
bool_1:bool = False
number_0:int = 1
number_1:int = 1
number_2:int = 1
1
if (not bool_0):
  if bool_1:
    number_0 * 1 * number_0 * 1 // number_0 % number_1 * 1 % 1 * number_2 % 1
    number_1
    number_0
elif False :
  True
else:
  (-1)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:class class_0(object):
  pass
bool_0:bool = False
class_0_0:class_0 = None
def func_number_0(func_number_0_param_0: int) -> int:
  bool_1:bool = False
  bool_2:bool = False
  func_number_0_param_0:int = 1
  bool_1 or False
  bool_2
  return (-1)
if (not bool_0):
  (-func_number_0((-1))) // (-func_number_0(1))
else:
  if True:
    1
class_0_0
1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:class class_0(object):
  pass
bool_0:bool = False
bool_1:bool = False
bool_2:bool = False
bool_3:bool = False
bool_4:bool = False
bool_5:bool = False
bool_6:bool = False
number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
number_5:int = 1
number_6:int = 1
number_7:int = 1
number_8:int = 1
number_9:int = 1
number_10:int = 1
number_11:int = 1
number_12:int = 1
number_13:int = 1
number_14:int = 1
class_0_0:class_0 = None
class_0_1:class_0 = None
class_0_2:class_0 = None
def func_bool_0(func_bool_0_param_0: bool) -> bool:
  func_bool_0_param_0:bool = False
  number_15:int = 1
  True
  number_15 = 1
  func_number_0()
  return func_bool_0(True)
def func_bool_1(func_bool_1_param_0: int) -> bool:
  func_bool_1_param_0:int = 1
  func_number_0()
  (-1)
  number_7
  return bool_5
def func_number_0() -> int:
  number_15:int = 1
  number_16:int = 1
  func_bool_1(1)
  number_15 = 1
  bool_6
  number_16
  return 1 - 1
class_0_0
if False:
  if bool_0 or bool_0:
    1
    if func_bool_0(number_0 > 1):
      None is None is None is None is None is None is None is None is None
    else:
      if func_bool_0((-1) > (-(-1 - 1 * 1 - number_0))):
        1
        number_0 = 1
      elif (not func_bool_0(bool_0)) :
        1
      else:
        if func_bool_0((not False)):
          number_1 * number_2
          class_0_1
        elif 1 >= 1 :
          bool_1 = number_3 % 1 >= number_3
          number_4 = 1
        else:
          number_1 = number_5
        if 1 > number_6 - number_4:
          if bool_2 or (-number_7 % 1) >= number_8 + (-1):
            if class_0_2 != 1:
              None is None
            elif bool_3 or func_bool_0(func_bool_0(func_bool_0((not number_9 <= 1)))) :
              if True:
                None
              else:
                if True:
                  func_bool_0(True)
                elif False :
                  (-number_10)
                else:
                  1
                  if bool_2:
                    1
                    1
                    1
                    number_6 = number_3
                1
                True
                1
            else:
              False
          else:
            1 // (-number_11)
        else:
          func_number_0()
        if False:
          if bool_2:
            func_number_0()
  if func_bool_1(1 * 1 - number_12 // func_number_0()):
    if (not bool_4):
      func_number_0() - number_13 * func_number_0()
    elif False :
      func_bool_0(number_9 < 1)
      if False:
        None
        1
        None
        if True:
          func_number_0()
      else:
        False
        (-1)
        number_14
      number_13
  else:
    bool_5 = (not func_bool_1(number_14))
    1 - number_0
    number_6 = 1
    bool_6
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
def func_number_0() -> int:
  False
  return (-(-number_0))
number_0 = (-func_number_0() // func_number_0()) - 1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
def func_number_0(func_number_0_param_0: int, func_number_0_param_1: bool) -> int:
  func_number_0_param_0:int = 1
  number_4:int = 1
  number_5:int = 1
  func_number_0_param_1:bool = False
  bool_1:bool = False
  bool_2:bool = False
  number_4
  False
  return func_number_0(func_number_0(func_number_0((-(-1)) // func_number_0(func_number_0((-(-(-number_5))), bool_1), True) % 1 * 1, bool_1), False), bool_2)
1
if 1 > number_0:
  1
number_1 - func_number_0((-func_number_0(1, True)), 1 < number_2)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
bool_0:bool = False
number_0 - 1
number_1 = 1 // 1
bool_0
(-(-1))
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0 = (-1)
(not False)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
number_0:int = 1
number_1:int = 1
if True or False:
  (-1 % 1 // 1)
  bool_0 = number_0 <= (-1) + number_1
  1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
1 + (-1)
if False:
  (not number_0 < 1 % (-1) % (-1))
  number_1 % 1
else:
  number_2 = number_1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
number_5:int = 1
number_6:int = 1
number_7:int = 1
number_8:int = 1
number_9:int = 1
number_10:int = 1
number_11:int = 1
number_12:int = 1
number_13:int = 1
number_14:int = 1
number_15:int = 1
number_16:int = 1
number_17:int = 1
number_18:int = 1
number_19:int = 1
number_20:int = 1
number_21:int = 1
number_22:int = 1
number_23:int = 1
number_24:int = 1
number_25:int = 1
number_26:int = 1
bool_0:bool = False
bool_1:bool = False
bool_2:bool = False
bool_3:bool = False
bool_4:bool = False
bool_5:bool = False
bool_6:bool = False
bool_7:bool = False
bool_8:bool = False
bool_9:bool = False
bool_10:bool = False
bool_11:bool = False
bool_12:bool = False
bool_13:bool = False
bool_14:bool = False
def func_none_0(func_none_0_param_0: int):
  func_none_0_param_0:int = 1
  number_28:int = 1
  number_29:int = 1
  number_30:int = 1
  bool_15:bool = False
  bool_16:bool = False
  def func_none_1(func_none_1_param_0: int, func_none_1_param_1: int):
    func_none_1_param_0:int = 1
    func_none_1_param_1:int = 1
    bool_17:bool = False
    if False:
      (not func_bool_0())
    else:
      if (not (not True)):
        func_number_2()
      else:
        1
      bool_17
    return None is None
  def func_number_6() -> int:
    number_31:int = 1
    number_31 = 1
    return 1
  if 1 == func_number_5():
    if True:
      if (not (not False)):
        func_none_1(1, func_number_1())
        if bool_15 or (not False):
          bool_2
        elif bool_16 :
          1 % 1 - number_28
          number_29 * number_1
          False
        elif bool_4 :
          func_number_2()
          func_number_6()
          (-1 % 1)
          if (not 1 > number_30 // (-func_number_3()) + number_9):
            number_9
          elif True :
            True
            if False:
              (not False)
            else:
              False
              func_bool_0()
          else:
            number_3 + 1
      else:
        1
      number_15
  return None is None
def func_number_0(func_number_0_param_0: bool, func_number_0_param_1: bool) -> int:
  number_27:int = 1
  func_number_0_param_0:bool = False
  func_number_0_param_1:bool = False
  number_27
  return number_24
def func_number_1() -> int:
  bool_15:bool = False
  (not bool_15)
  return 1
def func_number_2() -> int:
  number_27:int = 1
  number_28:int = 1
  number_29:int = 1
  number_27 = number_28
  number_29
  return number_12
def func_number_3() -> int:
  1
  func_number_5() // 1 + (-func_number_2())
  return number_23
def func_number_4(func_number_4_param_0: bool, func_number_4_param_1: int, func_number_4_param_2: int, func_number_4_param_3: int, func_number_4_param_4: int) -> int:
  func_number_4_param_1:int = 1
  func_number_4_param_2:int = 1
  func_number_4_param_3:int = 1
  func_number_4_param_4:int = 1
  func_number_4_param_0:bool = False
  True
  return func_number_3()
def func_number_5() -> int:
  number_27:int = 1
  number_27 % func_number_5() * func_number_5() * 1
  return number_20 % 1
def func_bool_0() -> bool:
  bool_15:bool = False
  bool_16:bool = False
  def func_number_6(func_number_6_param_0: int) -> int:
    func_number_6_param_0:int = 1
    number_28:int = 1
    number_29:int = 1
    number_30:int = 1
    number_31:int = 1
    number_32:int = 1
    number_33:int = 1
    number_34:int = 1
    number_35:int = 1
    number_36:int = 1
    number_37:int = 1
    number_38:int = 1
    number_39:int = 1
    number_40:int = 1
    number_41:int = 1
    bool_17:bool = False
    bool_18:bool = False
    bool_19:bool = False
    bool_20:bool = False
    def func_number_7(func_number_7_param_0: int) -> int:
      func_number_7_param_0:int = 1
      def func_number_8(func_number_8_param_0: bool, func_number_8_param_1: bool) -> int:
        number_43:int = 1
        number_44:int = 1
        func_number_8_param_0:bool = False
        func_number_8_param_1:bool = False
        def func_number_9() -> int:
          number_45:int = 1
          number_46:int = 1
          number_47:int = 1
          def func_number_10(func_number_10_param_0: bool) -> int:
            func_number_10_param_0:bool = False
            bool_24:bool = False
            bool_25:bool = False
            number_11 + 1 + 1
            if func_bool_2(number_4):
              True
            else:
              bool_24 = bool_25
            return number_16 * 1
          False
          func_number_7(number_12) + number_13 - 1 * 1 * 1
          number_45 = number_46
          func_bool_0()
          number_47
          return func_number_9() // func_number_4(True, 1, func_number_10((not bool_11)), number_4, 1) * 1
        if True:
          func_number_7(1)
        elif bool_17 :
          1
          number_43 = 1
          None
          1
        else:
          func_number_9()
        (-number_28)
        return func_number_7(func_number_9() * number_44)
      func_number_8(False, False)
      return 1
    def func_bool_1(func_bool_1_param_0: int) -> bool:
      func_bool_1_param_0:int = 1
      number_43:int = 1
      bool_21:bool = False
      (not func_bool_1(number_43 // 1 + 1))
      1
      return bool_21
    def func_bool_2(func_bool_2_param_0: int) -> bool:
      func_bool_2_param_0:int = 1
      number_43:int = 1
      number_44:int = 1
      number_45:int = 1
      number_46:int = 1
      number_47:int = 1
      number_48:int = 1
      number_49:int = 1
      number_50:int = 1
      number_51:int = 1
      number_52:int = 1
      bool_21:bool = False
      def func_number_8() -> int:
        number_53:int = 1
        number_54:int = 1
        number_55:int = 1
        number_56:int = 1
        number_57:int = 1
        number_58:int = 1
        number_59:int = 1
        number_60:int = 1
        number_61:int = 1
        number_62:int = 1
        number_63:int = 1
        number_64:int = 1
        number_65:int = 1
        number_66:int = 1
        number_67:int = 1
        number_68:int = 1
        number_69:int = 1
        number_70:int = 1
        number_71:int = 1
        number_72:int = 1
        number_73:int = 1
        number_74:int = 1
        number_75:int = 1
        number_76:int = 1
        bool_22:bool = False
        bool_23:bool = False
        bool_24:bool = False
        bool_25:bool = False
        bool_26:bool = False
        bool_27:bool = False
        def func_number_9() -> int:
          number_77:int = 1
          number_78:int = 1
          number_79:int = 1
          number_80:int = 1
          func_number_12(1) * number_77 + 1 - func_number_7((-func_number_2())) + func_number_12(number_25) // (-number_78 // func_number_2() % number_79) + func_number_8()
          return number_80
        def func_number_10() -> int:
          number_28 = 1
          return func_number_1()
        def func_number_11(func_number_11_param_0: int) -> int:
          func_number_11_param_0:int = 1
          1 // 1
          1
          return 1
        def func_number_12(func_number_12_param_0: int) -> int:
          func_number_12_param_0:int = 1
          number_78:int = 1
          number_79:int = 1
          number_78
          func_number_6(1)
          None is func_none_0((-func_number_12(number_12)))
          return number_79
        def func_bool_3(func_bool_3_param_0: int, func_bool_3_param_1: bool, func_bool_3_param_2: int, func_bool_3_param_3: int, func_bool_3_param_4: bool, func_bool_3_param_5: int, func_bool_3_param_6: int) -> bool:
          func_bool_3_param_0:int = 1
          func_bool_3_param_2:int = 1
          func_bool_3_param_3:int = 1
          func_bool_3_param_5:int = 1
          func_bool_3_param_6:int = 1
          number_82:int = 1
          func_bool_3_param_1:bool = False
          func_bool_3_param_4:bool = False
          number_82
          return (not False)
        if True:
          bool_22 or (not True) == number_18 + 1 + func_number_6_param_0 // 1 // 1
        else:
          True
          (-1)
          if func_bool_3(1, False, 1, 1 - 1 * number_53, number_54 <= number_55 + number_56, func_number_6(func_number_3()) // number_14, func_number_9() - number_57):
            None is func_none_0(number_30) is None is None
          elif func_bool_3(1 // (-1 * 1), func_bool_0(), number_49, number_15, bool_16, 1, func_number_4(True or func_bool_3(func_number_6(number_26 // func_number_4((not (-(-1)) != bool_20 != (-1)), number_6, number_58, 1, number_59) - number_60) // func_number_0(bool_12, func_bool_2(1)), (not bool_9), number_22 + func_number_9(), 1, False, number_61, number_62), 1, (-1), func_number_7(func_number_0(False, func_bool_2(func_number_0(func_bool_3((-number_48 * func_number_3() - number_36 - func_number_5()) + 1, bool_23, number_20, number_31, (not False), (-1), func_number_6(number_21 % (-1))), False)))) * 1 % 1, 1)) :
            1
            bool_24 = func_bool_3(1, True, 1, (-1 % func_number_1() % func_number_3() % 1), bool_25, 1, func_number_8())
          else:
            number_63 = number_64
          if False or True or func_bool_3(number_18 + 1 // func_number_8(), func_bool_3(1, number_65 < 1 * 1, 1, number_66, number_53 % 1 - 1 == number_65 or 1 != (-1), 1, 1), 1, func_number_4(bool_25, 1, 1, func_number_2(), 1), (not False), func_number_8(), 1):
            (-1)
          else:
            func_number_10()
            if func_number_8() < 1 * (-(-func_number_0(func_bool_2(func_number_0((not 1 <= number_67), False)), bool_26))):
              func_none_0(func_number_5())
            if func_bool_1(func_number_3() - number_1):
              1 % number_68
              if True:
                func_number_7(number_65)
                None is func_none_0((-number_41))
                number_57 % (-func_number_11(1))
              number_69
            1
            if func_bool_2(number_65 // 1 - func_number_2() - number_70 - 1 + 1 // 1 * func_number_2()):
              func_bool_1(1)
              (-(-(-func_number_5())))
            1
            func_number_4(func_bool_1(1 * func_number_8() + func_number_11(number_71 - func_number_5() % number_3 % 1 // 1 + 1)), (-func_number_12(number_72) + func_number_11(number_49) * 1 * func_number_6(func_number_8()) // 1 - 1 - func_number_5()), 1, 1, 1)
            number_73 = (-func_number_4(bool_27, 1, 1, 1, func_number_1()) // number_74)
          number_75 = number_32
          func_number_6(1) > func_number_2()
          (-1 + 1)
        1
        return 1 // func_number_11(func_number_12(1 // number_30 // (-number_76)))
      False
      if (-number_2) <= number_43:
        func_number_8()
        if func_bool_0():
          if True:
            (-number_39)
            if func_bool_2(func_number_1()):
              number_16 = 1
          if True or True:
            (-(-number_44 % number_45 // 1 * 1 + 1 // (-number_46 // number_47 % 1)))
            if True:
              number_8
              (-number_48) > 1
            number_49
          elif False :
            None
          elif 1 + (-(-1)) >= 1 :
            func_number_7(func_number_3())
            False
          else:
            if bool_21:
              bool_15
            else:
              number_50 = (-1 * number_51)
              (not func_number_8() > func_number_0(True, False))
            number_32
            number_35 // number_52 * 1
          func_bool_0()
      else:
        1
      return func_bool_0()
    if func_number_3() == func_number_3():
      True
      number_28
    elif func_bool_0() :
      number_29
      number_4 = (-number_21)
      False
      1
      number_30
      bool_17 = (-1) != 1
      if func_number_5() > func_number_0(bool_18, func_bool_0()):
        None
        bool_19
      else:
        True
      1
      1
    elif bool_5 :
      number_31
      bool_9 = bool_15
    else:
      if False or func_bool_0():
        if True:
          bool_4
          func_number_2() - 1 + number_6 - func_number_6(func_number_5())
        elif bool_13 :
          number_19
        else:
          if True:
            number_17 = number_32
            if func_bool_1(number_32):
              func_number_2() + 1 % (-number_33)
            else:
              1
              1
            (-1)
            if False:
              func_bool_2(1)
            elif True :
              number_31
              number_34
              bool_1 == func_number_2()
              if 1 != func_number_2():
                (-func_number_0(False, True))
              else:
                number_35
            elif True :
              number_0
              number_6
              func_number_2()
            else:
              func_bool_2(number_4)
              number_5
              number_36
          elif bool_20 or True :
            number_37 = 1 // number_38
          else:
            1
          func_none_0(func_number_1())
        number_31
        1
        bool_13 or func_bool_2((-1 - 1))
      number_4
    1
    func_bool_2(func_number_4(True, number_24, number_39, number_37, 1))
    False
    number_23
    return number_30 - func_number_7(number_40 + 1 % func_number_4(func_bool_2(1), 1 - number_21, (-number_20) % (-1) // number_41, 1, func_number_2()))
  (not func_number_5() + func_number_3() - func_number_6(1) * 1 <= 1 or bool_15)
  func_number_0((not bool_16), bool_0)
  return False
(-number_0) < 1
if number_1 < number_2:
  func_none_0(1 % number_3 + (-1 % number_0))
else:
  number_4 = (-1)
if False:
  if bool_0:
    (-number_5)
    (-number_3)
    1
  else:
    if False:
      if (not (not True) or False):
        True
      elif bool_0 :
        if number_5 % func_number_0(True, bool_0) >= 1:
          func_number_0(bool_0, 1 > func_number_1())
          False
          bool_1
          (-func_number_1()) * 1
        elif bool_0 :
          1
          bool_1 = False
          func_number_0(bool_1, True) - number_3 != func_number_0(False, number_4 != 1) > (-number_5 + 1) // func_number_0(True, number_6 > func_number_1())
          if (not 1 <= number_6):
            1
          else:
            1
            1
          if True:
            1
            number_7 * func_number_2()
          else:
            func_number_2() % 1
            (-1)
          1
          False
          1
          None is func_none_0(1)
          (not True)
        else:
          bool_2
        (-number_8)
    else:
      number_9
    True
    if True:
      (-func_number_3())
      1
    (not False)
  number_1
  func_number_2()
  number_7 = 1 - number_10
  if bool_3:
    number_11 > 1
    if True:
      number_4
      1 > number_12
      if False:
        if bool_4:
          1
        number_13 = number_14
      else:
        number_15 > (-1) == func_none_0(func_number_3() - 1) or func_bool_0()
    func_number_1()
    1
  elif bool_5 :
    (-number_4)
  else:
    if (not False):
      if False:
        number_16
      elif number_15 != 1 - number_12 :
        func_number_0(bool_6, bool_7)
      elif (not True) :
        func_number_1()
      elif bool_8 :
        1
        if func_number_2() >= 1 + 1:
          False
          1 == 1 * number_6
          if (not False):
            if bool_6:
              func_none_0(func_number_4(func_bool_0() != bool_3, 1, number_17, 1, number_18))
            else:
              func_number_3()
              number_17 = 1
              (-func_number_3())
            (not func_bool_0())
            if func_number_1() == None:
              if False:
                func_number_2() % 1
                1 // 1 * 1
                number_19
              elif False :
                func_number_2()
              elif func_bool_0() :
                func_bool_0()
                if (not bool_9):
                  if 1 != False:
                    if func_bool_0():
                      1
                  elif False :
                    func_number_5()
                    1
                number_12 = number_20
                if bool_10:
                  number_14 = 1 % func_number_5() // 1
                1
              else:
                number_17 = 1
                (-1 * 1 + 1)
                if False:
                  if True:
                    (-func_number_1()) <= func_number_5()
                    func_number_0(bool_11, True)
                else:
                  func_number_1()
                number_21
                if False:
                  if bool_12:
                    bool_13 = (not number_22 <= 1) != False
                  elif func_bool_0() :
                    number_0 * 1
                  else:
                    None
              number_0 = func_number_5() + number_7
              1
            if False:
              (-number_8)
          else:
            if bool_14:
              number_23 = number_24 + func_number_2()
            func_number_1()
            func_number_1()
          None
        1 + 1
        (-func_number_3()) - 1
      else:
        1 % (-1)
        func_number_3()
    1
  if (not (not func_number_2() <= 1)):
    if False:
      1
      number_25 = (-(-func_number_2()))
    else:
      1 * number_26
  else:
    1
  1
else:
  number_0 = 1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
bool_0:bool = False
bool_1:bool = False
bool_2:bool = False
def func_number_0(func_number_0_param_0: int, func_number_0_param_1: bool) -> int:
  func_number_0_param_0:int = 1
  number_4:int = 1
  func_number_0_param_1:bool = False
  None is None is None is None
  return number_4
def func_bool_0(func_bool_0_param_0: bool) -> bool:
  func_bool_0_param_0:bool = False
  1
  return True
if (not number_0 * 1 + func_number_0(number_1 - func_number_0(func_number_0(1, bool_0), 1 > number_0 + 1), bool_0 or bool_1) // 1 <= number_2):
  number_2 = number_1
else:
  True
(not func_bool_0(bool_2))
None is None is None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:def func_number_0(func_number_0_param_0: int) -> int:
  func_number_0_param_0:int = 1
  number_1:int = 1
  bool_0:bool = False
  def func_number_1() -> int:
    1
    return 1
  def func_bool_0() -> bool:
    1
    return bool_0
  bool_0 = func_bool_0()
  False
  return func_number_1() // number_1
(not func_number_0(1) > 1)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
1
None
bool_0 = False
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
False
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0
1
1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
number_0:int = 1
def func_number_0(func_number_0_param_0: int) -> int:
  func_number_0_param_0:int = 1
  func_number_0(1 // func_number_0(1)) // number_0
  1
  (-1)
  None
  return func_number_0(1)
1
if bool_0:
  (-1 // number_0 // 1) // func_number_0(1)
1
None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
(-1)
1 // (-number_0)
number_1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:class class_0(object):
  pass
class_0_0:class_0 = None
class_0_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1 - (-1) * 1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0
1 * 1
None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
bool_0:bool = False
number_0 = 1
number_1 + number_2 % 1
1
bool_0
(-number_1) % 1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:class class_0(object):
  pass
bool_0:bool = False
number_0:int = 1
class_0_0:class_0 = None
class_0_0 = None
None
bool_0
(-number_0) // (-(-1) % (-1) % 1)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
bool_0:bool = False
1
number_0
1
(not (not bool_0))
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
(-1 - number_0 % number_0)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
(not bool_0)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
number_0:int = 1
if bool_0:
  1
number_0 = (-1)
True
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0 = (-number_0 * number_0) % (-1)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
bool_0:bool = False
number_0 + number_0 + number_0
bool_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
def func_number_0() -> int:
  number_2:int = 1
  bool_0:bool = False
  if number_1 > 1:
    func_number_0() % func_number_0()
  else:
    1
    number_2 = 1 // 1
    number_0 = 1
    func_number_0() + 1
    True or bool_0
  return 1
(-1) % func_number_0()
1
number_0 - func_number_0() % number_1 > func_number_0()
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
number_0:int = 1
number_1:int = 1
bool_0
1 + (-number_0) % 1
number_1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
number_0:int = 1
number_1:int = 1
number_2:int = 1
def func_none_0():
  (-number_0)
  return None is func_none_0()
def func_class_0(func_class_0_param_0: int, func_class_0_param_1: bool) -> undefined:
  class class_0(object):
    pass
  func_class_0_param_1:bool = False
  func_class_0_param_0:int = 1
  class_0_0:class_0 = None
  1
  return class_0_0
if (not False):
  (-1)
elif bool_0 :
  1 * 1
  number_0
  1
  (-1)
func_none_0() is func_none_0() is None is None
number_1 - 1
func_class_0(number_2, True)
False
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0
1 + 1
None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
bool_0:bool = False
bool_1:bool = False
def func_number_0(func_number_0_param_0: int) -> int:
  func_number_0_param_0:int = 1
  number_6:int = 1
  number_7:int = 1
  number_8:int = 1
  bool_2:bool = False
  bool_3:bool = False
  if bool_0:
    number_6 = 1 * 1
  else:
    number_7
  if (not False):
    if bool_2:
      number_3 = number_0
    func_number_0_param_0
    1
    1 % 1
    if bool_3:
      None
      1
      None
    elif 1 - 1 > number_2 :
      (-1) + 1
    if False:
      (-number_0)
    elif bool_1 :
      1
    else:
      number_7
      func_number_1(number_8, 1)
      number_6 != func_number_1(1, 1)
  1
  return 1
def func_number_1(func_number_1_param_0: int, func_number_1_param_1: int) -> int:
  func_number_1_param_0:int = 1
  func_number_1_param_1:int = 1
  1
  return 1
1
False
False
if True:
  1 + 1 // number_0
elif False :
  1 + number_0
  if False or True:
    False
  else:
    1
if True:
  1 + func_number_0((-func_number_0(1) % func_number_0(func_number_0(number_1)))) // number_1 // number_1 - func_number_0(number_2 // number_1) * 1
else:
  if bool_0 == 1:
    number_3
    1
    1
    None is None
  else:
    if False:
      bool_1
      1
    elif bool_1 :
      func_number_0((-func_number_0(func_number_0(1 + func_number_1(number_4, 1)) % func_number_1(1 - func_number_1(1, 1 % number_4), number_0) * number_3))) - 1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1 * 1
1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
(-number_0) % number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
1 // 1 * number_0
None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
number_0:int = 1
if bool_0:
  1
if bool_0:
  number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_0
number_1
None is None is None is None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
def func_bool_0(func_bool_0_param_0: int, func_bool_0_param_1: int, func_bool_0_param_2: int) -> bool:
  func_bool_0_param_0:int = 1
  func_bool_0_param_1:int = 1
  func_bool_0_param_2:int = 1
  None
  return 1 <= 1
func_bool_0(1, (-1) + (-1) * 1, number_0)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
1 % number_0 + 1
False
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
if bool_0:
  1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:None
1
1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
bool_1:bool = False
bool_2:bool = False
bool_3:bool = False
bool_4:bool = False
number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
number_5:int = 1
number_6:int = 1
number_7:int = 1
number_8:int = 1
number_9:int = 1
number_10:int = 1
number_11:int = 1
number_12:int = 1
def func_bool_0(func_bool_0_param_0: int) -> bool:
  func_bool_0_param_0:int = 1
  number_14:int = 1
  number_6
  1 // number_14 * 1
  return 1 // 1 <= 1 - 1
def func_bool_1(func_bool_1_param_0: bool) -> bool:
  func_bool_1_param_0:bool = False
  number_13:int = 1
  def func_number_0() -> int:
    True
    return 1
  number_13
  func_number_0()
  1
  func_number_0()
  1 % func_number_0() * func_number_0() % func_number_0()
  return (-number_7) <= 1 // 1
def func_bool_2(func_bool_2_param_0: int, func_bool_2_param_1: int) -> bool:
  func_bool_2_param_0:int = 1
  func_bool_2_param_1:int = 1
  number_15:int = 1
  1 % 1
  if func_bool_1((not 1 > 1)):
    1
  1
  return (not 1 // number_15 >= func_bool_2_param_0)
if bool_0:
  if bool_1:
    if 1 < 1:
      if 1 < 1:
        (-(-1))
      (not True)
    else:
      (-number_0)
      number_0
      bool_2
      bool_0
      number_1 = 1
  else:
    number_2
  bool_3
  (not 1 + number_2 > number_3 - number_2) or (not func_bool_0(1))
  None
  if (not number_4 > (-number_4)):
    bool_4
  else:
    if True:
      bool_1
  number_5 - number_1 * (-1)
  if number_6 > 1:
    (-1)
  if bool_1:
    func_bool_1(True)
    1 // number_2 - number_7
if func_bool_1(func_bool_1(func_bool_2(number_8 + number_6, number_9))):
  1 * number_2 - number_10 - 1 % number_11 + number_7
number_6 = number_12
None is None
number_6
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
1 % (-1) % number_0 + 1 // (-(-1 // number_1) - 1)
(-number_0)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:None is None is None is None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:def func_none_0():
  if True:
    1
  return None
None is None is None is None is func_none_0() is None is None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
bool_0:bool = False
bool_1:bool = False
bool_2:bool = False
bool_3:bool = False
1 + number_0
True
None
if 1 != number_0:
  bool_0
  (-(-1))
elif False :
  1 - 1 + 1
elif bool_1 :
  1 * number_1 - (-1)
(not bool_2)
1
if None != (-1 // number_1):
  bool_3
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
def func_number_0() -> int:
  bool_0:bool = False
  1
  bool_0
  1
  return func_number_0()
if (not 1 < 1):
  func_number_0() % number_0 + func_number_0() - (-1)
  func_number_0()
(not func_number_0() // 1 - number_0 * 1 != (-(-1 % 1 * number_1)))
number_1 = func_number_0()
False
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
bool_0:bool = False
bool_1:bool = False
bool_2:bool = False
number_0 - number_0 >= number_0
if bool_0:
  if bool_1:
    number_1 = number_2
elif 1 == None :
  bool_2 = bool_2
  number_1
else:
  (-1)
if True:
  1
  1 != 1 + (-number_0)
else:
  None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
def func_number_0(func_number_0_param_0: int, func_number_0_param_1: int, func_number_0_param_2: int, func_number_0_param_3: bool, func_number_0_param_4: bool, func_number_0_param_5: int) -> int:
  func_number_0_param_0:int = 1
  func_number_0_param_1:int = 1
  func_number_0_param_2:int = 1
  func_number_0_param_5:int = 1
  number_6:int = 1
  number_7:int = 1
  number_8:int = 1
  number_9:int = 1
  number_10:int = 1
  number_11:int = 1
  number_12:int = 1
  number_13:int = 1
  func_number_0_param_3:bool = False
  func_number_0_param_4:bool = False
  bool_2:bool = False
  bool_3:bool = False
  bool_4:bool = False
  bool_5:bool = False
  def func_number_1() -> int:
    False
    return 1
  def func_number_2(func_number_2_param_0: int, func_number_2_param_1: int) -> int:
    func_number_2_param_0:int = 1
    func_number_2_param_1:int = 1
    number_16:int = 1
    1 > number_8
    number_16 = func_number_1()
    return 1
  func_number_0(func_number_1() * 1 % func_number_0(func_number_0((-number_6) % 1, 1, 1, True, (not bool_2), func_number_1() + 1), (-func_number_0_param_2), 1 * 1 + 1, func_number_0_param_4, True, (-func_number_2(1, 1))), number_7, number_1, bool_3, (not False), number_8)
  return 1 % func_number_2(1, 1) % func_number_1() + func_number_0_param_1 * func_number_0(1, number_9, 1 * number_1, func_number_0_param_3, bool_4, func_number_1()) * func_number_2(func_number_0(func_number_1(), func_number_1() * (-func_number_2((-1), 1)), 1 + (-number_10), func_number_0_param_4, number_9 % (-func_number_0(1 % func_number_0(1 * (-1), 1 + number_11, 1, func_number_0_param_4, bool_5, func_number_1()) - 1, number_12, func_number_0_param_2, True, True or (not False), 1)) == bool_4, number_13), func_number_1()) % 1 + (-1)
1 > (-(-number_0) * 1 - (-func_number_0((-1), 1, number_0, (not False), (not True), number_1)))
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
bool_0:bool = False
bool_1:bool = False
bool_2:bool = False
bool_3:bool = False
def func_number_0(func_number_0_param_0: bool) -> int:
  number_5:int = 1
  func_number_0_param_0:bool = False
  bool_5:bool = False
  if bool_5:
    if True:
      number_5
    else:
      False
      None
  return (-1)
def func_number_1(func_number_1_param_0: bool) -> int:
  number_5:int = 1
  func_number_1_param_0:bool = False
  bool_5:bool = False
  if True or bool_5:
    number_1 = func_number_0(bool_0)
  else:
    (-func_number_0(True))
  return number_5
if number_0 > func_number_0(1 > func_number_0(bool_0 or bool_1)) % 1:
  if (not (-func_number_0(bool_2)) > 1):
    1
elif 1 != None :
  1 - (-func_number_0(False) + number_0)
  number_0 = number_0 + func_number_0(True)
if False:
  False
func_number_1(True)
if (not False):
  number_1
  number_2 = (-number_3 + func_number_1(number_1 - number_2 > func_number_0(bool_3 or (not True))) * 1 - (-1))
  (-func_number_0(bool_3))
  1
elif bool_1 or 1 == number_2 == number_3 :
  False
  number_4
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0
(-(-number_0 % 1)) * 1 // number_0 + 1
1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
if (not 1 <= (-number_0 + number_1) // 1):
  1
number_2
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:False
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
(not True)
1
if True:
  1
else:
  (-1)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
bool_0:bool = False
bool_1:bool = False
number_0
(-1) - 1
bool_0
if False:
  None
bool_1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
if bool_0:
  1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:class class_0(object):
  pass
bool_0:bool = False
number_0:int = 1
class_0_0:class_0 = None
bool_0
1 - (-number_0)
class_0_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
(-number_0 + 1) - number_1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
number_0:int = 1
number_1:int = 1
if bool_0:
  number_0
  (-1) // number_1 + number_0
else:
  1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
bool_0:bool = False
1 // (-number_0 + 1 // 1)
bool_0 = True
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
bool_0:bool = False
def func_bool_0(func_bool_0_param_0: int) -> bool:
  func_bool_0_param_0:int = 1
  1
  return False == number_0
1
if True:
  if False:
    number_0 = 1
  True
  if False:
    bool_0
    if func_bool_0((-1) - (-(-number_0)) % number_0):
      True
    else:
      1
      1
  number_0
  (-1)
elif 1 != (not func_bool_0(1)) :
  bool_0
  1
  False
else:
  bool_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
(-1)
number_0 = 1
1
None
number_0
None is None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
1
(-number_0)
(-number_0)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0 = 1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
1
number_0
None is None is None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
def func_number_0(func_number_0_param_0: int, func_number_0_param_1: int) -> int:
  func_number_0_param_0:int = 1
  func_number_0_param_1:int = 1
  number_3:int = 1
  1 % number_3
  return 1
func_number_0(number_0, (-(-1)))
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:None
1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
False
number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
bool_0:bool = False
bool_1:bool = False
bool_2:bool = False
if (not 1 > number_0):
  number_0 = (-(-number_0))
elif number_1 == number_1 + 1 :
  bool_0 = False
  if False:
    if (not False):
      if (not False):
        1
      else:
        number_0 = number_1
        number_0 = (-1)
      1 + 1
    elif False or bool_1 :
      bool_2 = False or True or False
      (-1)
    else:
      1
  else:
    1 % 1 // (-1)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:True
None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
if False:
  (-1)
else:
  number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0 + number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
def func_number_0() -> int:
  number_1:int = 1
  bool_0:bool = False
  number_1 - func_number_0()
  if bool_0:
    1
    number_0 = 1
  return (-number_1)
number_0 = 1 * func_number_0()
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
if 1 > number_0 // 1:
  1 % 1 - 1
  1
else:
  None
None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
def func_number_0() -> int:
  def func_number_1() -> int:
    bool_0:bool = False
    bool_0
    return 1 - func_number_0() - 1 + (-func_number_1()) - func_number_1() * (-number_0)
  None
  return (-func_number_1() - func_number_1() - 1 - 1 // 1 - func_number_0() + number_0) * func_number_1() - number_0
1 - 1 // number_0 % func_number_0() % number_0 % 1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:None
1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
number_5:int = 1
number_6:int = 1
number_7:int = 1
number_8:int = 1
number_9:int = 1
number_10:int = 1
number_11:int = 1
number_12:int = 1
bool_0:bool = False
1 + (-1)
number_0 * number_1 + 1 * number_2 + 1 * number_1 - (-number_1) % 1 - number_0 + number_3 - 1
number_4 + 1
if True:
  number_5
  True
  (-1)
  (-1 * number_6 * 1 // (-number_7)) + (-1) > number_7 % 1
elif 1 > number_8 % 1 * number_9 :
  number_10 = (-number_11)
  number_7 = 1 - 1
elif (not bool_0) :
  number_12 + 1 % 1 % 1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:False
None is None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
False
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:class class_0(object):
  pass
number_0:int = 1
number_1:int = 1
number_2:int = 1
class_0_0:class_0 = None
class_0_0
number_0 // 1 // number_1
number_1 <= number_2 // 1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
bool_0:bool = False
if (not number_0 * 1 >= 1):
  1
  1
  (-(-1))
elif 1 + 1 >= 1 :
  if bool_0:
    if bool_0 or bool_0:
      number_0
    else:
      bool_0
      number_1 * number_1 - (-1) // number_1
      number_1
  else:
    number_2
    1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
bool_1:bool = False
number_0:int = 1
number_1:int = 1
number_2:int = 1
bool_0
bool_1
number_0 = number_1
if False:
  1 - number_2 % 1
1
False
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
number_5:int = 1
number_6:int = 1
number_7:int = 1
number_8:int = 1
number_9:int = 1
bool_0:bool = False
bool_1:bool = False
def func_bool_0(func_bool_0_param_0: int, func_bool_0_param_1: int) -> bool:
  func_bool_0_param_0:int = 1
  func_bool_0_param_1:int = 1
  number_12:int = 1
  number_13:int = 1
  number_14:int = 1
  number_15:int = 1
  number_16:int = 1
  number_17:int = 1
  bool_2:bool = False
  if False:
    if func_bool_0((-number_5), 1 - 1):
      (not True)
      if (not func_bool_0(number_12, (-(-number_13)))):
        1
        number_14 - 1 // number_0 // 1 + number_15 // number_12 + (-1) % 1
        if bool_2:
          number_4 = 1
    else:
      number_16 = number_2
      number_17 = 1
      func_bool_0_param_1
  bool_2 = False
  return False
1
1
if func_bool_0(number_0, number_0) or func_bool_0((-number_1), 1 - 1):
  1
elif True :
  if number_1 > 1 % number_0 % 1 % number_2 - number_2:
    number_3
  else:
    if False:
      func_bool_0(1, (-1)) != 1
    else:
      1 // number_4 + 1 * 1 + number_5 // number_6 // (-(-number_7 * 1)) + 1
  func_bool_0((-1), (-1))
elif number_8 * (-number_3) != None :
  1
  1
  1
  1 - 1 * 1 + (-number_2)
  number_3
elif False :
  1
elif bool_0 :
  None
else:
  number_6 = number_9
  1
if func_bool_0(1, 1):
  if bool_1:
    1
else:
  True
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
bool_1:bool = False
bool_2:bool = False
bool_3:bool = False
number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
number_5:int = 1
number_6:int = 1
number_7:int = 1
number_8:int = 1
number_9:int = 1
number_10:int = 1
number_11:int = 1
number_12:int = 1
number_13:int = 1
number_14:int = 1
def func_bool_0(func_bool_0_param_0: int) -> bool:
  func_bool_0_param_0:int = 1
  number_16:int = 1
  number_17:int = 1
  number_18:int = 1
  number_19:int = 1
  number_20:int = 1
  number_21:int = 1
  number_22:int = 1
  number_23:int = 1
  def func_number_4(func_number_4_param_0: bool) -> int:
    func_number_4_param_0:bool = False
    number_24:int = 1
    number_8
    return number_24
  def func_number_5(func_number_5_param_0: int, func_number_5_param_1: int) -> int:
    func_number_5_param_0:int = 1
    func_number_5_param_1:int = 1
    number_26:int = 1
    False
    number_13 // number_26
    return 1
  def func_number_6(func_number_6_param_0: int) -> int:
    func_number_6_param_0:int = 1
    1
    return 1
  def func_number_7() -> int:
    bool_4:bool = False
    number_24:int = 1
    number_25:int = 1
    number_26:int = 1
    number_27:int = 1
    number_28:int = 1
    number_29:int = 1
    number_30:int = 1
    number_31:int = 1
    number_32:int = 1
    number_33:int = 1
    number_34:int = 1
    number_35:int = 1
    number_36:int = 1
    number_37:int = 1
    number_38:int = 1
    number_39:int = 1
    number_40:int = 1
    number_41:int = 1
    number_42:int = 1
    def func_number_8(func_number_8_param_0: int) -> int:
      func_number_8_param_0:int = 1
      number_44:int = 1
      number_45:int = 1
      number_46:int = 1
      def func_number_12() -> int:
        bool_5:bool = False
        number_47:int = 1
        number_48:int = 1
        def func_none_0():
          bool_6:bool = False
          number_49:int = 1
          bool_6 or func_bool_0(number_49)
          return func_none_0()
        1
        func_none_0() is func_none_0() is func_none_0() is func_none_0()
        if bool_5:
          if True:
            func_bool_0(number_32)
            func_number_3()
            number_47 = func_number_6(number_48)
        elif bool_1 :
          number_42 % (-func_number_8_param_0)
        else:
          1
        return func_number_12() * 1
      1 // number_44
      if func_bool_1((-1), (-number_45), (-1), func_number_6(func_number_12()), 1 + number_46):
        True
      return 1
    def func_number_9() -> int:
      number_43:int = 1
      number_41 - 1
      1
      1
      return 1 // number_43
    def func_number_10(func_number_10_param_0: int, func_number_10_param_1: int, func_number_10_param_2: int, func_number_10_param_3: int, func_number_10_param_4: int) -> int:
      bool_5:bool = False
      func_number_10_param_0:int = 1
      func_number_10_param_1:int = 1
      func_number_10_param_2:int = 1
      func_number_10_param_3:int = 1
      func_number_10_param_4:int = 1
      number_48:int = 1
      number_49:int = 1
      number_50:int = 1
      number_51:int = 1
      number_52:int = 1
      number_53:int = 1
      number_54:int = 1
      number_55:int = 1
      def func_number_12() -> int:
        def func_number_13() -> int:
          func_number_0()
          return func_number_3()
        1 % 1
        if True:
          (-func_number_8((-func_number_13())))
        else:
          number_5 = 1
        return 1 // func_number_3() + number_10
      if (not func_bool_0((-1))):
        1
        (-func_number_10(1, func_number_7() // number_48 + 1 * 1 + 1 + number_49, 1, (-func_number_4(func_bool_0((-func_number_5(func_number_2(func_number_2((-1 // number_50))), number_2))))), func_number_1(1 * 1, (-number_51))))
      else:
        number_52 - number_53
        number_3 = number_54
        if False:
          (-number_55)
        elif 1 > number_22 - 1 :
          if bool_5:
            (-func_number_3()) - 1 * 1
            func_bool_0(number_55) or number_36 % 1 <= 1
        else:
          func_number_12()
      return 1
    def func_number_11() -> int:
      number_43:int = 1
      1 % 1 - number_43
      if True:
        func_bool_0(1)
      return 1
    (-1) > 1 // number_24
    if False:
      if (not func_number_5(number_25 * (-func_number_3()), number_3) >= number_10):
        None
      else:
        func_number_3() * number_26 - func_number_2(func_number_5(func_number_3(), 1))
    else:
      if number_27 <= (-(-func_number_2(func_number_8(func_number_9())) * (-(-1)) - number_28 // number_29)):
        func_number_6(func_number_0() - func_number_5(func_number_7() * func_number_10(func_number_4(bool_2), 1 + 1, 1, func_bool_0_param_0, func_number_3() % number_30 % 1 * func_number_3() * func_number_0() * (-1 - 1) // (-func_number_6(number_31))), number_29))
        if False:
          number_18
          if bool_4:
            1
            func_number_10(1 // 1 - 1, func_number_5(number_17, 1), (-number_32 * number_21), func_number_5(func_number_9() % 1, 1), func_bool_0_param_0 // 1 // func_number_6(1) + 1)
            if True:
              func_number_10(func_number_1(func_number_4(func_bool_0(number_23)), number_26 - 1) + (-number_8), func_number_5(1, 1) // func_number_3() + (-func_number_0()) + number_33 * 1, func_number_10(number_34, func_number_9(), func_number_0(), func_number_11(), number_14), number_12 - number_28 % number_10 * func_number_10((-number_7 - 1), 1, number_35, 1, 1) % (-number_36) // func_number_4(True) - number_37 % 1, (-func_number_3()) // 1)
              number_38 = 1
              bool_1
            elif func_bool_1(1, number_39, 1, 1, func_number_2(number_35 % number_17)) :
              1
              func_number_1(1, 1) * 1 + number_37 * 1 - number_40
              if True:
                1
              number_41 = 1
              if True:
                False
              else:
                number_42
            else:
              number_38
          else:
            number_10
    return 1 // func_number_7()
  func_number_1(1, func_number_1(func_number_3(), func_number_4(True or func_bool_1(func_number_1(1, (-func_number_1(func_number_1(number_4, func_number_1(number_16, 1) % (-func_number_5(func_number_0(), 1)) % (-func_number_2((-func_number_5(1, (-func_number_2(number_17))) % func_number_3()) - func_number_4(bool_1) // number_18)) // number_4 * 1 * (-(-number_19)) + number_2 % number_12), func_number_6(number_4) + number_4))), number_20, number_21, func_number_4(bool_2) // (-1 // func_number_5(number_14, func_number_6(number_22))) % number_23, (-func_number_1(func_number_6(1) // func_number_4((-number_1 + number_14 - 1 % 1 * 1) > 1 % (-1)), func_number_7())))) // number_2))
  return (not True)
def func_bool_1(func_bool_1_param_0: int, func_bool_1_param_1: int, func_bool_1_param_2: int, func_bool_1_param_3: int, func_bool_1_param_4: int) -> bool:
  func_bool_1_param_0:int = 1
  func_bool_1_param_1:int = 1
  func_bool_1_param_2:int = 1
  func_bool_1_param_3:int = 1
  func_bool_1_param_4:int = 1
  number_20:int = 1
  number_21:int = 1
  number_22:int = 1
  number_23:int = 1
  def func_number_4(func_number_4_param_0: bool, func_number_4_param_1: int) -> int:
    func_number_4_param_0:bool = False
    bool_5:bool = False
    bool_6:bool = False
    func_number_4_param_1:int = 1
    number_25:int = 1
    number_26:int = 1
    1 - func_number_0()
    if True:
      number_25 = number_26
    else:
      if bool_5:
        False
    func_bool_0(func_number_4(bool_5, func_number_4(bool_6, 1) % 1) // func_number_2(func_number_2(func_number_4(False, 1)) + number_12 // 1) + 1 * func_bool_1_param_0)
    return number_4 % 1 // func_bool_1_param_2
  (-1)
  if func_bool_1(1, func_number_2(func_bool_1_param_1) + 1 % 1, number_10 * 1 - func_bool_1_param_4 - 1 - 1 + 1 % 1 - number_20 * number_21 + 1 % 1 + 1 * func_number_0() // 1, 1, (-1 % (-1 - (-func_number_3()))) * 1):
    1
  else:
    (not func_bool_1(func_number_4(func_bool_0(number_3 % 1), func_number_2(func_number_2(1))) % 1, func_number_3(), number_22, number_1, number_23 + (-1)))
  return bool_0
def func_number_0() -> int:
  bool_4:bool = False
  number_15:int = 1
  func_number_1((-1), number_15)
  number_14
  bool_4 = (not False)
  return 1
def func_number_1(func_number_1_param_0: int, func_number_1_param_1: int) -> int:
  func_number_1_param_0:int = 1
  func_number_1_param_1:int = 1
  number_17:int = 1
  number_18:int = 1
  func_number_1(1 * 1, 1 * 1)
  return (-number_17 + number_18)
def func_number_2(func_number_2_param_0: int) -> int:
  func_number_2_param_0:int = 1
  None
  return func_number_3() // 1 // number_6
def func_number_3() -> int:
  bool_4:bool = False
  bool_5:bool = False
  number_15:int = 1
  number_16:int = 1
  number_17:int = 1
  1
  if bool_4:
    1
    func_number_1(1, func_number_1(number_15 - number_16, number_17))
    bool_5
  number_14
  return func_number_0()
bool_0
func_bool_0(1) or bool_0
if func_bool_0(1):
  if func_bool_0(1):
    1 % number_0
  else:
    if (-number_0) <= number_1 or 1 <= (-number_1) // 1 + 1 - number_2 % 1 // number_3 % (-func_number_0() % func_number_0()) - (-1) * func_number_0() * 1 % 1 // func_number_0() or func_bool_0(func_number_0()):
      number_3
      1
      number_2 = (-(-1)) * 1 // func_number_0() * 1 * (-1) + 1
      1
      1
    number_4
    if True:
      bool_0
    else:
      number_3
    if func_bool_0((-func_number_0()) + 1):
      True
      1
    1
  bool_0 = bool_0
  if False:
    number_5
  elif False :
    number_0
  else:
    if bool_1:
      1 <= func_number_0()
      1
  number_2 < number_1
else:
  if bool_2 or func_number_1(number_6, 1) <= number_7 - 1:
    func_number_2(1)
    number_8
    number_9 - number_3 + (-1)
    bool_3
  elif False :
    (-func_number_1(number_10, number_11) * 1)
    None
    if func_bool_1(number_12, 1, func_number_0(), func_number_0(), number_13):
      True
      1
    else:
      func_number_1(1, 1 * number_14)
    1
  else:
    func_number_3()
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
number_5:int = 1
number_6:int = 1
def func_bool_0() -> bool:
  number_7:int = 1
  def func_number_0() -> int:
    number_7 = (-number_2)
    return 1 + func_number_0()
  number_5 = 1
  if func_bool_0() == (-1):
    number_7 = func_number_0()
  return True
if 1 > number_0:
  number_1 * 1
  number_2
else:
  number_2 - (-number_3) // number_3 // (-1) - 1 + (-1) > (-number_4)
  if func_bool_0():
    False
    number_5 >= number_3
    number_0 = number_6
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
1
if False:
  bool_0 = True
  False
1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
bool_0:bool = False
1
number_0
None == bool_0 or 1 % (-1) % number_1 - 1 >= 1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1 > 1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
1
1
number_0 = number_0
number_1 = (-1) * number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
if bool_0:
  bool_0 = False
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
number_0 - (-(-number_1)) - number_2 * 1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:def func_none_0():
  number_0:int = 1
  def func_number_0() -> int:
    number_1:int = 1
    number_2:int = 1
    number_3:int = 1
    number_4:int = 1
    number_5:int = 1
    number_6:int = 1
    number_7:int = 1
    number_8:int = 1
    number_9:int = 1
    number_10:int = 1
    number_11:int = 1
    number_12:int = 1
    number_13:int = 1
    number_14:int = 1
    bool_0:bool = False
    bool_1:bool = False
    bool_2:bool = False
    bool_3:bool = False
    def func_number_1(func_number_1_param_0: int, func_number_1_param_1: bool, func_number_1_param_2: bool, func_number_1_param_3: int) -> int:
      func_number_1_param_0:int = 1
      func_number_1_param_3:int = 1
      func_number_1_param_1:bool = False
      func_number_1_param_2:bool = False
      number_13 = 1
      return 1
    def func_number_2(func_number_2_param_0: int) -> int:
      func_number_2_param_0:int = 1
      func_number_0() * func_number_2(1 + number_8)
      number_13
      return 1
    def func_bool_0() -> bool:
      number_15:int = 1
      number_16:int = 1
      def func_number_3() -> int:
        number_17:int = 1
        (not True) or True
        (-1)
        1
        return number_17
      (-number_7)
      (-number_15)
      number_16 = (-func_number_2(number_4))
      return number_14 + func_number_0() - func_number_2(number_8) % 1 * 1 - 1 // number_12 * func_number_1(1, func_bool_0(), func_bool_0(), 1) % func_number_3() <= 1
    number_1 = number_2
    func_number_0()
    if (not False):
      if bool_0:
        if True:
          func_number_0()
          if 1 // number_3 > func_number_0():
            bool_0
            1
          elif bool_0 :
            bool_1
          else:
            func_number_0()
            number_4
        else:
          number_1
          1
          if number_3 > func_number_0() // number_5:
            number_6 = (-(-1))
          else:
            func_number_0()
          None
        number_4
        number_0
        1 <= 1 % 1
      else:
        (-1)
      (-1) * func_number_0()
      bool_1
      number_5
      False
    else:
      True
      if True:
        if (-number_4 % (-(-func_number_0() * 1 + (-(-1))) * 1) * 1 + func_number_0()) > 1:
          bool_2 = True
          bool_1
          func_number_0()
        else:
          1 + number_7
        if False:
          None
          func_number_0()
          if number_8 <= 1:
            1
          else:
            bool_1
        (-1 // 1)
        1
        True
        1
        (-(-func_number_0() % 1 % number_7))
        number_0 % func_number_0()
      1
      if True:
        number_4 - 1 % 1 % 1 + number_8 * func_number_1(1 % func_number_0() + func_number_1(1, number_1 >= number_2, func_bool_0() or func_number_0() <= 1 - 1 // 1 * func_number_1(1, False, True, number_9), 1), False == 1, False, func_number_1(func_number_1(func_number_0(), func_number_0() > number_4, (-1) > number_10, func_number_0()), func_bool_0(), False, number_11)) - number_0
        1
        func_number_0()
        1
        number_0
      func_number_1(number_4, func_bool_0(), func_number_0() <= number_12, number_13) + 1 // 1
      1 % func_number_0()
      func_number_1(func_number_1(func_number_1((-func_number_2(1)), False, func_bool_0(), 1) // func_number_1(func_number_0(), bool_0, func_bool_0(), 1), False, func_bool_0(), number_5) // number_3, func_bool_0(), bool_3, number_1) - func_number_2((-1))
    number_14
    return (-(-number_0))
  (-1)
  func_none_1()
  1
  1
  1
  number_0
  func_number_0()
  False
  return None is None
def func_none_1():
  number_0:int = 1
  number_0
  return None
func_none_0() is None is func_none_0() is None is func_none_1()
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_0 = number_1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:None is None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
1 - number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
bool_1:bool = False
bool_2:bool = False
number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
def func_number_0(func_number_0_param_0: int) -> int:
  func_number_0_param_0:int = 1
  1
  return 1
bool_0 = True
if False:
  (not (not bool_1))
  if bool_0:
    number_0 > 1
  elif number_1 > 1 or 1 // number_2 + (-number_0) == False :
    if True:
      if bool_2:
        None
      elif False :
        1 // (-1) * 1
        1 * 1 % number_2 // func_number_0(1)
        (not number_0 != 1)
        func_number_0(1)
      else:
        func_number_0(number_1)
      True
    else:
      if 1 > 1:
        func_number_0(1 + 1)
        1
        True
      else:
        None
      None
      1
      number_3 = 1
      1
  else:
    1
    number_4
1
1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
1 > number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
1
number_0 = number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:class class_0(object):
  pass
number_0:int = 1
class_0_0:class_0 = None
def func_number_0() -> int:
  bool_0:bool = False
  if False:
    number_0
  else:
    None
  bool_0
  (-1)
  return 1 - 1 * 1
1
class_0_0
func_number_0() % func_number_0() + number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
None is None
1
number_0 * number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
bool_0:bool = False
bool_1:bool = False
1
if True or number_0 == 1:
  1
  1
else:
  (-number_0)
if bool_0:
  number_1
  if True:
    (-number_1 + 1 // 1)
  1
if bool_1:
  if number_1 > number_0 + 1:
    (-number_2) + 1 // 1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
bool_0:bool = False
def func_number_0() -> int:
  number_2:int = 1
  number_3:int = 1
  number_4:int = 1
  number_5:int = 1
  number_6:int = 1
  number_7:int = 1
  number_8:int = 1
  number_9:int = 1
  number_10:int = 1
  number_11:int = 1
  number_12:int = 1
  number_13:int = 1
  number_14:int = 1
  number_15:int = 1
  number_16:int = 1
  bool_1:bool = False
  bool_2:bool = False
  bool_3:bool = False
  def func_number_1() -> int:
    bool_4:bool = False
    bool_5:bool = False
    if bool_4 or True:
      if bool_5:
        if True:
          bool_5 = func_bool_0()
          1
    else:
      None
    return func_number_1()
  def func_number_2() -> int:
    number_17:int = 1
    number_18:int = 1
    bool_4:bool = False
    if func_bool_0():
      number_17
      bool_4
      (-1 - 1 // func_number_1())
      (-func_number_2()) + number_18
    else:
      (-1) - 1
      (-1 % func_number_1())
      (-number_10) * 1
    None
    return number_15
  def func_none_0(func_none_0_param_0: bool):
    func_none_0_param_0:bool = False
    bool_5:bool = False
    bool_6:bool = False
    (-1 % func_number_2())
    number_12 % func_number_0()
    return None is func_none_0((not False)) is func_none_0(False) is func_none_0(bool_5) is None is func_none_0(bool_6) is func_none_0(func_bool_0())
  def func_bool_0() -> bool:
    number_17:int = 1
    number_0 = 1
    (-number_17) % 1 + func_number_1() * 1 * func_number_1()
    return (not True)
  number_2
  func_number_0()
  func_number_0()
  if True:
    number_0 = number_2 * func_number_0() * func_number_1()
    bool_0
  elif (not (not False)) :
    if 1 > number_3:
      number_4 = 1
    elif True or False :
      func_none_0(number_2 // 1 // 1 - 1 <= number_5)
      if func_bool_0():
        (-number_6)
        if func_bool_0():
          number_4
          number_0
          if False:
            (-1)
            (-1)
            (-1 % 1)
            (-1 - number_7)
            number_8 = func_number_1()
            (not False)
            number_7
            if bool_1:
              if False:
                (-1)
                1
              else:
                1
                bool_2
            elif number_0 == func_number_2() - number_9 + (-1 * 1) :
              False
              number_8
            else:
              if func_bool_0() or False:
                func_number_1()
              else:
                1
                1 - number_6
                if 1 - 1 < 1:
                  1
                  func_number_1()
                  if func_number_2() > func_number_1():
                    False
                  else:
                    number_10 = (-func_number_2())
                    1
                  func_bool_0()
                  if bool_0:
                    1
                  number_3 = 1
                  number_9
                elif True :
                  number_10 - number_3
                  func_number_2()
                number_7 = 1 // number_8 - (-1) + 1
      1
    else:
      if bool_3:
        func_number_0()
        1
        True
      else:
        func_number_2()
        (-1 - number_8)
    func_number_2()
  else:
    1 > 1
    number_11
    if bool_2:
      number_12 = number_13
    elif True :
      func_number_0()
      func_number_1() - 1
      1 >= 1 - func_number_1()
    1 * 1 * (-func_number_0() * 1) // number_8 % func_number_2()
    True
    number_14 = 1
    (-1)
    number_15
  func_number_1()
  bool_0
  number_16 // 1 - func_number_2()
  return number_0
if True:
  None
  number_0 + 1 - 1 - number_1
None
(-number_0)
bool_0
func_number_0()
1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0 = 1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
1
True
if True:
  None
1 % 1
(-number_0 + 1 - number_0)
if False:
  True
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0 // number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
bool_0:bool = False
bool_1:bool = False
bool_2:bool = False
def func_bool_0() -> bool:
  number_3:int = 1
  number_4:int = 1
  number_5:int = 1
  bool_3:bool = False
  bool_4:bool = False
  def func_number_1(func_number_1_param_0: int, func_number_1_param_1: bool, func_number_1_param_2: int, func_number_1_param_3: int) -> int:
    func_number_1_param_0:int = 1
    func_number_1_param_2:int = 1
    func_number_1_param_3:int = 1
    func_number_1_param_1:bool = False
    number_4
    return 1
  def func_number_2() -> int:
    number_6:int = 1
    number_7:int = 1
    number_8:int = 1
    number_9:int = 1
    bool_5:bool = False
    def func_number_4() -> int:
      None
      return func_number_2()
    def func_number_5(func_number_5_param_0: int, func_number_5_param_1: int, func_number_5_param_2: int) -> int:
      func_number_5_param_0:int = 1
      func_number_5_param_1:int = 1
      func_number_5_param_2:int = 1
      number_13:int = 1
      number_14:int = 1
      number_15:int = 1
      number_16:int = 1
      number_17:int = 1
      number_18:int = 1
      number_19:int = 1
      number_20:int = 1
      bool_6:bool = False
      def func_bool_1(func_bool_1_param_0: int, func_bool_1_param_1: int) -> bool:
        func_bool_1_param_0:int = 1
        func_bool_1_param_1:int = 1
        number_23:int = 1
        number_23 = 1
        return bool_2
      def func_none_0(func_none_0_param_0: bool):
        number_21:int = 1
        func_none_0_param_0:bool = False
        def func_none_1():
          func_number_0(func_bool_0()) + 1
          return func_none_1()
        number_21 = number_8
        1
        return None is func_none_1()
      (-1)
      if bool_1:
        if 1 <= func_number_5(1, number_5, 1):
          if func_bool_0():
            number_5 = (-func_number_5((-1), number_13, 1))
            if (not (-number_14) > number_15):
              if func_bool_0():
                1
              else:
                (-1 - 1 + func_number_0(False))
            if bool_0:
              number_7 // number_16 // 1
            elif func_bool_0() :
              if (not (not True)):
                True
                (-1 + 1) + number_17
                number_18
          elif func_bool_0() :
            number_14 + func_number_2() - 1 - 1
          else:
            func_number_0((not False))
            1 * number_19 - number_20 + 1
            func_bool_1(1, (-1 * 1))
            bool_6
          func_bool_0()
        else:
          (-func_number_4())
          1
        None is None is func_none_0((not func_bool_0()))
      else:
        1
      return 1
    1
    func_number_1(1, (-number_6 * func_number_0(number_1 > number_3 // 1 * number_2)) > number_0 or False == func_bool_0(), func_number_1(func_number_3(bool_5, (-1)), func_bool_0(), func_number_1(number_4 // (-(-1 * number_6)), False, func_number_4() * 1 + func_number_1(1, func_bool_0(), func_number_5(1, number_7, number_0), 1), (-number_8)) - func_number_3(False or bool_3, func_number_2() - number_9), func_number_4()) + 1, number_4) == number_1
    return 1
  def func_number_3(func_number_3_param_0: bool, func_number_3_param_1: int) -> int:
    func_number_3_param_1:int = 1
    number_7:int = 1
    number_8:int = 1
    number_9:int = 1
    number_10:int = 1
    number_11:int = 1
    number_12:int = 1
    number_13:int = 1
    number_14:int = 1
    number_15:int = 1
    number_16:int = 1
    number_17:int = 1
    number_18:int = 1
    number_19:int = 1
    number_20:int = 1
    number_21:int = 1
    number_22:int = 1
    number_23:int = 1
    number_24:int = 1
    func_number_3_param_0:bool = False
    bool_6:bool = False
    bool_7:bool = False
    bool_8:bool = False
    bool_9:bool = False
    bool_10:bool = False
    bool_11:bool = False
    bool_12:bool = False
    bool_13:bool = False
    bool_14:bool = False
    bool_15:bool = False
    def func_bool_1() -> bool:
      number_25:int = 1
      number_26:int = 1
      def func_number_7(func_number_7_param_0: int, func_number_7_param_1: int) -> int:
        func_number_7_param_0:int = 1
        func_number_7_param_1:int = 1
        number_29:int = 1
        func_number_7_param_0 = 1
        (-number_21) - number_29
        return 1
      number_25 = 1
      if True:
        if func_number_6((-1) <= 1 + number_7 + 1, 1 < 1, func_number_1(1, func_bool_1(), 1, 1), 1, 1) > func_number_2():
          func_number_2()
        else:
          func_number_3_param_0
          False
      else:
        1 // (-number_25) % (-number_26) // (-func_number_0(func_bool_0()))
        None
        True
      number_0 - number_22
      return func_bool_1() or func_number_7(1, 1) >= 1
    def func_number_4(func_number_4_param_0: int) -> int:
      func_number_4_param_0:int = 1
      func_number_5((-number_3) * 1) % (-1 // 1 + (-1 - number_12 - 1) + 1)
      return (-(-number_9))
    def func_number_5(func_number_5_param_0: int) -> int:
      func_number_5_param_0:int = 1
      False
      return (-number_14) - (-1)
    def func_number_6(func_number_6_param_0: bool, func_number_6_param_1: bool, func_number_6_param_2: int, func_number_6_param_3: int, func_number_6_param_4: int) -> int:
      func_number_6_param_2:int = 1
      func_number_6_param_3:int = 1
      func_number_6_param_4:int = 1
      number_28:int = 1
      func_number_6_param_0:bool = False
      func_number_6_param_1:bool = False
      (-1 * number_18 - 1 - number_3)
      return number_28
    if number_7 > (-(-number_8)):
      func_number_1(func_number_0(False), 1 == (-1) % 1, 1, number_9 + 1)
    else:
      if bool_2:
        func_number_0(bool_6)
        (-1 * 1)
        False
        number_4 = (-1)
        None is None is None
      else:
        number_10 = number_11 - number_12 - number_9 - func_number_3(func_bool_0(), 1)
        1
        None is None
        if True:
          None
          1
        elif True :
          func_number_4(func_number_2())
          if 1 != number_7 <= number_13:
            1
            func_number_1(number_14, False, number_2 * 1 + number_15 + (-func_number_1(func_number_5(number_16 + 1 // 1), bool_7 or func_bool_0(), func_number_5(1), 1 - 1)) - func_number_0(True) // (-1) + 1 - func_number_3(bool_8, (-(-1))) + func_number_0(True) % func_number_0(False or number_14 > 1) + number_16 + 1, func_number_6(bool_9, True, func_number_2(), (-1) - number_10 * (-func_number_6((not False), True or number_8 == number_15, (-func_number_5(func_number_4(1))), 1, number_17)) // 1 * number_17, 1 - number_18))
          if True:
            1
            func_number_0(number_19 < number_18) + func_number_3(bool_10, number_20)
            1
          elif func_bool_0() :
            if bool_11:
              if bool_12:
                number_21 = 1
          if bool_13:
            func_number_4((-func_number_5(func_number_6(func_bool_1(), 1 > func_number_2(), func_number_5((-func_number_6(bool_0, (not (not 1 != 1)), 1, (-1), (-func_number_0(bool_14))))), number_22, 1))))
          else:
            number_16
        1
        number_23 = 1
        (-1)
        1
        number_19
      func_number_0(bool_15) > (-1)
    bool_15
    return number_24
  1
  if bool_2:
    number_1 = func_number_0(False)
  else:
    number_2
    1
  func_bool_0()
  return number_2 >= func_number_0(func_number_0(func_bool_0()) > 1) or func_number_1(1, func_bool_0(), number_0, func_number_1(1 * (-1), bool_3, 1, func_number_1(number_3, bool_1, 1 + 1 // 1, func_number_2()))) >= func_number_1((-func_number_3(False, (-number_2) + func_number_1(1, False, number_4, 1 % 1))), bool_4, 1, number_5) or (not bool_3)
def func_number_0(func_number_0_param_0: bool) -> int:
  number_3:int = 1
  func_number_0_param_0:bool = False
  (-(-1) - (-1) % number_2)
  return 1 % number_3
1
if (not 1 > 1):
  if False:
    1
    number_0 - 1
    1 > (-number_0)
    (not func_bool_0()) or True
  else:
    1
    number_1 = 1
    number_0
    1
    func_bool_0()
    None == 1 % 1 // number_2 * (-number_1)
    func_number_0(True) % func_number_0(func_number_0(bool_0) < 1) > 1
    False
else:
  number_2 = number_2
  if bool_1:
    func_number_0(True)
  func_number_0(False) - func_number_0(bool_2)
  1
  False
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
True
1 != number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
def func_number_0(func_number_0_param_0: int, func_number_0_param_1: bool) -> int:
  func_number_0_param_0:int = 1
  number_2:int = 1
  number_3:int = 1
  number_4:int = 1
  number_5:int = 1
  number_6:int = 1
  number_7:int = 1
  func_number_0_param_1:bool = False
  bool_1:bool = False
  bool_2:bool = False
  bool_3:bool = False
  bool_4:bool = False
  def func_number_2() -> int:
    number_8:int = 1
    (-number_8 // 1)
    return number_7
  def func_none_0():
    number_8:int = 1
    number_9:int = 1
    number_10:int = 1
    number_11:int = 1
    bool_5:bool = False
    bool_6:bool = False
    def func_number_3() -> int:
      number_12:int = 1
      def func_none_1():
        func_number_0((-1 % (-number_10) * 1) % 1, (not func_number_3() > 1))
        return func_none_1() is None is None
      if func_bool_1():
        func_none_1()
      else:
        number_12
      return func_number_1(False, 1)
    if (not func_number_1(func_bool_1(), number_8 // number_9) != (not True) or False):
      bool_4
      number_10
      func_number_3()
      func_number_1(func_bool_0(), 1) != func_number_0(func_number_3(), bool_5)
    else:
      1
    if 1 - 1 % 1 + number_11 + 1 // 1 <= (-(-1)) == number_11:
      func_number_3()
      1
    else:
      1
      func_number_0(1, bool_5) - (-number_7) % 1
    1
    number_5
    False
    bool_6 = func_bool_1()
    return func_none_0()
  def func_bool_0() -> bool:
    number_8:int = 1
    number_9:int = 1
    number_10:int = 1
    number_11:int = 1
    number_12:int = 1
    number_13:int = 1
    number_14:int = 1
    number_15:int = 1
    bool_5:bool = False
    bool_6:bool = False
    def func_number_3() -> int:
      number_16:int = 1
      number_17:int = 1
      number_18:int = 1
      number_19:int = 1
      number_20:int = 1
      number_21:int = 1
      number_22:int = 1
      number_23:int = 1
      number_24:int = 1
      number_25:int = 1
      bool_7:bool = False
      bool_8:bool = False
      def func_number_4() -> int:
        number_26:int = 1
        number_26 = func_number_7()
        return func_number_4()
      def func_number_5(func_number_5_param_0: int, func_number_5_param_1: int) -> int:
        func_number_5_param_0:int = 1
        func_number_5_param_1:int = 1
        True
        True or func_bool_1()
        return (-func_number_3())
      def func_number_6() -> int:
        number_26:int = 1
        number_27:int = 1
        number_28:int = 1
        number_29:int = 1
        bool_9:bool = False
        bool_10:bool = False
        bool_11:bool = False
        if bool_8:
          if (not bool_9):
            func_none_0()
            if bool_4:
              bool_10 = func_bool_1()
            else:
              number_26
              if False:
                1
            number_27
            1
          elif func_bool_0() :
            bool_3
            number_28 = number_25
          1
          func_bool_1()
          1
          if False:
            if (-1 // 1) > number_13:
              if func_bool_2():
                1 == bool_9
                func_bool_2()
              elif bool_11 :
                (-number_12)
              elif True :
                bool_4 = number_5 > number_13
              1
            None
            number_2
        else:
          func_bool_0()
          1
        return number_29
      def func_number_7() -> int:
        func_number_2()
        return (-func_number_4())
      def func_number_8(func_number_8_param_0: bool) -> int:
        func_number_8_param_0:bool = False
        1
        return 1
      def func_number_9(func_number_9_param_0: bool) -> int:
        number_26:int = 1
        number_27:int = 1
        number_28:int = 1
        func_number_9_param_0:bool = False
        bool_10:bool = False
        if False:
          if func_bool_1():
            number_11
            if number_26 >= number_14:
              1
              1
              if False:
                if number_16 < 1:
                  1
          elif True :
            number_27 // 1
          bool_10
          func_bool_2()
          1
          1
          True
        else:
          func_number_1(func_number_9_param_0, 1)
        number_28 - func_number_0((-1), bool_5)
        return 1
      if True:
        number_14 = number_5
        func_number_0(1, True)
        func_number_4()
      elif False :
        None is None
        func_bool_1()
        func_number_0(number_16, False)
        bool_7 = True
      else:
        if func_number_5((-number_17), 1) > (-func_number_3()) or func_number_3() % 1 + number_8 < (-1):
          None
          if func_bool_2() or True:
            number_2 = func_number_6() + number_18
            if False:
              1 + 1 + 1 + 1
              func_number_7()
            else:
              1
              True
            if func_bool_0():
              func_number_6()
            1
            func_number_5(1 - number_19 * 1 * 1, func_number_4()) // func_number_0(number_20, (-number_4 - func_number_0(func_number_2() - func_number_2(), func_number_8(bool_5) - func_number_3() * 1 > func_number_0(number_16, False))) > 1) - 1 * func_number_8(number_17 != 1)
            1
            number_21
        else:
          number_22 = number_23 - 1 % 1 - 1 - 1
          bool_8
        number_22
      (-func_number_3()) + number_24 // func_number_9(func_bool_1()) // (-1)
      return 1 % number_25 // 1
    def func_bool_2() -> bool:
      number_16:int = 1
      number_17:int = 1
      number_18:int = 1
      number_19:int = 1
      number_20:int = 1
      number_21:int = 1
      bool_7:bool = False
      1 * func_number_0(func_number_3(), False)
      number_16
      True
      if (not func_bool_0()):
        if 1 > func_number_3():
          if bool_7:
            number_17
          else:
            if bool_5:
              number_18
              func_bool_2()
            else:
              (-func_number_3() + 1 - func_number_2())
              number_11
            number_19 = number_7
            (-func_number_2())
            func_number_1(False, number_19)
            number_0 = (-func_number_2())
            (-1)
            func_number_2()
          number_20
        else:
          func_number_1(False, number_21)
        func_bool_0()
      return True
    1 >= func_number_0(1, False)
    if False:
      if func_bool_2() or False:
        func_bool_2()
        if func_number_0_param_1:
          if True:
            if 1 == func_number_1(bool_5, (-1)):
              func_number_3()
              number_8 = func_number_3()
          elif True :
            None
          elif False :
            True
          else:
            number_9 = func_number_2() + func_number_2()
        else:
          1
          1
          func_number_0(func_number_2(), False) // (-1)
          if number_7 > 1 // 1 + 1 * 1:
            if func_bool_0():
              if (not func_bool_1()):
                number_10
                if func_bool_0() or func_number_2() + 1 != func_number_1(func_number_0_param_1, (-number_11)) // number_4:
                  func_bool_2()
                else:
                  func_bool_0()
              elif (not func_bool_1()) :
                func_number_0(number_12, 1 >= number_13)
                func_number_3()
          else:
            1
          (-1)
          func_number_1(func_bool_0(), number_14)
      else:
        (not False)
        if bool_2:
          (-func_number_3())
          func_number_0((-1 * 1), (not (not True))) + func_number_2() + func_number_0(1, 1 > 1)
        1 // 1 * 1 - 1
        1 // 1 > number_14 % 1 + 1 * 1 * number_9
      number_15 = (-1) % 1
      1
      True
    else:
      bool_2
    1
    return bool_6
  def func_bool_1() -> bool:
    number_8:int = 1
    number_9:int = 1
    1
    func_number_0(func_number_0(1, bool_3), func_bool_1()) + 1 - 1
    if func_number_2() == 1 > 1 or True:
      number_2
      if func_bool_1() or (not func_bool_1()) or False:
        bool_2
      else:
        if (not bool_3):
          (not 1 > (-(-1 * 1 - 1) // 1 - 1))
        1 // 1
        number_8 % number_0
        number_9
    return func_bool_0()
  number_2 = (-number_3)
  if 1 > 1 // (-number_3):
    None is func_none_0()
    1
  elif False :
    1
  if bool_1:
    func_number_0(func_number_0(func_number_1(True, func_number_1(func_bool_0(), 1)), bool_2), number_3 >= func_number_1(bool_3, number_4) - 1 + (-(-func_number_1(1 // (-number_2) < 1, 1))))
  else:
    if func_bool_1():
      (not bool_4)
      number_5 = 1 % 1 - 1 // 1 % number_6 + 1
      func_number_2() - 1
      func_number_2()
    elif bool_1 :
      func_number_2() + number_7 + (-1)
    else:
      (-1)
  return 1
def func_number_1(func_number_1_param_0: bool, func_number_1_param_1: int) -> int:
  func_number_1_param_1:int = 1
  number_2:int = 1
  number_3:int = 1
  number_4:int = 1
  number_5:int = 1
  number_6:int = 1
  number_7:int = 1
  number_8:int = 1
  number_9:int = 1
  number_10:int = 1
  number_11:int = 1
  number_12:int = 1
  number_13:int = 1
  number_14:int = 1
  number_15:int = 1
  number_16:int = 1
  func_number_1_param_0:bool = False
  bool_1:bool = False
  bool_2:bool = False
  def func_number_2() -> int:
    func_none_0(1)
    return 1
  def func_bool_0(func_bool_0_param_0: int) -> bool:
    func_bool_0_param_0:int = 1
    True
    return func_bool_0(1)
  def func_none_0(func_none_0_param_0: int):
    func_none_0_param_0:int = 1
    func_number_0(func_number_2(), func_number_1(False, 1) <= 1 * func_number_2())
    return None
  if True:
    if True:
      1
      1
    if True:
      number_2
      1
      func_number_1_param_1 = func_number_1((not False), (-number_3))
      if 1 + 1 > func_number_0(1, bool_1):
        bool_1 = number_4 > number_0
      if False:
        number_2 // number_5 // func_number_0(func_number_2(), True)
      elif number_2 > number_6 or 1 - 1 % 1 % 1 // func_number_0((-(-number_7)), False) + number_0 + 1 * number_8 * number_9 * number_10 + func_number_0(func_number_0(func_number_0(1 * 1 - 1 // number_7, func_bool_0((-func_number_0(1, False)))), bool_1), func_bool_0(number_11)) * (-func_number_2()) % func_number_2() - 1 // number_12 < number_13 :
        None
      else:
        None is None is None is None is None is None is None is None is None is None is None is None is func_none_0(func_number_0(number_5, (not func_number_1_param_0))) is None is None is None is None is func_none_0(func_number_2())
        func_number_1_param_0 = func_bool_0(1)
        if False:
          if (not (not func_bool_0((-func_number_0(func_number_0(number_0, (-(-1)) - func_number_0(func_number_2(), False) % 1 > (-func_number_0(1, func_bool_0(1)))), bool_2))))):
            func_number_1((not False), func_number_0(1, bool_1) - 1)
            if False:
              (-1)
              number_14 = number_14
            1
      if True:
        number_15 = 1
        1
  else:
    func_number_1(func_bool_0(number_14) or func_number_2() == (-number_15 - 1), 1) * number_16
  1
  return 1
if None is None is None == 1 % (-func_number_0(func_number_1((not True), number_0) % 1, 1 >= 1)):
  (-func_number_1(False, number_0))
else:
  1
  1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0 = 1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
1 > number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
1 - 1
None is None is None is None
(-number_0)
1 // number_1 + number_1
None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:class class_0(object):
  pass
class_0_0:class_0 = None
class_0_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:False
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
if True:
  1
elif False :
  (-(-1)) // number_0 % number_1 < number_2
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
bool_0:bool = False
1
if True:
  1
  number_0 // (-1)
bool_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
bool_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:None
1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:class class_0(object):
  pass
number_0:int = 1
class_0_0:class_0 = None
1 - (-number_0) - 1
class_0_0 = None
None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:class class_0(object):
  pass
class_0_0:class_0 = None
class_0_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
1 + 1 + 1
1 // (-(-1)) * number_0 % (-1 // (-1 * number_0 // 1)) + number_0 + number_1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
None
number_0
number_1 > 1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:(not 1 * (-1) > 1)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
bool_1:bool = False
number_0:int = 1
if True or bool_0:
  None is None
  bool_1
  if False:
    number_0
    (-1) >= 1
  else:
    True
number_0 = 1 % 1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
False
1
(not 1 % number_0 < 1)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
number_5:int = 1
number_6:int = 1
number_7:int = 1
number_8:int = 1
number_9:int = 1
number_10:int = 1
number_11:int = 1
number_12:int = 1
bool_0:bool = False
bool_1:bool = False
bool_2:bool = False
bool_3:bool = False
bool_4:bool = False
def func_number_0(func_number_0_param_0: int, func_number_0_param_1: int) -> int:
  func_number_0_param_0:int = 1
  func_number_0_param_1:int = 1
  (-1)
  return 1
def func_number_1() -> int:
  number_13:int = 1
  number_14:int = 1
  number_13 = 1 * (-func_number_2())
  return number_14
def func_number_2() -> int:
  def func_bool_0() -> bool:
    number_13:int = 1
    number_14:int = 1
    number_15:int = 1
    def func_number_4() -> int:
      number_16:int = 1
      number_17:int = 1
      number_18:int = 1
      number_19:int = 1
      number_20:int = 1
      number_21:int = 1
      number_22:int = 1
      number_23:int = 1
      number_24:int = 1
      number_25:int = 1
      number_26:int = 1
      number_27:int = 1
      number_28:int = 1
      number_29:int = 1
      number_30:int = 1
      number_31:int = 1
      number_32:int = 1
      number_33:int = 1
      number_34:int = 1
      number_35:int = 1
      number_36:int = 1
      number_37:int = 1
      bool_5:bool = False
      bool_6:bool = False
      bool_7:bool = False
      bool_8:bool = False
      bool_9:bool = False
      bool_10:bool = False
      def func_number_6(func_number_6_param_0: bool) -> int:
        func_number_6_param_0:bool = False
        func_number_8()
        return 1
      def func_number_7() -> int:
        bool_11:bool = False
        1
        bool_11
        False
        return (-1)
      def func_number_8() -> int:
        1
        return 1
      def func_bool_1() -> bool:
        number_38:int = 1
        number_39:int = 1
        number_40:int = 1
        bool_11:bool = False
        bool_12:bool = False
        number_38 = func_number_7()
        if bool_11:
          if 1 * 1 < (-number_39):
            number_40
          None
        1
        if True:
          False == 1
          bool_6
        (-1)
        return func_bool_0() or bool_12
      def func_none_0(func_none_0_param_0: int):
        func_none_0_param_0:int = 1
        number_39:int = 1
        number_40:int = 1
        number_41:int = 1
        number_42:int = 1
        number_43:int = 1
        number_44:int = 1
        bool_11:bool = False
        def func_number_9(func_number_9_param_0: int) -> int:
          func_number_9_param_0:int = 1
          number_46:int = 1
          def func_number_10(func_number_10_param_0: bool) -> int:
            func_number_10_param_0:bool = False
            (-1)
            return func_number_1()
          def func_number_11() -> int:
            number_47:int = 1
            number_48:int = 1
            number_49:int = 1
            number_50:int = 1
            number_51:int = 1
            number_52:int = 1
            number_53:int = 1
            number_54:int = 1
            number_55:int = 1
            number_56:int = 1
            number_57:int = 1
            number_58:int = 1
            number_59:int = 1
            number_60:int = 1
            number_61:int = 1
            number_62:int = 1
            number_63:int = 1
            number_64:int = 1
            number_65:int = 1
            number_66:int = 1
            number_67:int = 1
            number_68:int = 1
            number_69:int = 1
            number_70:int = 1
            number_71:int = 1
            number_72:int = 1
            number_73:int = 1
            number_74:int = 1
            number_75:int = 1
            number_76:int = 1
            number_77:int = 1
            number_78:int = 1
            number_79:int = 1
            number_80:int = 1
            number_81:int = 1
            number_82:int = 1
            number_83:int = 1
            number_84:int = 1
            number_85:int = 1
            number_86:int = 1
            number_87:int = 1
            number_88:int = 1
            number_89:int = 1
            number_90:int = 1
            number_91:int = 1
            number_92:int = 1
            number_93:int = 1
            number_94:int = 1
            number_95:int = 1
            number_96:int = 1
            number_97:int = 1
            number_98:int = 1
            number_99:int = 1
            number_100:int = 1
            number_101:int = 1
            bool_12:bool = False
            bool_13:bool = False
            bool_14:bool = False
            bool_15:bool = False
            bool_16:bool = False
            bool_17:bool = False
            bool_18:bool = False
            bool_19:bool = False
            bool_20:bool = False
            bool_21:bool = False
            bool_22:bool = False
            bool_23:bool = False
            bool_24:bool = False
            bool_25:bool = False
            bool_26:bool = False
            bool_27:bool = False
            bool_28:bool = False
            def func_number_12(func_number_12_param_0: int) -> int:
              func_number_12_param_0:int = 1
              number_103:int = 1
              1 // number_103 * func_number_4()
              1
              return 1
            def func_number_13(func_number_13_param_0: bool, func_number_13_param_1: int) -> int:
              func_number_13_param_1:int = 1
              number_103:int = 1
              number_104:int = 1
              number_105:int = 1
              func_number_13_param_0:bool = False
              bool_30:bool = False
              bool_31:bool = False
              if (-1 - 1) >= (-1) % (-number_103) - func_number_3():
                func_bool_2(1)
                bool_8 = bool_30
                if bool_31:
                  (-1)
                func_number_5(False, number_104) // func_number_15()
                bool_24
              else:
                1
                if True:
                  1 % 1
              1
              return number_105
            def func_number_14() -> int:
              number_102:int = 1
              def func_number_20() -> int:
                number_103:int = 1
                number_104:int = 1
                number_105:int = 1
                number_106:int = 1
                number_107:int = 1
                number_108:int = 1
                number_109:int = 1
                bool_29:bool = False
                bool_30:bool = False
                def func_number_21() -> int:
                  False
                  return func_number_2() % 1
                if bool_12:
                  bool_10
                  if func_bool_2((-number_32)):
                    if number_101 <= 1:
                      number_77 = func_number_15()
                    else:
                      number_77
                      False
                    func_number_5(False, number_103) % number_76
                  else:
                    number_104 + number_105
                    if bool_29:
                      bool_30
                    else:
                      number_80
                  if func_bool_0():
                    1 + number_106
                    number_107 = 1
                    number_108 = number_58
                  else:
                    number_109
                return func_number_21()
              def func_bool_6(func_bool_6_param_0: bool) -> bool:
                number_103:int = 1
                func_bool_6_param_0:bool = False
                number_103 = 1
                (-1)
                True
                return bool_8
              number_29 = func_number_6(func_bool_5(1 // func_number_20() - func_number_11()) or func_bool_6(True))
              1
              return number_102
            def func_number_15() -> int:
              number_102:int = 1
              def func_bool_6() -> bool:
                number_103:int = 1
                number_104:int = 1
                number_103 = number_77
                return number_104 != (-1)
              if False:
                number_55
              elif False :
                if func_bool_5(number_14):
                  number_57 = number_3
                  1
                elif True :
                  if func_bool_6():
                    (-number_102)
                  elif bool_2 :
                    if True:
                      number_77
                      1
                      func_number_3()
                    else:
                      1
                    if func_bool_2(func_number_1()):
                      1
                      1
                    else:
                      1
                    1 * 1 + 1 + 1
                  number_27
              elif True :
                1
              elif True :
                func_bool_6()
              else:
                number_44 % 1
              False
              (not False)
              return 1
            def func_number_16(func_number_16_param_0: int, func_number_16_param_1: bool, func_number_16_param_2: int, func_number_16_param_3: int, func_number_16_param_4: int) -> int:
              func_number_16_param_0:int = 1
              func_number_16_param_2:int = 1
              func_number_16_param_3:int = 1
              func_number_16_param_4:int = 1
              number_106:int = 1
              func_number_16_param_1:bool = False
              func_number_4()
              return func_number_12(number_106)
            def func_number_17(func_number_17_param_0: int) -> int:
              func_number_17_param_0:int = 1
              number_87 = 1
              return number_29
            def func_number_18() -> int:
              number_102:int = 1
              number_103:int = 1
              number_104:int = 1
              number_105:int = 1
              bool_29:bool = False
              def func_number_20() -> int:
                1
                (not func_number_6((not False)) <= 1 % 1 * func_number_10(True))
                (-(-1))
                return func_number_14()
              def func_number_21() -> int:
                func_number_21()
                return 1
              1
              number_50
              func_bool_3()
              False
              True
              if (-1 * 1 * func_number_18() * func_number_5(func_bool_2((-1) % 1), func_number_10(1 <= func_number_5(bool_3, func_number_16(number_35, 1 >= number_102 + (-number_103 + func_number_14() * number_104), 1 % func_number_20(), 1, number_78))))) > (-number_103):
                func_number_6(bool_29 or False)
              else:
                if bool_16:
                  1
                func_none_0(1)
              if True:
                if True:
                  func_number_21()
              number_77
              number_105
              return 1
            def func_number_19() -> int:
              number_102:int = 1
              number_4
              return number_102
            def func_bool_3() -> bool:
              True
              return False
            def func_bool_4(func_bool_4_param_0: int) -> bool:
              func_bool_4_param_0:int = 1
              number_103:int = 1
              def func_number_20(func_number_20_param_0: int) -> int:
                func_number_20_param_0:int = 1
                func_bool_0()
                return func_number_18()
              def func_none_3():
                func_number_19() - (-1)
                return None is None
              bool_1
              None is func_none_0(1) is None is None is None is func_none_0(1) is None is None is func_none_1(number_20, (-1), func_number_20(1), func_number_4() % 1 + number_103) is None is None is func_none_3()
              return False
            def func_bool_5(func_bool_5_param_0: int) -> bool:
              func_bool_5_param_0:int = 1
              func_bool_1()
              1
              return False
            def func_none_2(func_none_2_param_0: int, func_none_2_param_1: int):
              func_none_2_param_0:int = 1
              func_none_2_param_1:int = 1
              number_104:int = 1
              number_105:int = 1
              number_106:int = 1
              number_107:int = 1
              number_108:int = 1
              number_109:int = 1
              number_110:int = 1
              number_111:int = 1
              number_112:int = 1
              number_113:int = 1
              number_114:int = 1
              number_115:int = 1
              number_116:int = 1
              bool_29:bool = False
              bool_30:bool = False
              bool_31:bool = False
              bool_32:bool = False
              bool_33:bool = False
              bool_34:bool = False
              def func_number_20() -> int:
                number_117:int = 1
                number_118:int = 1
                number_119:int = 1
                number_117 = func_number_9(func_number_15() * number_115)
                1
                number_81 = number_118
                return number_119
              def func_number_21(func_number_21_param_0: int, func_number_21_param_1: int, func_number_21_param_2: int) -> int:
                func_number_21_param_0:int = 1
                func_number_21_param_1:int = 1
                func_number_21_param_2:int = 1
                number_120:int = 1
                bool_35:bool = False
                func_number_10(True)
                bool_35
                True
                return func_number_0(func_number_3(), number_120) // 1
              def func_number_22(func_number_22_param_0: int) -> int:
                func_number_22_param_0:int = 1
                number_118:int = 1
                number_119:int = 1
                bool_35:bool = False
                if True:
                  bool_35 = bool_11
                  1
                  number_18
                  number_79
                elif False :
                  if True:
                    func_bool_1()
                  elif (-number_54) != True :
                    number_118 * number_8 - number_119
                return number_68
              def func_bool_6(func_bool_6_param_0: bool, func_bool_6_param_1: int, func_bool_6_param_2: bool, func_bool_6_param_3: int) -> bool:
                func_bool_6_param_1:int = 1
                func_bool_6_param_3:int = 1
                func_bool_6_param_0:bool = False
                func_bool_6_param_2:bool = False
                def func_bool_7(func_bool_7_param_0: int, func_bool_7_param_1: int) -> bool:
                  func_bool_7_param_0:int = 1
                  func_bool_7_param_1:int = 1
                  number_121:int = 1
                  number_122:int = 1
                  number_123:int = 1
                  number_124:int = 1
                  number_125:int = 1
                  number_126:int = 1
                  number_127:int = 1
                  number_128:int = 1
                  number_129:int = 1
                  number_130:int = 1
                  bool_37:bool = False
                  bool_38:bool = False
                  def func_number_23() -> int:
                    number_131:int = 1
                    number_132:int = 1
                    1
                    return number_131 % number_132
                  func_number_18() < 1
                  if 1 > 1:
                    number_121 = number_122
                    if False:
                      1
                      (-1) // 1
                      if func_bool_5(func_number_16(number_34 - number_123, (not True), (-func_number_8() // number_124 - (-number_125)), (-func_number_8()), 1) + func_number_14()):
                        1
                        1
                      else:
                        number_126 > 1
                        1 % 1 * 1 * func_number_15()
                    else:
                      if bool_37:
                        1 == func_number_11()
                        number_127 = func_number_21(1, func_number_7(), (-func_number_1()) - func_number_19()) * number_128 + func_number_13(True, func_number_7())
                      else:
                        False
                        True
                        func_number_23() + (-(-1))
                        number_129
                        bool_27
                      (-number_128)
                    number_130
                  return func_bool_1() or bool_38
                func_number_9(1)
                return 1 > func_number_5(func_bool_7((-1), 1 % 1), 1)
              if (not bool_19):
                (not number_4 - 1 < number_104)
                number_105
              else:
                if bool_29:
                  number_106
                elif bool_2 :
                  if True:
                    if (not 1 > number_107):
                      number_101 > (-(-1 - 1 // number_108) * number_109)
                      func_bool_6((not True), 1 % func_number_14(), False or 1 == number_16, (-1))
                      1 % 1 >= number_110
                  1
                  if False:
                    (-number_66)
                  else:
                    1
                    bool_30 = bool_22
                    if func_bool_5(func_number_10(False)):
                      1
                    else:
                      if True:
                        number_12 - 1 // (-(-func_number_10(True)))
                      elif func_bool_5(1) or bool_22 :
                        func_number_5(False, func_number_20()) - number_17 + func_number_11() % 1
                      elif 1 > number_6 :
                        func_number_6(True) // 1
                        (not bool_31)
                        func_number_12((-number_49) + (-func_number_4() - 1))
                        (-func_number_18() // func_number_20())
                        1
                        False
                        True
                        if func_bool_4(1):
                          func_number_0(number_58, 1)
                          None
                          1
                    func_number_12(1)
                  func_number_21(1, func_number_20(), number_62)
                  if func_bool_3():
                    None is None
                  else:
                    func_number_13(bool_32, number_35 * number_111)
                  if True:
                    func_number_1()
                  elif True :
                    1 + func_number_4() * number_112 % func_number_5(bool_21, number_113)
                  bool_33 = 1 > number_114 * 1
                  if func_bool_0():
                    if False:
                      func_number_15() * number_73 * func_number_20() + 1
                    else:
                      1
                      True
                  else:
                    if number_115 >= func_number_16((-number_82 + 1), func_bool_6(False, func_number_22(func_number_20()), func_bool_3(), 1) == number_37, 1, number_24, 1):
                      if True:
                        func_number_13((not bool_34), 1) // func_number_3() % number_92 // number_116
                      else:
                        func_bool_1()
              1
              (-1)
              return None
            number_6
            False
            func_number_0(func_number_6(func_bool_2(number_15 // 1 + 1 % 1 // 1)), number_34)
            if False or True:
              bool_10 = bool_0
              if False:
                number_47
                1
                number_35 = 1
                if (not False):
                  number_48 = 1
                else:
                  True
                1 + number_49 * func_number_6(True)
                func_number_12(1)
                bool_1 = func_bool_3()
              if number_50 - 1 - 1 > 1:
                if bool_12:
                  func_number_4()
                  False
                  if func_bool_3():
                    (-(-number_51 + number_23))
                    number_52
                    1 - number_53
                    if func_number_4() > 1:
                      func_number_4()
                      number_44
                      1
                    number_1
                  elif func_bool_1() :
                    number_26
                  if bool_9:
                    if bool_6:
                      if (-1) > number_6 // number_54:
                        bool_6
                      if True:
                        number_55 = func_number_3() % (-1) % 1 // func_number_8() * (-number_33) - 1
                      else:
                        bool_13 = func_number_7() // 1 > number_56 % 1 - number_57 - number_27
                        False
                        if (not False):
                          number_9 = func_number_9(1 // func_number_11() % number_27 * number_56)
                        if (not (-1) > 1):
                          func_number_4()
                        elif True :
                          number_58 = 1 // number_44
                          func_number_11() % (-(-(-number_49) // func_number_10(True))) % 1 % func_number_4()
                          None
                          number_14
                        elif False :
                          1
                        else:
                          number_55
                        1
                      (-func_number_7())
                      if bool_14:
                        func_number_4() // 1
                        if func_bool_4(1 - number_0):
                          func_bool_4(1 - number_59 - func_number_13(func_bool_4(number_60), number_61 + func_number_14() + (-number_8) - func_number_1() // number_16 % number_62 // number_10 * 1 * number_55 // number_63 + number_64 % number_65 * (-1) % number_66 // func_number_13(False, number_0) - number_31 + 1) - func_number_11())
                        else:
                          1
                          if bool_15:
                            if bool_16:
                              number_67
                              number_36
                              number_68
                              number_69 % 1
                            1
                          elif func_bool_3() :
                            bool_17
                          else:
                            if bool_16:
                              bool_17 = bool_4
                            else:
                              number_64 = number_70 - (-number_71)
                              1 - func_number_15() // func_number_12(func_number_0(1, 1))
                            if True:
                              func_bool_1()
                              1 - number_72
                          (not func_bool_1())
                          1
                          None
                          1
                      elif (not True) :
                        number_73 = number_74
                        number_14 = number_75
                      else:
                        1
                      (-func_number_2())
                    else:
                      if True:
                        1
                        if bool_18:
                          number_51 = func_none_0_param_0 // 1 // func_number_2()
                          number_47
                        func_bool_1()
                      else:
                        (-1 + (-number_28 // 1) % func_number_0((-number_76), func_number_12(1)))
                        bool_19
                      None
                    (-func_number_11())
                    bool_20
                    if 1 != func_number_6(func_bool_0()):
                      1
                  elif True :
                    1
                    if bool_21 or True:
                      (-func_number_10(True))
                  else:
                    if func_bool_0():
                      number_2
                      1
                    else:
                      (-1)
                      number_77 = func_number_5(bool_8, number_78)
                    if True or bool_22:
                      if True:
                        None is func_none_2(1, (-1 - (-1))) is func_none_1(func_number_7(), 1, 1, (-number_52))
                        func_none_0(func_number_7() % number_79) is func_none_1(func_number_0(1 + 1, 1) * 1 - number_35 // func_number_0(1, number_80) + (-1), func_number_6(False) % number_81, number_82 % number_54 % number_4, number_83) is func_none_2(func_number_14(), func_number_16(number_30, True, 1, func_number_2() + 1, 1 // number_11)) is None is func_none_0(1)
                        if False:
                          None
                        elif False :
                          if 1 > number_59:
                            bool_20
                          else:
                            (-number_2)
                          number_84 = number_32
                        elif bool_23 :
                          if False:
                            if True:
                              1
                            else:
                              if bool_3:
                                1 // 1
                              else:
                                bool_24
                                1 - func_number_11() * (-number_85)
                                False
                            func_bool_2(number_86)
                            number_87
                            if number_88 != func_number_16(func_number_10(func_bool_5(func_number_0(1, 1))), bool_25 or False, func_number_6(True), number_89, func_number_2()):
                              1 // func_number_12((-(-number_71)))
                              1
                              if bool_26:
                                func_none_1(1, func_number_15(), number_23, number_84)
                              elif bool_6 :
                                func_bool_5(1)
                                (-1)
                                func_number_5(bool_24, 1) * 1
                              else:
                                1
                                1
                                number_70
                                bool_10 = (-number_62) + number_86 > 1 % number_90 - func_number_8()
                              1 + func_number_17(1)
                              1 % (-1) > 1 or False
                            else:
                              func_number_8()
                        (-func_number_16(1, (not False), func_number_4(), 1 // number_48, number_91 + number_92 % 1))
                      elif True :
                        1
                        if (not True):
                          if True:
                            if False:
                              if False:
                                func_number_2() % 1
                                func_number_6(func_bool_2(func_number_1()))
                            else:
                              func_none_1(1, number_93, func_number_15() + number_94, func_number_2()) is None is None
                              False
                            number_80
                          else:
                            func_none_0(number_39)
                            bool_27 or bool_13
                      else:
                        number_95
                        bool_14 = False
                      if True:
                        number_96 - func_number_8()
                        bool_2 = func_bool_2((-number_14) - 1)
                        bool_22
                      number_9 % number_80
                else:
                  number_97 = 1
                  if bool_28:
                    if func_number_2() == bool_11:
                      number_44 // 1
                    if True:
                      if number_98 <= number_42:
                        if number_81 > func_number_7():
                          False
                          None is None
                          if func_bool_0():
                            number_99 = number_93
                        elif True :
                          1 % 1
                          if (not True):
                            func_number_5(func_bool_0(), number_39)
                            func_number_12(func_number_16((-func_number_17((-func_number_12(func_number_12(1))))), True, 1 + func_number_8() - (-1), func_number_14(), func_none_0_param_0))
                        else:
                          True
                        1
                      else:
                        if func_bool_2((-number_100 * 1) + 1):
                          func_number_6(False)
                        else:
                          number_57 // (-(-1)) % 1 > 1
                        number_74
                        1 - 1 - number_11 // 1 + func_number_11() % number_9 + 1
                    False
                if True:
                  1 + 1 * 1
              elif False :
                func_number_7()
                number_46 = func_number_8()
              else:
                func_bool_1()
            else:
              1 * (-func_number_3() // 1)
              False
              func_number_18()
              (-number_101)
              1
            return func_number_19()
          func_number_10(bool_9)
          return func_number_11() % 1 - number_21 % 1 // 1 % number_46 + 1 % 1
        def func_bool_2(func_bool_2_param_0: int) -> bool:
          func_bool_2_param_0:int = 1
          number_46:int = 1
          number_47:int = 1
          bool_12:bool = False
          def func_bool_3() -> bool:
            if False:
              (-1)
            return True
          if func_bool_1():
            bool_12
            if False:
              1
              number_13 + number_46
            (not False)
            if True:
              1
              func_bool_3()
            else:
              None is None
            if False:
              (-1)
            number_47 = 1
            1
            1
          return True
        func_number_7() // func_number_9(func_number_9(1)) % func_number_6(bool_11) > number_37 - 1
        number_39 = 1
        if False:
          if (not True):
            True
            (-func_number_6((not func_bool_1())))
          number_12 = number_11 + 1
        else:
          number_40
        number_28 = 1
        if func_bool_1():
          number_17
        elif False or func_bool_0() :
          number_41
          if func_bool_2(number_4):
            (-func_number_1())
            1
            number_36
            number_31 + number_42
          else:
            if False:
              func_number_0(number_31, (-(-number_43 // (-func_number_8()))))
          number_17
        else:
          number_44
        return None
      def func_none_1(func_none_1_param_0: int, func_none_1_param_1: int, func_none_1_param_2: int, func_none_1_param_3: int):
        func_none_1_param_0:int = 1
        func_none_1_param_1:int = 1
        func_none_1_param_2:int = 1
        func_none_1_param_3:int = 1
        number_42:int = 1
        number_42 = 1
        return None is None
      if func_bool_0():
        None
        1
        if bool_1:
          1 % 1 - 1
        else:
          1
        func_number_0(1, 1)
        func_bool_0()
      else:
        number_16 = number_1 % func_number_2() * (-number_2 + number_7)
        1
        1 // (-func_number_0((-func_number_2()), number_17))
        1
        1 + 1 >= 1
        False
        1 % 1
      if (not func_number_4() < func_number_3()):
        if func_number_0(1 - func_number_4(), func_number_1()) > number_13 * number_18 - func_number_1() * number_14:
          None is None
          bool_5
        else:
          func_number_0(number_19 // func_number_6(bool_6 or (not False)), func_number_5(func_bool_1(), (-func_number_0((-1), func_number_2()) * func_number_2())))
      else:
        if (not False):
          1
          1 * (-1)
      if bool_7:
        (-number_20)
        1
        if func_number_4() % func_number_4() >= func_number_3() // 1:
          number_17 > 1
          if func_bool_1():
            if bool_8:
              None is None is func_none_0(func_number_6(func_bool_0())) is None is func_none_0(number_21) is func_none_1((-1), number_0, number_3, 1) is None
            else:
              if False:
                1
              else:
                func_bool_1()
          else:
            1
          func_number_1() // number_22 - 1
        else:
          if func_number_0(1, number_23) > 1:
            1
          else:
            if True != bool_0:
              (-(-1) * 1)
              number_6 * number_24
              if func_bool_0():
                1
                1
              else:
                number_10 = 1
                (-func_number_0((-1 - func_number_0(1, 1)) // 1 + number_6 * func_number_5(True, 1) // 1, 1)) * 1
                if bool_3:
                  number_1
                elif func_number_3() > 1 :
                  if bool_2:
                    1
                  elif (not func_bool_1() or (not func_bool_0())) :
                    bool_7
                  else:
                    number_25
                  number_26
                  bool_3
                  number_27
                elif False :
                  func_number_2()
                  if number_28 > number_7 - 1 // 1:
                    func_number_5(1 > 1 + 1 or func_bool_0(), func_number_0(func_number_0(1, 1 + 1) // 1, 1 // 1)) % func_number_5(func_bool_1(), 1)
                    1
                    1
                    func_number_6((not func_bool_1()))
                  else:
                    number_29 = func_number_6(bool_5)
                  func_number_3()
                  1
                  func_number_5((-(-number_30)) < number_11, 1 // 1)
                else:
                  bool_8 = True
              if number_15 > 1:
                number_4 = (-1)
              else:
                if True:
                  (not (not bool_5))
                  1
              number_31 = func_number_6(True)
              1
            else:
              if True:
                if (not True):
                  if False:
                    number_32
                    (-1)
                  else:
                    number_17 = (-func_number_7())
                    if False:
                      func_number_6(func_bool_1())
                      (-1)
                    else:
                      number_33
                      (-func_number_2() + func_number_7()) < number_34
                      bool_9 = func_number_4() != 1
                  if True:
                    1
                  else:
                    (not func_bool_0())
                    None
                    1
              else:
                number_34
                number_35 // (-1) % 1
          1
          1
          if (not (not func_bool_1())):
            func_none_1(1 % 1 - 1, func_number_0(number_10, number_36), (-(-func_number_0(1, func_number_5(False, number_1)))), func_number_4() - (-func_number_6(False) // 1)) is None
            bool_10
            func_number_1()
            func_none_0(number_33 * 1) is None is None is func_none_1(1 // 1, 1, 1, 1 % func_number_4() + func_number_2()) is None is None
          number_37 = 1
      else:
        1
      func_number_8()
      return number_30
    def func_number_5(func_number_5_param_0: bool, func_number_5_param_1: int) -> int:
      func_number_5_param_1:int = 1
      func_number_5_param_0:bool = False
      None is None
      1
      return 1
    (-func_number_3() // number_13) - 1 * number_4 * (-number_14) + func_number_4() * func_number_4()
    return func_number_5(True, number_15) == 1
  func_bool_0()
  (-1)
  return 1 // 1 // func_number_1()
def func_number_3() -> int:
  number_13:int = 1
  number_13 = func_number_2()
  number_9 = func_number_3()
  return 1
1 * (-1 // number_0) % 1
number_0 = 1 * 1
number_0 - number_1
if True:
  if 1 - (-1) + func_number_0(1, (-1)) * number_0 * 1 != None is None is None or bool_0 or (not False):
    bool_1
    if (not True):
      func_number_0(func_number_0(1, 1), 1)
    else:
      if (not bool_0):
        if True:
          number_2
        (-number_2)
        number_3 = 1 // 1 // (-number_1) // 1 * (-1)
      else:
        if bool_2:
          func_number_0((-number_4), func_number_1())
          1
          func_number_0(func_number_1(), 1 + number_2)
        (-1) + 1 % 1 // func_number_0(number_2, 1) - number_0 + (-func_number_0(number_5, number_0 % 1))
        bool_2
      1
      1
      func_number_0(1, 1) // (-func_number_0((-number_6), 1) % 1) % 1 % 1 % 1 % func_number_1() + number_3 + (-(-number_7)) + number_8 + func_number_1()
      bool_3 = True
      if bool_0:
        if (not bool_3):
          func_number_2()
        else:
          1
          1 - 1 - number_3
      func_number_1()
    if (not (not True)):
      1
      number_1
      number_9
    else:
      number_9 = func_number_2()
  if True:
    number_1
  else:
    1 > number_10
    1
    func_number_1()
    number_8 = 1
  None
  number_5
  number_7 * (-1)
  number_7
  if bool_1 == False:
    if (not bool_4) or False:
      number_6
      if (not (not False)):
        number_11 = 1
      else:
        number_12
        number_10 % func_number_3()
    else:
      if False:
        1
        1 - number_9
        None
      else:
        func_number_2()
      1
      number_5
      1
  else:
    1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
number_5:int = 1
number_6:int = 1
number_7:int = 1
number_8:int = 1
number_9:int = 1
number_10:int = 1
number_11:int = 1
number_12:int = 1
number_13:int = 1
number_14:int = 1
number_15:int = 1
number_16:int = 1
number_17:int = 1
number_18:int = 1
number_19:int = 1
number_20:int = 1
number_21:int = 1
number_22:int = 1
bool_0:bool = False
bool_1:bool = False
bool_2:bool = False
def func_number_0(func_number_0_param_0: int, func_number_0_param_1: int) -> int:
  func_number_0_param_0:int = 1
  func_number_0_param_1:int = 1
  number_25:int = 1
  1
  bool_0
  number_25 = 1
  return func_number_1() % (-(-1) % (-func_number_0(1, 1)))
def func_number_1() -> int:
  number_23:int = 1
  1
  return number_23
def func_number_2() -> int:
  1
  return 1
def func_none_0():
  (-number_3)
  1
  return func_none_0()
(-func_number_0(1, number_0))
(-func_number_0(func_number_0(1, number_1 * func_number_0(1, 1)), 1) // func_number_0(func_number_0(1, (-number_2)), func_number_0((-(-number_3)), number_0)) // func_number_0(number_3, func_number_0(func_number_0(number_2, number_2) - 1 + func_number_0(func_number_0(func_number_0(number_4, 1), 1 % 1 - number_5 * number_6 // func_number_0(1, number_7)), number_6), 1)))
if False:
  (not False)
  (-1)
elif func_number_0((-func_number_0(number_5, 1)) - number_8, number_9 * 1) >= number_10 + func_number_0((-number_8) * 1, 1) + number_11 % func_number_0(1, 1 + 1) or bool_0 :
  True
  1
elif False or (-1) > number_12 == None :
  func_number_0(1, (-(-func_number_0(number_13, 1))))
else:
  if bool_0:
    bool_1
    if bool_1:
      1
      True
    elif bool_2 :
      if (-(-number_14)) > 1:
        func_none_0() is None is None
      1
      (-number_15) // func_number_0((-(-number_16)), number_11)
      func_number_0(func_number_1(), number_17) % 1 % 1
      number_8 // 1
      number_11
    else:
      func_number_0((-1) * number_16, (-1 + func_number_0(1 + (-1) // 1, (-number_18)) - number_19))
      func_number_2() + func_number_2() - 1
      number_8
      number_7 = number_20 * (-number_21)
      bool_1 = bool_1
  else:
    (-(-(-(-func_number_0(func_number_1(), 1))))) * (-1)
  1
  if (not 1 > 1):
    1
  elif number_22 > 1 :
    1 % func_number_1() * number_15
  else:
    1 * 1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
bool_0:bool = False
if 1 > number_0 % (-number_0):
  1
elif (not number_0 - (-1) > 1) :
  1
else:
  bool_0
  number_1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:None is None is None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
def func_number_0(func_number_0_param_0: bool) -> int:
  func_number_0_param_0:bool = False
  def func_number_1() -> int:
    number_2:int = 1
    number_3:int = 1
    number_2 = func_number_2()
    number_3
    return (-func_number_1())
  def func_number_2() -> int:
    1 + 1 % 1 % 1 > 1
    return number_0
  func_number_1()
  func_number_0(False)
  return func_number_2() - 1
def func_none_0(func_none_0_param_0: bool):
  number_2:int = 1
  number_3:int = 1
  number_4:int = 1
  number_5:int = 1
  number_6:int = 1
  func_none_0_param_0:bool = False
  bool_1:bool = False
  bool_2:bool = False
  bool_3:bool = False
  bool_4:bool = False
  func_number_0((not func_none_0_param_0))
  if False or bool_1:
    1 > 1 * func_number_0((not True))
  else:
    if 1 % (-1) * func_number_0(bool_2) % (-number_2) <= 1 or True:
      if False:
        False
      elif False :
        if (not bool_1):
          func_number_0(True) * number_3 - number_4 // number_1 + func_number_0((not True)) - number_1 // func_number_0(1 > number_5)
          1
          func_number_0(bool_3)
      elif bool_4 :
        (-(-number_3))
        number_6
    else:
      1
  return None is None is None is None is None
1 < func_number_0(None is func_none_0(True) == number_0 + func_number_0(1 // 1 % 1 + 1 - func_number_0(False) > 1) * 1 // number_1 // 1 > func_number_0(False))
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
1 // (-1)
number_0
None is None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
None
if False:
  number_0
  number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
bool_1:bool = False
bool_2:bool = False
number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
number_5:int = 1
number_6:int = 1
number_7:int = 1
if (not True):
  if bool_0:
    if False:
      1 * number_0
    number_1
    bool_1
    bool_0
  else:
    1 < (-number_2)
  1
elif bool_2 :
  1
  number_3
  True
  if False:
    (-1) * 1 > number_1
  else:
    if True:
      1
      (-1)
      number_4 + number_5
      if True:
        if bool_0:
          1
          1
        elif (not (not True)) :
          if bool_1:
            number_5 = 1
        1 % 1 + number_0 + 1 % 1 // 1 != 1
        None
      else:
        (-1) - 1 - 1 + (-1 * number_5) // 1
        None
        number_0 == (-(-1))
      1
      number_2 = number_6
    else:
      number_7
      True
  number_7
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
bool_0 = True
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
None
(-1) // (-number_0) - number_0 % number_1 + 1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
bool_0
1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0 = 1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
1
None is None
if True:
  (-number_0)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
bool_0
None
1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:class class_0(object):
  pass
number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
bool_0:bool = False
bool_1:bool = False
bool_2:bool = False
class_0_0:class_0 = None
def func_bool_0(func_bool_0_param_0: int, func_bool_0_param_1: bool, func_bool_0_param_2: int) -> bool:
  func_bool_0_param_0:int = 1
  func_bool_0_param_2:int = 1
  number_6:int = 1
  func_bool_0_param_1:bool = False
  number_0 = func_number_0()
  return (not number_6 + func_number_0() + 1 >= 1)
def func_number_0() -> int:
  True
  return 1
None is None
(not True)
if (not False):
  number_0
  if bool_0:
    if True:
      if False:
        number_1
      else:
        if True:
          bool_1 = (not bool_2) or func_bool_0(1, True, 1)
          1 + 1
      False
    elif number_2 % 1 > 1 :
      1
    else:
      func_number_0()
    1 % (-number_2) * 1
    1
    number_3
class_0_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
(-number_0)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
bool_0:bool = False
def func_number_0() -> int:
  bool_1:bool = False
  func_number_0()
  bool_1
  return func_number_0()
if (-(-number_0)) > 1 + number_0:
  (-number_0)
  func_number_0()
elif bool_0 :
  1 - (-1)
  number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_0 // number_0 < number_1 % 1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:class class_0(object):
  pass
class_0_0:class_0 = None
1
None
class_0_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:def func_number_0() -> int:
  number_0:int = 1
  number_1:int = 1
  number_0 = func_number_0() % func_number_0()
  (-1 % number_1 // func_number_0()) + 1
  (not False)
  return func_number_0()
func_number_0() > 1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:class class_0(object):
  pass
class_0_0:class_0 = None
class_0_0 = None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1 > 1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:(-1)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_0 = 1 - number_1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
(not bool_0)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
bool_0:bool = False
def func_number_0(func_number_0_param_0: int, func_number_0_param_1: int, func_number_0_param_2: int, func_number_0_param_3: bool, func_number_0_param_4: int) -> int:
  func_number_0_param_0:int = 1
  func_number_0_param_1:int = 1
  func_number_0_param_2:int = 1
  func_number_0_param_4:int = 1
  number_7:int = 1
  func_number_0_param_3:bool = False
  bool_2:bool = False
  bool_3:bool = False
  def func_number_1() -> int:
    number_8:int = 1
    number_9:int = 1
    number_10:int = 1
    number_11:int = 1
    number_12:int = 1
    bool_4:bool = False
    bool_5:bool = False
    bool_6:bool = False
    def func_number_2() -> int:
      number_13:int = 1
      bool_0
      number_13
      return 1
    func_number_0(func_number_0(1, func_number_1(), func_number_1(), bool_3, (-1)), (-func_number_1()) % func_number_0(1, func_number_1(), 1, number_1 // 1 + 1 <= func_number_1(), func_number_0(func_number_1(), 1, func_number_1() // func_number_0(func_number_0(1, number_8, 1, 1 >= number_9, 1 + func_number_1()), 1, number_9 - number_2, bool_4, number_2) * func_number_0(number_0, func_number_1() * number_10, number_2, bool_5, func_number_0(1, 1 * (-number_9 % func_number_1()), 1, bool_0, func_number_0(1, 1, (-number_11), number_0 != True or False, (-func_number_0(func_number_0_param_1, number_11, func_number_0(number_12, func_number_1(), 1, True, func_number_1()), True, func_number_2() + 1) - 1) + 1))), number_0 > number_1, 1)) + number_9, 1 % number_11, (not (not (not bool_6))), 1) <= func_number_2()
    1 // func_number_0(1, (-(-1)), func_number_1(), True, 1) % func_number_1() > number_12
    return func_number_1()
  if 1 + 1 < number_1:
    number_7
  elif (not func_number_0_param_3) :
    func_number_1()
    bool_2 = bool_3
  return (-1)
number_0 = func_number_0(number_0, 1, func_number_0(number_1, number_2, (-func_number_0((-(-1)), func_number_0(1, 1, 1, bool_0, 1), 1, bool_0, 1)), False, 1), True, func_number_0(1, 1 - func_number_0(1, 1, 1, 1 + 1 > 1, 1), number_0 - (-1), True, 1))
None is None is None is None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
number_5:int = 1
number_6:int = 1
number_7:int = 1
number_8:int = 1
number_9:int = 1
number_10:int = 1
number_11:int = 1
bool_0:bool = False
bool_1:bool = False
bool_2:bool = False
def func_bool_0(func_bool_0_param_0: int, func_bool_0_param_1: bool, func_bool_0_param_2: int) -> bool:
  func_bool_0_param_0:int = 1
  func_bool_0_param_2:int = 1
  func_bool_0_param_1:bool = False
  True
  return False
def func_number_0() -> int:
  None
  return func_number_0()
1
True
if True:
  number_0
  number_1 <= 1 + number_0
elif 1 > number_0 * 1 - 1 + number_1 + (-1) :
  number_1
  func_bool_0(1, func_bool_0(1, bool_0, 1), 1)
  if True:
    (-number_1)
    if 1 == None:
      if func_bool_0(1, True, 1):
        number_2
      else:
        bool_0
        1
        bool_0
        number_0 = (-(-1) % number_2 - 1)
      number_1
      1
      True or True
      1
  number_3 = number_4
  if func_bool_0(1, number_5 * 1 - number_1 <= (-number_6 % func_number_0()), number_7):
    func_bool_0(1 // func_number_0(), func_bool_0(number_8, func_number_0() >= 1, (-number_3) + (-number_5) - 1 // 1), 1)
  elif bool_1 :
    1
  elif (not bool_2 or False) :
    if bool_1:
      func_bool_0(1, False, func_number_0())
    func_bool_0(number_9, (not func_bool_0(1, func_bool_0(number_10 * func_number_0(), True, 1), 1)), number_11)
  else:
    func_number_0()
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:None is None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:True
None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
bool_0:bool = False
bool_1:bool = False
def func_none_0(func_none_0_param_0: int):
  func_none_0_param_0:int = 1
  number_6:int = 1
  number_1 = (-number_4)
  return func_none_0(number_6)
def func_number_0() -> int:
  (-func_number_0()) // 1 % func_number_0()
  return 1
None is None is None is func_none_0(func_number_0()) is func_none_0(number_0)
if (not False):
  if 1 + 1 - 1 * number_0 * 1 * (-1) * 1 // number_1 > 1 or True:
    bool_0
  else:
    number_2
    number_1
if True:
  if False:
    number_0 = (-(-1 + (-number_1)))
    bool_0
    func_number_0()
    if bool_1:
      number_3 = func_number_0() % 1
    else:
      if (not False or func_number_0() > (-number_1)):
        number_0
      else:
        number_0
        1
        func_none_0(1 * number_2)
  number_4
  func_number_0()
  None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1 > 1
False
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0 * 1
None is None is None is None is None is None is None is None is None is None is None is None is None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
if number_0 >= number_1 % 1 - 1 % 1 + 1 * number_2 % 1 % (-(-(-1) * number_3)) + 1 + 1:
  number_4
else:
  False
  number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
number_5:int = 1
number_6:int = 1
number_7:int = 1
number_8:int = 1
number_9:int = 1
number_10:int = 1
bool_0:bool = False
bool_1:bool = False
bool_2:bool = False
def func_number_0(func_number_0_param_0: bool, func_number_0_param_1: int, func_number_0_param_2: bool, func_number_0_param_3: bool) -> int:
  func_number_0_param_1:int = 1
  func_number_0_param_0:bool = False
  func_number_0_param_2:bool = False
  func_number_0_param_3:bool = False
  1
  return number_0
def func_number_1(func_number_1_param_0: int) -> int:
  func_number_1_param_0:int = 1
  number_12:int = 1
  number_13:int = 1
  number_14:int = 1
  number_15:int = 1
  number_16:int = 1
  number_17:int = 1
  number_18:int = 1
  number_19:int = 1
  bool_3:bool = False
  bool_4:bool = False
  bool_5:bool = False
  bool_6:bool = False
  def func_number_3() -> int:
    (-1)
    return 1
  def func_number_4(func_number_4_param_0: bool, func_number_4_param_1: int, func_number_4_param_2: bool) -> int:
    func_number_4_param_1:int = 1
    func_number_4_param_0:bool = False
    func_number_4_param_2:bool = False
    1
    return number_9
  def func_number_5() -> int:
    number_20:int = 1
    func_number_1(number_20)
    number_4
    number_0 - func_number_3()
    return (-number_19)
  def func_bool_1(func_bool_1_param_0: int) -> bool:
    func_bool_1_param_0:int = 1
    number_21:int = 1
    number_22:int = 1
    number_21 = 1
    return func_bool_0(number_22, 1)
  1
  if func_bool_0(1, func_number_1(number_12)):
    if False:
      if func_bool_0(number_9, func_number_1(1)):
        False
      else:
        False
        number_13
    else:
      bool_1
      (-number_7)
  elif bool_1 :
    if number_14 > func_number_2():
      func_number_0(bool_0, number_1, bool_3, (-func_number_0((not bool_3), (-func_number_2()) // func_number_0(func_bool_1(number_9), 1, (not bool_4), func_number_1(1 % func_number_1(func_number_1(number_6))) * 1 > number_15), False, bool_5 or func_bool_1(func_number_2() // func_number_1(1))) * func_number_2() - func_number_1(func_number_1(number_9)) * 1) > number_15) >= number_16
      1
      1
      number_9
      1
      func_number_0(bool_5, 1 - number_17, func_bool_0(1, number_0), 1 < func_number_3()) > 1
    else:
      func_number_4(bool_6, 1, func_bool_1(func_number_3()) or True)
    (not func_bool_0(number_6, func_number_4(func_bool_1(number_5), (-func_number_3()), True)))
    (-1)
  else:
    func_number_5()
    number_3 = number_18
  return number_19
def func_number_2() -> int:
  number_11:int = 1
  number_11 = 1
  return 1
def func_bool_0(func_bool_0_param_0: int, func_bool_0_param_1: int) -> bool:
  func_bool_0_param_0:int = 1
  func_bool_0_param_1:int = 1
  number_13:int = 1
  number_14:int = 1
  number_15:int = 1
  number_16:int = 1
  number_17:int = 1
  number_18:int = 1
  number_19:int = 1
  number_20:int = 1
  number_21:int = 1
  number_22:int = 1
  number_23:int = 1
  bool_3:bool = False
  bool_4:bool = False
  bool_5:bool = False
  bool_6:bool = False
  bool_7:bool = False
  bool_8:bool = False
  def func_number_3() -> int:
    False
    return 1
  def func_number_4() -> int:
    1
    1
    return (-func_number_4())
  (-func_number_2()) // number_13
  (not True)
  func_number_1(number_14) + number_15 % number_0
  if bool_3:
    1
    number_16
    if False:
      func_number_2()
    else:
      1
    1
    (-func_number_1(1) // 1)
    func_number_1(number_3)
    number_17
    1
    True
    number_5 = 1
    1
  if None != True or bool_4:
    bool_5 = func_number_1(func_number_0(False, 1, (not True), False)) < func_number_1(func_number_3()) // 1 + func_number_1(func_number_4())
  elif False :
    if False:
      1
      if 1 + number_18 // 1 - 1 // 1 // (-number_15 // number_13 * func_number_2()) > (-1):
        if bool_0:
          number_19 = func_number_0(True, func_number_0(func_bool_0(number_20, 1), number_8, True, False), False, False)
        elif True :
          False
          func_number_0(func_number_3() > (-(-1) // (-func_number_4() % 1)), 1, (not bool_6), (not True))
        else:
          (-(-1))
          True
          number_20
          bool_6
          1
        1
      else:
        None
        func_bool_0(1, 1)
        func_number_1(func_number_0((not bool_7), 1 - 1, (not False), func_bool_0(func_number_2(), 1))) % 1
        bool_2
        (-func_number_3()) - func_number_1(func_number_4()) * func_number_0(bool_8 != number_21, (-1), 1 % 1 > number_3, func_bool_0(number_17, func_number_1(number_17)))
      func_bool_0(1, 1)
      1 * func_number_1(number_7) % number_22 % 1
    else:
      func_number_0(func_bool_0(1, number_4), func_number_0(False, func_number_1(func_number_1(1)), False, True) * number_23, False, (not bool_8 or 1 > 1))
      1
  elif func_number_1((-(-(-1 // func_number_0(False, 1, func_bool_0((-1), 1), func_bool_0(func_number_2(), 1)))))) >= func_number_2() :
    number_1 = func_number_2()
  1 * number_9
  return bool_6
None
1
if False:
  if True:
    if False:
      number_0 = func_number_0(bool_0, number_1, number_1 < func_number_0(True, number_2 - 1, bool_0, True), (not False)) * func_number_0((not func_number_0(bool_0, func_number_0(bool_1, number_3 % number_4, (not (not True)), False) % (-1) - number_5 % func_number_0((not True), number_5, False, bool_2) + func_number_0(bool_2, number_6 - (-1), (not False), (not func_bool_0(1 % 1, func_number_0(True, 1, number_7 // 1 - 1 > number_8, func_bool_0(number_9, 1))))) + func_number_1(1) - number_9 * (-number_4 + func_number_2()) // (-func_number_2()), (-number_10) < 1 // 1, bool_2) >= number_3), (-func_number_1(1) + 1), True, bool_1)
    else:
      number_1 = func_number_1(number_9)
      func_number_2()
  else:
    1
else:
  number_1 = (-1)
number_4 = number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
if number_0 % number_0 > 1 - 1:
  1 != 1 + number_1
else:
  1
  1
  number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
1 % 1 // number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
number_5:int = 1
number_6:int = 1
number_7:int = 1
bool_0:bool = False
True
if number_0 // (-number_1) > number_1:
  bool_0
  1 // number_2 * 1
  (-number_2 // number_2 // number_3 % 1 // 1 % number_4)
if 1 < number_5 + number_6 // number_6 - number_6 // number_7:
  number_2
  False
elif (not True or False) :
  (-1)
  number_1
  True or True
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:def func_number_0(func_number_0_param_0: int) -> int:
  func_number_0_param_0:int = 1
  number_1:int = 1
  number_2:int = 1
  func_number_0_param_0
  1
  number_1 + number_2
  1
  None
  return 1
(-1 + 1)
func_number_0(1) * 1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
(not False)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
number_5:int = 1
number_6:int = 1
number_7:int = 1
number_8:int = 1
number_9:int = 1
number_10:int = 1
bool_0:bool = False
bool_1:bool = False
def func_bool_0(func_bool_0_param_0: int, func_bool_0_param_1: bool) -> bool:
  func_bool_0_param_0:int = 1
  func_bool_0_param_1:bool = False
  bool_3:bool = False
  number_9
  return bool_3
number_0 = 1
if bool_0:
  number_1
  if number_2 > number_3:
    bool_1 = False
    number_1
  if (not True):
    if True:
      (-1) - (-number_0) // 1 // number_3
      (-number_4 + number_2)
      1
      1 * number_5 // number_6
    elif bool_0 :
      1
      False or 1 * number_7 != number_0
    else:
      func_bool_0(number_1, True)
    if 1 == number_4:
      1
      number_8
      bool_0
  elif number_9 != 1 :
    if bool_0:
      (-1) - number_10 % 1 + 1
  1 - 1 - 1
  1 % 1
  1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
def func_number_0() -> int:
  number_1:int = 1
  number_2:int = 1
  number_3:int = 1
  number_4:int = 1
  number_5:int = 1
  number_6:int = 1
  number_7:int = 1
  number_8:int = 1
  number_9:int = 1
  number_10:int = 1
  number_11:int = 1
  number_12:int = 1
  number_13:int = 1
  number_14:int = 1
  number_15:int = 1
  number_16:int = 1
  number_17:int = 1
  number_18:int = 1
  number_19:int = 1
  bool_0:bool = False
  bool_1:bool = False
  bool_2:bool = False
  bool_3:bool = False
  def func_number_1() -> int:
    (-func_number_2() - 1)
    return func_number_1()
  def func_number_2() -> int:
    False
    return number_10
  def func_number_3(func_number_3_param_0: int, func_number_3_param_1: int, func_number_3_param_2: int, func_number_3_param_3: bool, func_number_3_param_4: int) -> int:
    func_number_3_param_0:int = 1
    func_number_3_param_1:int = 1
    func_number_3_param_2:int = 1
    func_number_3_param_4:int = 1
    number_24:int = 1
    func_number_3_param_3:bool = False
    1 * number_19
    return number_11 - 1 // (-number_24)
  def func_bool_0(func_bool_0_param_0: int, func_bool_0_param_1: int) -> bool:
    func_bool_0_param_0:int = 1
    func_bool_0_param_1:int = 1
    number_22:int = 1
    number_22 = 1
    return True
  1 * number_1
  if bool_0:
    if (not (not True)):
      1
    if func_bool_0(func_number_0(), func_number_0() * 1):
      (-(-number_1))
      1
    elif (not True) :
      if True:
        if False:
          func_number_0() // func_number_0() * func_number_0()
          1
        else:
          func_number_0()
          number_2 - number_3 + 1 - 1 - number_3
          1
          func_number_0()
          if (not number_4 == False):
            number_5
            bool_1
            number_5 = func_number_0()
            number_6
            if bool_2:
              if func_number_0() > number_7:
                1
          elif True :
            func_number_0()
        if False:
          func_number_0() - number_8
        number_9 = number_10
      elif False :
        func_bool_0(number_11, func_number_1())
    else:
      func_number_2() - 1
      if number_12 != 1 * number_7:
        number_10 - func_number_1() % 1
        1
        None
        if bool_2:
          if False:
            if func_bool_0(1, number_8 + func_number_2() - 1):
              None
          else:
            None
            if (not False):
              number_11
            else:
              if 1 > func_number_1():
                1
          1
  elif func_number_2() < 1 // 1 :
    number_11
    number_4 = 1
  elif func_bool_0(1, 1) :
    if bool_3:
      number_13 = 1 // 1 - number_14
    else:
      func_number_1() // (-func_number_0()) // number_15 - number_10
      func_bool_0(number_16 * 1, func_number_0())
      (-1 // func_number_2())
      number_17
      (-func_number_1())
  else:
    bool_2
    number_18
  func_number_3((-func_number_1()), number_19 + (-1), func_number_2(), (not True), 1)
  return 1
number_0 // func_number_0() * func_number_0()
1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
bool_0 = False
1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0 = number_0
(-1) % (-1)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
number_5:int = 1
number_6:int = 1
bool_0:bool = False
def func_number_0() -> int:
  number_7:int = 1
  number_8:int = 1
  def func_none_0(func_none_0_param_0: bool, func_none_0_param_1: int):
    func_none_0_param_1:int = 1
    number_10:int = 1
    func_none_0_param_0:bool = False
    def func_number_3() -> int:
      func_number_1()
      number_2
      1
      1
      1
      return (-1) + 1 * 1
    if bool_0:
      1 + 1 - number_10 > 1
    else:
      if bool_0:
        func_number_1() + 1
      else:
        number_8 = func_number_1()
      (-1)
      func_number_0() // 1
    return None is func_none_0(True or False, 1) is func_none_0(1 // number_7 * func_number_0() - func_number_2(True) <= 1, number_3) is func_none_0(func_none_0_param_0, func_number_3() // 1) is None
  None is func_none_0(True, number_7 * number_6 + number_8 // 1)
  return 1
def func_number_1() -> int:
  number_7:int = 1
  1
  False
  number_7
  return 1
def func_number_2(func_number_2_param_0: bool) -> int:
  number_7:int = 1
  func_number_2_param_0:bool = False
  bool_2:bool = False
  1
  number_4 = 1 % func_number_2(bool_2)
  number_7
  return func_number_0()
if 1 > 1:
  1
  if False:
    1 + 1
    if (not 1 > number_0):
      func_number_0()
  elif bool_0 or True or bool_0 :
    1
  elif True :
    if False:
      (-func_number_1())
    number_1
    number_2 = func_number_0()
  number_3 * 1 - (-1) // func_number_0() // number_1
  None is None is None
  func_number_0()
else:
  (not 1 // number_0 // (-func_number_1() * func_number_0()) % 1 == 1 % 1 % 1 > 1)
  1
if number_1 >= (-func_number_1() // number_4 * number_4) * func_number_0() or True:
  False
  number_5
else:
  bool_0 = True
if (-func_number_0() % number_6 // func_number_2(True) % 1 // func_number_1()) > 1 % 1:
  False
  1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
1 - number_0 + 1 + number_0
number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
bool_0:bool = False
number_0
number_0
bool_0 = True
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0 = 1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
(-number_0)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_0
1 + number_1 // number_2 // number_3
1 * number_2
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
bool_0
1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
bool_0:bool = False
def func_number_0(func_number_0_param_0: int) -> int:
  func_number_0_param_0:int = 1
  number_2:int = 1
  number_3:int = 1
  number_4:int = 1
  number_5:int = 1
  number_6:int = 1
  bool_1:bool = False
  bool_2:bool = False
  1
  if func_number_0(func_number_0(1 % 1)) // 1 > func_number_0(func_number_0(number_0) + func_number_0(func_number_0((-func_number_0(1))) * func_number_0_param_0) + 1):
    func_number_0(1)
  else:
    if True:
      if False:
        if False:
          (-(-1))
        elif 1 > (-number_0) :
          if bool_1:
            1
          elif True :
            number_2
          1 + 1 % func_number_0(func_number_0(number_0))
          if bool_1:
            1
            if (not False):
              bool_2
          elif True :
            if False:
              number_3
            else:
              number_4
          elif func_bool_0() :
            if (not func_number_0(1) < 1):
              False
              1
        else:
          func_number_0_param_0
          if bool_1:
            1
            number_3
          None
        number_5
        number_6 = 1
  return number_5
def func_bool_0() -> bool:
  False
  return True
number_0
1
if False:
  func_number_0(1)
elif bool_0 :
  func_number_0(1)
else:
  if False:
    func_bool_0()
  else:
    True
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:True
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:class class_0(object):
  pass
number_0:int = 1
bool_0:bool = False
class_0_0:class_0 = None
number_0
1
class_0_0
bool_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
number_0:int = 1
number_1:int = 1
None is None is None is None is None
if (not True or False) or False:
  (not False)
bool_0 = 1 > number_0 - number_1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:class class_0(object):
  pass
number_0:int = 1
class_0_0:class_0 = None
number_0
class_0_0 = None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
bool_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
def func_none_0():
  (-1)
  (-(-1)) % number_0
  return None
number_0 = 1 + number_0
func_none_0() is func_none_0() is None is None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
None
number_0
1 // number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
number_5:int = 1
number_6:int = 1
number_7:int = 1
bool_0:bool = False
bool_1:bool = False
bool_2:bool = False
def func_number_0(func_number_0_param_0: int) -> int:
  func_number_0_param_0:int = 1
  number_9:int = 1
  number_10:int = 1
  number_11:int = 1
  number_12:int = 1
  number_13:int = 1
  number_14:int = 1
  number_15:int = 1
  bool_3:bool = False
  def func_number_5(func_number_5_param_0: int, func_number_5_param_1: int, func_number_5_param_2: int) -> int:
    func_number_5_param_0:int = 1
    func_number_5_param_1:int = 1
    func_number_5_param_2:int = 1
    number_19:int = 1
    number_20:int = 1
    number_21:int = 1
    number_22:int = 1
    def func_number_6() -> int:
      number_23:int = 1
      func_number_4() > number_23
      return 1
    func_number_5(func_number_6() - 1, func_number_3(1, func_number_6(), 1 - func_number_0(number_19) // number_20), func_number_5(number_21 % func_number_5(1, 1, 1) // func_number_2(1 * 1 + 1), 1, number_22))
    return 1
  def func_none_0():
    number_16:int = 1
    (-1 + 1 + (-1)) // number_13 + number_16 >= 1
    return None
  func_number_0((-(-1)))
  number_7 = 1 * (-func_number_0(1 % func_number_5(func_number_2(number_9 % number_9), func_number_0_param_0, (-func_number_1())) // 1 + func_number_1())) - 1
  1
  1
  bool_0
  if False:
    1 + number_10
  else:
    number_11 = number_12
    if 1 <= 1 % number_13 // 1:
      func_number_2(number_5)
      number_12
      number_13 = (-(-func_number_1() - number_12 - func_number_0(number_5)) + 1)
    else:
      func_number_2(func_number_1()) - 1 - func_number_2(1) % 1
    None is None is None is func_none_0() is func_none_0() is None is func_none_0() is None is None
  bool_3 = (not bool_0)
  return 1 * (-func_number_5(1, 1, (-func_number_3(1, func_number_2(1) * func_number_2(1), 1)) - number_14 - func_number_2(1 * number_12 % 1) * number_15)) - 1 // number_2
def func_number_1() -> int:
  number_4
  None
  False
  1
  return func_number_0(func_number_0(number_3)) % number_4
def func_number_2(func_number_2_param_0: int) -> int:
  func_number_2_param_0:int = 1
  if (not bool_2 != func_number_1()):
    1 > number_5
  return (-number_0) - 1
def func_number_3(func_number_3_param_0: int, func_number_3_param_1: int, func_number_3_param_2: int) -> int:
  func_number_3_param_0:int = 1
  func_number_3_param_1:int = 1
  func_number_3_param_2:int = 1
  number_11:int = 1
  if False or False == 1:
    (-func_number_4())
    1
  return number_11 - 1 // func_number_3_param_1
def func_number_4() -> int:
  number_8:int = 1
  number_9:int = 1
  number_10:int = 1
  number_11:int = 1
  number_12:int = 1
  number_13:int = 1
  number_14:int = 1
  number_15:int = 1
  bool_3:bool = False
  def func_number_5() -> int:
    False
    return func_number_2(func_number_5())
  def func_number_6(func_number_6_param_0: int) -> int:
    func_number_6_param_0:int = 1
    number_17:int = 1
    (-1)
    return func_number_4() + number_17
  if bool_1:
    number_8
    if False:
      1 + 1
      (-1) // (-func_number_0(number_9)) + (-func_number_3(1, 1, func_number_3((-1), 1, number_3)) - number_10)
    elif bool_3 :
      if (not (-(-1)) == None is None):
        number_6
      elif (-1) < func_number_0(func_number_2(func_number_3((-func_number_3(1, func_number_0(func_number_3((-1), func_number_2(1 % func_number_4() * number_11) % func_number_4(), 1)), func_number_5())), func_number_2(func_number_4()), 1))) :
        1 // number_12
    elif bool_3 :
      1
    bool_0
  else:
    number_11 = 1
    func_number_1()
  if True:
    number_12 = 1
    func_number_3(number_13, 1, (-(-1)))
    (-func_number_6(number_14 * 1) % number_0) // 1
    func_number_3(number_0, 1, number_1)
    (-1) < 1
  (-number_15)
  return (-1) // 1 * 1 - 1
if 1 + 1 - func_number_0(number_0 % number_1) <= func_number_0((-(-func_number_0(func_number_0(func_number_1()) - 1)))):
  if False:
    (-(-func_number_1()) // 1)
    number_1
  else:
    1
    1
  func_number_0(number_1)
else:
  func_number_0(number_2 * func_number_1() * 1)
if bool_0:
  if func_number_1() > number_3:
    func_number_2((-1))
  else:
    bool_1 = (-number_2) != (-number_2)
    1
  if bool_2:
    1
if False:
  func_number_0((-(-1)))
  number_3
  1
elif number_2 + (-1 * (-1) // number_4) * number_5 > (-(-func_number_2(number_6 * func_number_3((-func_number_2(func_number_4()) % func_number_3(1 - func_number_4(), (-number_1), number_4) - (-1)), number_7, func_number_1()) // (-1)))) // 1 - func_number_4() :
  False
func_number_1()
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
bool_0:bool = False
True
1
if False:
  if False:
    number_0
    True
    (-(-1))
  else:
    number_1
    (-1)
    bool_0 = False
  None
else:
  1 + (-1) * 1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_0 = 1
number_1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
number_5:int = 1
number_6:int = 1
number_7:int = 1
bool_0:bool = False
bool_1:bool = False
bool_2:bool = False
bool_3:bool = False
def func_number_0() -> int:
  if 1 == 1:
    1
  return number_4 * 1
def func_number_1(func_number_1_param_0: int) -> int:
  func_number_1_param_0:int = 1
  number_9:int = 1
  number_10:int = 1
  bool_4:bool = False
  def func_number_2() -> int:
    number_11:int = 1
    number_12:int = 1
    number_13:int = 1
    number_14:int = 1
    bool_5:bool = False
    if 1 % func_number_0() != number_11:
      1
      number_6
      func_number_1(number_7)
    else:
      None is None is None is None is None is None is None is None is None is None is None
      number_12 = number_12
      if True:
        bool_5
      else:
        func_number_0() < 1
      None
      1
    (not (-number_13) >= func_number_0())
    return number_14
  None is None is None
  1
  if False:
    if bool_4:
      if (-func_number_1(func_number_0() // func_number_1(1) % 1 // func_number_0() + number_4 // func_number_2() % number_9 - 1 + number_10)) > number_5:
        1
      1
    else:
      number_4 % 1
      number_5
    False
    1 <= 1 + (-func_number_1(1)) - func_number_2() - 1 + 1
    None
  return 1
1
if True:
  1
  1
  if True:
    number_0
    if True:
      (-1)
      1
    else:
      number_0
      if False:
        if number_1 >= 1:
          1 % 1 - 1
          False
        else:
          number_1
          False
        if (-1) <= 1:
          None is None is None is None
          if number_2 + number_3 // 1 > 1:
            func_number_0()
          elif False :
            1 // number_0 % number_0 // 1
          else:
            func_number_0()
        else:
          1
          bool_0
          number_4
  elif bool_0 :
    if bool_1:
      number_0
      1 + 1 > 1
      number_3 = number_0 * number_0
      (-(-func_number_1((-1)) - 1)) % 1
    elif bool_2 :
      number_2 <= number_1
    number_5 = 1
  elif False :
    if (not False):
      number_5
      1 // 1
      number_4
    elif func_number_0() > number_6 or bool_3 :
      func_number_0()
  else:
    func_number_0()
    1
else:
  func_number_1(func_number_1(func_number_0() * number_0 % number_3 // (-number_2)))
  number_7 = 1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:(-1)
(-1)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0 = 1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
1
number_0 - number_1 % 1 + (-1)
1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
number_5:int = 1
number_6:int = 1
number_7:int = 1
number_8:int = 1
number_9:int = 1
number_10:int = 1
number_11:int = 1
number_12:int = 1
number_13:int = 1
bool_0:bool = False
bool_1:bool = False
bool_2:bool = False
bool_3:bool = False
bool_4:bool = False
bool_5:bool = False
def func_number_0(func_number_0_param_0: int) -> int:
  func_number_0_param_0:int = 1
  number_15:int = 1
  number_16:int = 1
  number_17:int = 1
  number_18:int = 1
  number_19:int = 1
  number_20:int = 1
  number_21:int = 1
  number_22:int = 1
  number_23:int = 1
  number_24:int = 1
  number_25:int = 1
  number_26:int = 1
  number_27:int = 1
  number_28:int = 1
  number_29:int = 1
  number_30:int = 1
  number_31:int = 1
  number_32:int = 1
  number_33:int = 1
  number_34:int = 1
  number_35:int = 1
  number_36:int = 1
  number_37:int = 1
  bool_6:bool = False
  bool_7:bool = False
  bool_8:bool = False
  bool_9:bool = False
  bool_10:bool = False
  bool_11:bool = False
  bool_12:bool = False
  bool_13:bool = False
  bool_14:bool = False
  bool_15:bool = False
  bool_16:bool = False
  bool_17:bool = False
  def func_number_3() -> int:
    bool_1 = func_bool_0()
    return 1
  def func_number_4() -> int:
    number_38:int = 1
    number_38 > func_number_8()
    func_number_6()
    1
    return func_number_0(func_number_4())
  def func_number_5() -> int:
    number_38:int = 1
    number_39:int = 1
    number_40:int = 1
    number_41:int = 1
    number_42:int = 1
    bool_18:bool = False
    def func_number_9(func_number_9_param_0: int) -> int:
      func_number_9_param_0:int = 1
      func_number_7()
      return func_number_9_param_0
    def func_bool_1(func_bool_1_param_0: bool) -> bool:
      func_bool_1_param_0:bool = False
      1
      return func_bool_1(bool_6)
    if False:
      1
    elif False :
      if False or func_bool_1(True):
        if True:
          number_38 = number_15
        else:
          number_39 = func_number_1(False, func_number_9(1), number_40, (-1))
      else:
        1 + number_41 - func_number_9(number_42) + func_number_3() % 1 * func_number_8() + 1 * number_2
        1 % (-number_40)
        func_number_5()
    else:
      None
      func_number_8()
    bool_18
    return 1
  def func_number_6() -> int:
    bool_18:bool = False
    if func_bool_0():
      bool_18 or True
    func_bool_0()
    func_none_1()
    return 1
  def func_number_7() -> int:
    def func_number_9() -> int:
      number_38:int = 1
      def func_number_10(func_number_10_param_0: int) -> int:
        func_number_10_param_0:int = 1
        number_40:int = 1
        number_41:int = 1
        number_42:int = 1
        bool_18:bool = False
        if bool_18:
          func_number_10(1)
          (-number_4)
          number_40
        else:
          1
          if func_number_9() >= number_15 - func_number_6() * 1 // number_41:
            None
            number_11 = (-1)
            number_3
            True
          func_number_9()
          None
          func_number_9()
        return number_42
      if True:
        1
      return number_38 * func_number_10((-1))
    True
    return func_number_9()
  def func_number_8() -> int:
    number_38:int = 1
    number_39:int = 1
    number_40:int = 1
    number_41:int = 1
    number_42:int = 1
    number_43:int = 1
    bool_18:bool = False
    if func_bool_0():
      1
      True or True
      number_38
    elif func_bool_0() :
      (-1) >= number_39
      number_7
      bool_18
      number_40 > number_23 or number_41 > func_number_7()
      if (not bool_0):
        func_number_6()
    elif True :
      1
    elif (not func_bool_0()) :
      (-number_42)
    number_43 = func_number_3()
    func_bool_0()
    number_12 = func_number_4()
    return number_13
  def func_none_1():
    def func_none_2():
      number_38:int = 1
      number_39:int = 1
      if func_bool_0():
        1
        1
      (-(-1))
      1 > number_38 * 1 or func_bool_0()
      number_39 = func_number_6()
      return func_none_1() is func_none_1() is None is func_none_0(1, 1) is None
    1
    func_number_2()
    return func_none_2()
  def func_bool_0() -> bool:
    bool_18:bool = False
    bool_19:bool = False
    None is func_none_0(func_number_5(), func_number_1(bool_18, func_number_2() + (-1), func_number_6(), 1))
    return bool_19
  1
  if number_13 < 1:
    if bool_6 or bool_7:
      if True:
        func_number_0(number_15) + func_number_1(1 // func_number_0(func_number_1(func_number_3() != (not 1 <= number_5), number_16, 1, 1 - func_number_4()) - (-func_number_4())) > 1, 1, func_number_5() - (-func_number_2()), number_17) - number_2
        None
        True
      else:
        bool_8
        1 // number_18
        func_number_2() - 1
        False
    elif True :
      1 * number_15 - func_number_5()
      if 1 > (-func_number_4()):
        1 + 1
        func_number_0(1)
        True
        False
      if False:
        None
    elif 1 <= 1 :
      (-func_number_1((not False), 1, 1, func_number_1(bool_9, number_7 % 1 // func_number_3(), 1, (-1))) % number_8)
    else:
      if True:
        func_number_6()
        bool_10 = True
        if number_1 % 1 // (-number_12) - number_17 % number_1 > 1:
          1
        else:
          if bool_5:
            number_19
          else:
            func_number_4() // 1
        1
        (not False)
      else:
        number_20
        if True:
          bool_11 = bool_12
        else:
          bool_12 = True
          number_1 = 1 + number_21
        if True:
          number_11
        elif (not (not False)) :
          number_22 = 1
          number_23
        else:
          func_number_5()
          number_24 = (-1) % number_1
    number_25
    if bool_13:
      number_26
      1
  else:
    if True:
      if True:
        True
        1
        func_number_5()
        number_27 * 1 % (-(-func_number_4() % number_28))
      elif False :
        if func_bool_0():
          number_21 - func_number_0(func_number_3())
      else:
        if 1 > 1:
          bool_14 = (not 1 > func_number_2() - number_21)
          func_number_7()
          if False:
            if func_bool_0():
              (not bool_15)
            else:
              bool_16 = func_bool_0() or False
          else:
            number_29 = number_30
            number_12
            True
          if bool_11:
            1
            1 // 1
          elif func_bool_0() :
            False
          else:
            1
          None is func_none_1() is None is None
          number_2
        else:
          1
          (-1)
        1
      func_number_7()
    elif 1 + 1 > func_number_6() :
      bool_6
      func_number_8()
    1
    1
  (-1)
  False
  if bool_3:
    bool_17
  else:
    if (-number_31) - 1 + func_number_8() - 1 + (-number_32 % 1) % func_number_7() * number_11 == 1:
      1
    else:
      if number_26 <= func_number_0(1):
        1
      elif number_33 < number_34 :
        number_1 - number_17
    func_number_2()
  1 > number_35
  1 + number_36
  number_37 = number_17 - (-1 - func_number_0(1))
  (-1)
  return 1
def func_number_1(func_number_1_param_0: bool, func_number_1_param_1: int, func_number_1_param_2: int, func_number_1_param_3: int) -> int:
  func_number_1_param_1:int = 1
  func_number_1_param_2:int = 1
  func_number_1_param_3:int = 1
  func_number_1_param_0:bool = False
  True
  return (-1 + 1) - func_number_2()
def func_number_2() -> int:
  1
  1
  if bool_0:
    func_number_2()
    number_4 * 1 * number_9
  return (-(-1))
def func_none_0(func_none_0_param_0: int, func_none_0_param_1: int):
  func_none_0_param_0:int = 1
  func_none_0_param_1:int = 1
  number_16:int = 1
  number_17:int = 1
  number_18:int = 1
  number_19:int = 1
  number_20:int = 1
  bool_6:bool = False
  def func_number_3() -> int:
    number_21:int = 1
    number_22:int = 1
    number_23:int = 1
    number_24:int = 1
    number_25:int = 1
    number_26:int = 1
    number_27:int = 1
    bool_7:bool = False
    bool_8:bool = False
    bool_9:bool = False
    bool_10:bool = False
    1 - 1 % number_21
    number_22 // 1
    if number_9 == bool_7:
      func_number_3()
    elif 1 >= number_6 :
      number_23
    else:
      if False:
        number_24
        (not bool_8)
      elif func_number_0(func_number_2() % (-1)) - (-1) > 1 :
        True
        func_number_0(1)
        (-1 // 1)
      elif bool_3 :
        if number_25 < 1:
          1 * (-number_26) <= 1
        else:
          if (-(-1)) > 1:
            func_number_4()
            number_8 = 1 // 1
            None
          else:
            if (not False):
              bool_9 = True
            else:
              (-func_number_1(False == 1 * 1, 1, (-1 % 1) + func_number_2() % func_number_2(), 1))
            number_27
          bool_1 or (not (not False))
        None
      elif bool_10 :
        number_27 = 1
    return 1
  def func_number_4() -> int:
    number_21:int = 1
    func_number_1(True, 1 * (-number_21) // (-func_number_4()) % func_none_0_param_0 % (-func_number_3() * 1), (-(-1)), 1) * (-1)
    return (-func_number_0(1))
  (-number_12 // func_number_1(bool_6 or False == 1, number_16, number_0, (-func_number_2())))
  func_number_2()
  bool_3
  if number_17 < 1:
    1
  elif bool_6 :
    (not True)
    func_number_0(1)
  elif False :
    func_number_0((-func_number_2() + (-number_18 + func_number_3())) + func_number_1(True, number_10, func_number_1(1 != number_7, 1, number_17, 1), func_number_2()))
    bool_4
    func_number_1((-1) != 1, 1 % 1, 1 - func_number_4(), 1 - number_19)
  number_20
  return None
1
1
1
number_0 + 1
if bool_0:
  number_0 + 1 + 1 == number_1
  (-(-1 // 1 // number_2) * 1)
  (-1)
  1
  func_number_0(1)
  if True:
    if False:
      bool_1 = False
  else:
    if False:
      if False:
        if bool_2:
          1
        else:
          bool_0
          func_number_1((not bool_1), number_3, 1, 1)
          None
    elif True :
      (-1 // (-1))
    number_4 = func_number_0(func_number_0((-(-func_number_1((not False or bool_3 == False), func_number_1(False, 1 // number_5, 1 // func_number_0((-1)), number_6), 1, number_7)))))
    number_8 = 1
    (not number_4 == None is None is None)
  (not (not bool_4))
  None
  (-1) % number_8 + 1
  1
None is None is None is None is None is None is None is func_none_0(1, number_9 + func_number_1(bool_5, 1, 1, 1)) is func_none_0(number_7 - (-func_number_1(True, 1 - func_number_0(number_10 + 1), number_11 * number_9, 1)), 1) is None is func_none_0(1, func_number_0(1 % func_number_1(False or True, 1, (-1), 1))) is func_none_0(func_number_2(), func_number_0(1)) is None is func_none_0(number_12, number_2) is None is func_none_0(number_13, 1) is None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
bool_0:bool = False
number_0
bool_0
if bool_0:
  (not False)
False
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0 = (-1) % 1
if (not True):
  True
  number_0 + 1 % 1 // number_0 % 1
  True
elif False :
  (-(-number_0) % number_0 // 1)
  1
  True
else:
  1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0
False
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
bool_0:bool = False
bool_1:bool = False
def func_none_0():
  number_4:int = 1
  number_5:int = 1
  def func_none_1(func_none_1_param_0: int, func_none_1_param_1: int):
    func_none_1_param_0:int = 1
    func_none_1_param_1:int = 1
    def func_number_0() -> int:
      number_8:int = 1
      bool_2:bool = False
      if bool_2:
        number_2
      else:
        func_number_0() + func_number_0() + func_number_0() + number_8 - (-1) // 1
      return (-func_number_0())
    1
    func_number_0()
    return None
  bool_0
  number_1 = 1
  return func_none_1(1 - (-1), (-number_4)) is func_none_1(number_5 + (-1), 1)
number_0 = 1
None is None
None is func_none_0() is None
if number_0 * 1 >= 1 * (-1) or (not number_1 <= 1):
  (not (not True)) or False
  number_1 - number_2
  bool_0 = bool_1
number_3
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
bool_0:bool = False
def func_number_0() -> int:
  bool_1:bool = False
  if False:
    1
  else:
    bool_1 = True
  None
  return func_number_0()
number_0
number_0
number_1
if False:
  1
  if (not (not True)):
    1
  if 1 < func_number_0():
    True
  else:
    number_2 = 1
  False
  number_0 = func_number_0()
  1
  1 // func_number_0()
else:
  if False:
    None is None
    1
  1
  func_number_0() % number_3
  None is None
  1
bool_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
number_5:int = 1
number_6:int = 1
number_7:int = 1
number_8:int = 1
number_9:int = 1
number_10:int = 1
number_11:int = 1
number_12:int = 1
number_13:int = 1
bool_0:bool = False
bool_1:bool = False
bool_2:bool = False
bool_3:bool = False
bool_4:bool = False
bool_5:bool = False
bool_6:bool = False
bool_7:bool = False
def func_bool_0() -> bool:
  number_14:int = 1
  number_4 = number_14
  return True
def func_bool_1(func_bool_1_param_0: int, func_bool_1_param_1: bool) -> bool:
  func_bool_1_param_0:int = 1
  func_bool_1_param_1:bool = False
  func_number_1()
  return 1 - 1 >= 1 + number_8
def func_bool_2(func_bool_2_param_0: int) -> bool:
  func_bool_2_param_0:int = 1
  func_number_0()
  return func_number_1() != (-func_number_0()) or func_bool_0()
def func_number_0() -> int:
  def func_bool_3() -> bool:
    number_6
    True
    return False
  def func_number_2() -> int:
    number_14:int = 1
    number_15:int = 1
    number_16:int = 1
    bool_8:bool = False
    func_number_1()
    1
    func_bool_3()
    if False:
      func_number_1()
      (not (not func_bool_1(number_14 * 1 * func_number_0() % number_15 % 1, 1 == (-1))))
    elif True :
      if bool_8:
        if bool_0:
          False
        if 1 == func_number_1() % 1:
          number_4 = number_16
          1
    return func_number_0()
  if bool_2:
    if func_number_2() > 1:
      1
    else:
      func_bool_0()
      1 <= 1
    1 % (-1)
    None is None is None
  else:
    func_bool_0()
  True
  func_bool_3() != func_number_0()
  return 1
def func_number_1() -> int:
  1
  return func_number_1()
None
True
1 // number_0
if False:
  if False:
    if bool_0 != 1:
      bool_1
      bool_0
      if (-number_1) < 1 % number_0 - number_0:
        if True:
          None
        if (-number_2 - 1) == number_3:
          (-1 - 1)
        else:
          if (not bool_1) == 1:
            1
            1
          number_4
          1
          if (not 1 >= 1):
            1
          else:
            True
            1
            if bool_2:
              if bool_3:
                number_5 = 1 % 1
              else:
                1
                False
                None
        1
        False
    1
  else:
    bool_4 = True
    if True:
      func_bool_0()
      if number_6 < (-number_7) or (not bool_5):
        (-1)
        1
      else:
        number_0
        (not True) or func_bool_1(1, bool_6)
    number_7 = 1
  if False:
    (-1 // number_6 + 1 // 1 * number_8)
  elif True :
    number_9 // number_4 // number_8
    bool_4 = func_bool_2(1)
    1 // 1 + 1 // 1
    1 // 1 * number_0
  1
  if func_bool_2((-number_2)):
    number_10 = 1 % 1 * number_4 // 1
  else:
    if False:
      bool_0
    else:
      1 + number_4
      number_11
    if (not 1 != (-number_12 - (-1))):
      bool_4
      if func_bool_2(1 - (-number_13) + func_number_0() * 1):
        func_number_1()
      func_number_0()
    func_number_0()
  bool_7 = True
  func_number_0()
  True or False
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
bool_0 = True
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0
1 * 1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:def func_number_0() -> int:
  number_0:int = 1
  number_1:int = 1
  number_2:int = 1
  if True:
    1
    number_0
    func_number_0()
    if True:
      (-number_1 * number_1 // func_number_0()) < number_2
  return 1
def func_number_1() -> int:
  number_0:int = 1
  1
  return number_0
func_number_0() <= func_number_1()
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
bool_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
if (not 1 < 1):
  1 - (-(-number_0))
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
def func_bool_0() -> bool:
  number_3:int = 1
  number_4:int = 1
  number_3
  func_bool_0() or func_bool_0()
  (-1) - 1 * 1 - number_0
  number_4
  return False
None
number_0 = number_1 - (-1) // 1
number_0 = number_1 % number_1 - number_2
if func_bool_0():
  number_0
else:
  (-1)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
True
None
number_0 = number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
number_0:int = 1
def func_number_0() -> int:
  bool_1:bool = False
  bool_2:bool = False
  bool_3:bool = False
  number_1:int = 1
  number_2:int = 1
  number_3:int = 1
  number_4:int = 1
  def func_number_1() -> int:
    func_number_0()
    return 1
  if 1 != bool_0:
    1
    1
    number_0 = func_number_1()
    func_number_0()
    bool_0 = (-1) - (-number_1) == (not func_number_1() != (-(-1 % number_1 + 1)) - 1)
    if bool_1:
      (-func_number_0()) > 1 % number_0 * func_number_0() % (-1) + 1
      func_number_1()
  else:
    number_1
    if False:
      func_number_0()
      if func_number_1() * number_2 * 1 > number_1:
        (-1 // 1)
      elif True :
        1
        if bool_2:
          number_0
        elif (not True) or False :
          1
          1
        else:
          False
        1
      elif bool_0 :
        number_3 + 1
      bool_3
    else:
      func_number_1()
    number_3
    1
  1
  return number_4
bool_0
number_0
func_number_0() * func_number_0()
if True:
  func_number_0()
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0 = 1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:(-1)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:class class_0(object):
  pass
class_0_0:class_0 = None
class_0_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:class class_0(object):
  pass
number_0:int = 1
number_1:int = 1
class_0_0:class_0 = None
class_0_1:class_0 = None
def func_number_0() -> int:
  number_2:int = 1
  number_3:int = 1
  number_4:int = 1
  bool_0:bool = False
  if False:
    func_number_0()
    if bool_0:
      if True:
        number_1 = number_2
  else:
    1
  number_3 - 1 // 1 // 1 // number_0
  1 <= 1
  number_1 * 1 % func_number_0() >= func_number_0() * 1
  if 1 > number_3:
    number_0 = number_4
  return 1
1 % func_number_0() * number_0
func_number_0()
number_1 = func_number_0()
1 > 1
1 + 1
1
number_1
class_0_0 = class_0_1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:None is None is None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
bool_1:bool = False
number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
def func_bool_0() -> bool:
  1
  if bool_1:
    number_1
  else:
    func_bool_0()
  1
  return False
1
bool_0 = 1 // number_0 > number_1
if True:
  if (-1) > 1:
    number_2 % 1 % 1
  else:
    number_2 = number_3
    False
bool_1
(not func_bool_0())
None
number_1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
bool_0:bool = False
bool_1:bool = False
def func_bool_0(func_bool_0_param_0: bool) -> bool:
  func_bool_0_param_0:bool = False
  bool_3:bool = False
  None
  1
  return bool_3
if False:
  number_0 % (-1) // (-1)
  if False:
    1
    (-1 + 1 + 1 - 1)
else:
  False
  if bool_0:
    1
    number_0
  else:
    if bool_0:
      if False:
        number_0 = 1
      elif (not True) :
        func_bool_0(bool_1)
        1
        1
    else:
      False
    func_bool_0(1 % 1 + number_0 // (-1 - (-number_0) * 1 - 1) // 1 >= number_0)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
number_5:int = 1
number_6:int = 1
number_7:int = 1
def func_none_0():
  number_8:int = 1
  def func_number_0() -> int:
    number_9:int = 1
    number_10:int = 1
    number_11:int = 1
    number_12:int = 1
    number_13:int = 1
    number_14:int = 1
    number_15:int = 1
    number_16:int = 1
    number_17:int = 1
    number_18:int = 1
    number_19:int = 1
    number_20:int = 1
    number_21:int = 1
    number_22:int = 1
    number_23:int = 1
    number_24:int = 1
    number_25:int = 1
    number_26:int = 1
    number_27:int = 1
    number_28:int = 1
    number_29:int = 1
    number_30:int = 1
    number_31:int = 1
    number_32:int = 1
    number_33:int = 1
    number_34:int = 1
    number_35:int = 1
    number_36:int = 1
    number_37:int = 1
    number_38:int = 1
    number_39:int = 1
    number_40:int = 1
    number_41:int = 1
    bool_0:bool = False
    bool_1:bool = False
    bool_2:bool = False
    bool_3:bool = False
    bool_4:bool = False
    bool_5:bool = False
    bool_6:bool = False
    bool_7:bool = False
    bool_8:bool = False
    bool_9:bool = False
    bool_10:bool = False
    def func_number_1(func_number_1_param_0: int, func_number_1_param_1: int) -> int:
      func_number_1_param_0:int = 1
      func_number_1_param_1:int = 1
      number_44:int = 1
      number_45:int = 1
      number_46:int = 1
      number_47:int = 1
      number_48:int = 1
      number_49:int = 1
      number_50:int = 1
      bool_11:bool = False
      def func_number_8(func_number_8_param_0: int, func_number_8_param_1: bool) -> int:
        func_number_8_param_0:int = 1
        number_52:int = 1
        number_53:int = 1
        func_number_8_param_1:bool = False
        func_number_8(number_47, False)
        1
        True
        number_52
        return 1 * func_number_8(func_number_2(func_number_6(func_number_3(1), (-1 % 1) - number_53)), True)
      def func_bool_6() -> bool:
        bool_12:bool = False
        bool_12
        1
        return True
      if func_number_0() != number_24 - 1 - 1 - 1 * (-(-1)):
        bool_4
        (-1) + number_33
        number_44 = func_number_0()
      if func_bool_1(1, True):
        number_45
        number_5 // func_number_7()
      if func_bool_6():
        if func_bool_4(number_32, number_5):
          number_46 % number_47 + number_1
        if True:
          (-func_number_0() * (-1))
        elif func_bool_1(func_number_7() + 1, func_bool_1(1, number_48 <= 1 * 1 % 1)) :
          if True:
            (-1) + 1
            number_40 = number_23
            1
          else:
            1
            number_19
            func_number_5()
        func_number_3(1)
        True
        (not False)
        func_number_0()
        func_number_5() > func_number_5() % 1 // (-(-func_number_1(1, func_number_3(1) // (-1))))
      else:
        bool_8 = bool_11
        False
        number_8
      number_49 = number_50
      return func_number_1(func_number_8(1, bool_1), 1)
    def func_number_2(func_number_2_param_0: int) -> int:
      func_number_2_param_0:int = 1
      bool_11:bool = False
      False
      bool_11
      return func_number_5()
    def func_number_3(func_number_3_param_0: int) -> int:
      func_number_3_param_0:int = 1
      1 % 1 // func_number_1(1, number_6)
      return number_30
    def func_number_4() -> int:
      number_42:int = 1
      number_43:int = 1
      1
      number_42 = func_number_0() * number_25
      return (-number_43 // 1)
    def func_number_5() -> int:
      number_42:int = 1
      bool_11:bool = False
      bool_12:bool = False
      bool_13:bool = False
      bool_14:bool = False
      number_33
      bool_11 = False
      if bool_1:
        (-1 // (-1))
      else:
        bool_1 = bool_12
        (-func_number_0() // number_7)
        1
        bool_12 = bool_13
      1 % number_42
      1 % 1
      bool_14
      return 1 * (-1)
    def func_number_6(func_number_6_param_0: int, func_number_6_param_1: int) -> int:
      func_number_6_param_0:int = 1
      func_number_6_param_1:int = 1
      1 // func_number_7() - 1 > number_11
      return number_2
    def func_number_7() -> int:
      number_42:int = 1
      number_43:int = 1
      number_44:int = 1
      number_45:int = 1
      bool_11:bool = False
      bool_12:bool = False
      bool_13:bool = False
      def func_number_8(func_number_8_param_0: bool) -> int:
        number_46:int = 1
        number_47:int = 1
        number_48:int = 1
        number_49:int = 1
        number_50:int = 1
        func_number_8_param_0:bool = False
        bool_15:bool = False
        bool_16:bool = False
        def func_bool_6(func_bool_6_param_0: int) -> bool:
          func_bool_6_param_0:int = 1
          number_52:int = 1
          number_53:int = 1
          number_54:int = 1
          number_55:int = 1
          number_56:int = 1
          number_57:int = 1
          number_58:int = 1
          number_59:int = 1
          number_60:int = 1
          number_61:int = 1
          number_62:int = 1
          number_63:int = 1
          number_64:int = 1
          number_65:int = 1
          number_66:int = 1
          number_67:int = 1
          number_68:int = 1
          number_69:int = 1
          number_70:int = 1
          number_71:int = 1
          number_72:int = 1
          number_73:int = 1
          number_74:int = 1
          number_75:int = 1
          number_76:int = 1
          number_77:int = 1
          number_78:int = 1
          number_79:int = 1
          number_80:int = 1
          number_81:int = 1
          number_82:int = 1
          number_83:int = 1
          number_84:int = 1
          number_85:int = 1
          number_86:int = 1
          number_87:int = 1
          bool_17:bool = False
          bool_18:bool = False
          bool_19:bool = False
          bool_20:bool = False
          bool_21:bool = False
          bool_22:bool = False
          def func_number_9(func_number_9_param_0: int) -> int:
            func_number_9_param_0:int = 1
            number_89:int = 1
            number_90:int = 1
            number_91:int = 1
            bool_23:bool = False
            1
            func_number_1(func_number_8(func_bool_8(func_number_1(number_89, number_90), True)) * 1 + (-func_number_2(1 + func_number_12((not func_bool_9(func_number_4(), number_91)), bool_23, func_number_5()) + func_number_4())), func_number_10())
            return number_11
          def func_number_10() -> int:
            1 > 1
            return func_number_5()
          def func_number_11(func_number_11_param_0: int) -> int:
            func_number_11_param_0:int = 1
            number_89:int = 1
            def func_number_15() -> int:
              1
              return 1
            func_number_8(1 * func_number_15() > number_41)
            return 1 % (-1) % number_89
          def func_number_12(func_number_12_param_0: bool, func_number_12_param_1: bool, func_number_12_param_2: int) -> int:
            func_number_12_param_2:int = 1
            func_number_12_param_0:bool = False
            func_number_12_param_1:bool = False
            False
            return number_11
          def func_number_13() -> int:
            number_88:int = 1
            number_89:int = 1
            number_90:int = 1
            def func_number_15() -> int:
              number_91:int = 1
              number_92:int = 1
              number_93:int = 1
              number_94:int = 1
              number_95:int = 1
              number_96:int = 1
              number_97:int = 1
              number_98:int = 1
              number_99:int = 1
              number_100:int = 1
              number_101:int = 1
              number_102:int = 1
              number_103:int = 1
              def func_number_16(func_number_16_param_0: int) -> int:
                func_number_16_param_0:int = 1
                number_105:int = 1
                number_106:int = 1
                number_107:int = 1
                bool_23:bool = False
                1 // func_number_6(func_number_9(number_3), 1)
                bool_23 = func_bool_6(number_97)
                func_number_14(1, (-func_number_9(number_105) * 1), 1, func_number_17(), 1 - 1)
                number_23 <= number_106 - 1
                return number_105 + number_107
              def func_number_17() -> int:
                1
                return 1
              def func_bool_10() -> bool:
                number_104:int = 1
                number_105:int = 1
                number_106:int = 1
                bool_23:bool = False
                bool_24:bool = False
                def func_number_18(func_number_18_param_0: int, func_number_18_param_1: int) -> int:
                  func_number_18_param_0:int = 1
                  func_number_18_param_1:int = 1
                  number_109:int = 1
                  number_110:int = 1
                  number_25 = number_75 % func_number_14((-1) // number_109, func_number_17(), number_43, 1, 1 + 1 % number_110) - 1 * 1
                  if 1 == 1:
                    number_101
                  else:
                    (-(-func_number_4() * number_23))
                    (-number_18)
                    False
                  True
                  return 1
                False or func_bool_4(func_number_10(), func_number_12(True, bool_23, number_14 - func_number_15()))
                if (not bool_3 or (not func_bool_9(1, func_number_9(number_31)))):
                  if False:
                    (-(-1)) - 1 - number_104
                    if func_bool_2(number_105):
                      number_97 = (-1)
                    else:
                      number_13 = 1
                      number_106
                      func_number_15()
                  True
                  if bool_24:
                    if func_bool_2(1):
                      number_4 = func_number_12((not func_bool_10()), True, number_72)
                      False
                      True
                    else:
                      func_number_0()
                  func_number_18(func_number_13() + func_number_4(), func_number_17())
                return True
              number_91 = number_92 % number_93 * func_number_16(number_94 + func_number_6((-func_number_15() * 1), number_95 // number_96) * 1) + 1
              func_bool_4(number_97, 1 % func_number_16(func_number_2(func_number_6(func_number_9((-number_93)), func_number_9(1)) + 1)))
              if True:
                1
                if func_bool_10():
                  number_10
                else:
                  number_64
              func_bool_6(1) or func_bool_4(func_number_14(func_number_16(1), func_number_11((-1) * 1 % (-(-func_number_5())) % (-number_98)), 1, 1, func_number_3(number_16)), number_99)
              if True:
                number_56
              elif bool_17 :
                func_number_17()
                1
              else:
                if 1 > func_bool_6_param_0:
                  if False:
                    number_94
                    number_100 = (-1)
                    if True:
                      (not bool_7)
                      number_101
                    else:
                      func_bool_8(1, True)
                else:
                  1 == bool_19
              number_85 = 1
              func_number_6(func_number_14(number_102, func_number_2((-1 - 1 + 1 % 1)), 1, (-func_number_9(number_54)), 1 - func_number_8(False)), 1 % func_number_11(1) % number_103)
              return 1
            1 * func_number_12((not False) != 1, func_bool_4((-number_52), func_number_14((-1), number_78 - func_number_9((-func_number_15())), (-(-number_88)) - func_number_5(), func_number_4() // func_number_13(), number_21) * func_number_6(number_86 - 1 + 1, 1)), 1 % 1) + func_number_2(1) - number_81 - func_number_0()
            number_73
            if func_bool_2((-1)):
              number_89 = number_90
            return 1
          def func_number_14(func_number_14_param_0: int, func_number_14_param_1: int, func_number_14_param_2: int, func_number_14_param_3: int, func_number_14_param_4: int) -> int:
            func_number_14_param_0:int = 1
            func_number_14_param_1:int = 1
            func_number_14_param_2:int = 1
            func_number_14_param_3:int = 1
            func_number_14_param_4:int = 1
            (-1)
            func_number_7()
            None
            return (-1)
          def func_bool_7(func_bool_7_param_0: int, func_bool_7_param_1: bool) -> bool:
            func_bool_7_param_0:int = 1
            number_89:int = 1
            number_90:int = 1
            number_91:int = 1
            number_92:int = 1
            number_93:int = 1
            func_bool_7_param_1:bool = False
            bool_24:bool = False
            bool_25:bool = False
            bool_26:bool = False
            bool_27:bool = False
            bool_28:bool = False
            bool_29:bool = False
            bool_30:bool = False
            def func_number_15() -> int:
              number_40
              func_number_4()
              return 1
            if (not (not bool_7)):
              number_24
            else:
              bool_24
              if func_bool_4(1, func_number_2(1) - func_number_3(func_number_11(1)) // func_number_3(1 * func_number_15() // func_number_11(1 * func_number_15())) % 1):
                True
              else:
                True
                bool_10
                if True:
                  if (not bool_25):
                    if func_bool_6(1):
                      bool_26 = bool_27
                      func_number_2(1 % func_number_2((-number_14)))
                      number_89 = 1 * number_90 * number_91
                      if True:
                        1
                        func_number_6(1 + func_number_8(func_bool_7_param_1), (-(-1)))
                      if True:
                        if (not True):
                          number_66
                        else:
                          number_92 * 1
                        1 % number_54
                        number_47 = number_93
                        if False:
                          1
                        else:
                          None is None is None
                          1
                      1
                      1
                    else:
                      func_number_7()
            if bool_28:
              func_none_0()
              if bool_16:
                (-1)
                bool_29 = True
              else:
                1 // func_number_1(func_number_9((-(-1))), 1)
                None is func_none_0() is func_none_0() is None
            return bool_30
          def func_bool_8(func_bool_8_param_0: int, func_bool_8_param_1: bool) -> bool:
            func_bool_8_param_0:int = 1
            number_89:int = 1
            number_90:int = 1
            func_bool_8_param_1:bool = False
            number_89 = number_90
            1
            return bool_3
          def func_bool_9(func_bool_9_param_0: int, func_bool_9_param_1: int) -> bool:
            func_bool_9_param_0:int = 1
            func_bool_9_param_1:int = 1
            number_90:int = 1
            number_14 = number_90 % number_54
            number_76
            return True
          number_33
          1
          number_41
          if func_bool_7(1, True) or bool_15:
            None
            if False:
              number_29 * (-(-1))
              number_52 = func_number_2(number_53 + func_number_5())
              func_number_1(number_54 * 1 % number_17 // 1 + number_55 + func_number_4(), 1) % func_number_4()
            if func_bool_6(1 * func_number_2((-func_number_4())) // number_56):
              if False:
                1
                if True:
                  1
                  if True:
                    bool_7 = bool_17
                  number_57 >= 1 or bool_9
                if True:
                  func_number_3(1 - 1 // 1 - func_number_2(func_number_4()) - 1 % 1 * 1 - func_number_6(number_38, func_number_5())) // func_number_8(bool_10) + func_number_7()
                  if (not func_bool_5()):
                    number_10
                  else:
                    1
                    if True:
                      if (not func_bool_4(1, 1)):
                        number_58
                      if number_28 + 1 + number_34 * number_33 // number_57 % number_30 // number_59 >= number_4:
                        1 * func_number_0() % func_number_1(1, number_60) % (-(-1 // number_60) * 1 % number_61 % (-1) * number_62)
                        if bool_4 or (not True):
                          number_63
                          number_64
                        else:
                          number_23
                      else:
                        func_number_1(number_60, 1 % func_number_3((-1) * func_number_5()))
                      if (not True):
                        1
                      else:
                        func_number_8(func_bool_2(1))
                        func_number_8(bool_18)
                        number_61
                      if bool_8:
                        1 % 1
                      else:
                        if (not True):
                          (-(-func_number_3(func_number_7())) * 1)
                        None
                        number_65
                        func_number_4()
                  if False:
                    1
                    1
                    if True:
                      if func_bool_4(1, number_66 - 1):
                        func_number_6(func_number_2(func_number_5()), func_number_9(func_number_9((-func_number_2((-number_67)))) + 1 + number_46))
                        1
                        (-func_number_8(bool_19))
                        False
                        number_68 + (-1)
                      elif False :
                        1
                        1
                        number_69
                        func_number_9(1)
                        number_70 = (-number_71)
                        number_4 = func_number_2(1)
                        (-func_number_10())
                      else:
                        1 * 1 % func_number_2((-func_number_10()) + 1) * 1 - func_number_0() - (-number_56) // (-func_number_4()) - 1 - (-(-1))
                      if True:
                        if True:
                          number_52
                        else:
                          number_72 = func_number_9(func_number_8(func_bool_6(number_73)))
                          if func_bool_5():
                            True
                            func_number_1(number_59 * 1 % func_number_6(number_29, func_number_3(1)) * func_number_4(), (-(-1) % 1) % func_number_5())
                            number_28 = 1
                            number_74 = func_number_2(func_number_11(1 // number_26) * number_75 // 1)
                            func_bool_0()
                          else:
                            number_76 = number_77
                        func_bool_0()
                        1
                      if bool_12:
                        number_68 * func_number_6(1 % number_78 + (-(-1 + 1) // 1) - number_31 // (-func_number_3(1)) * number_79 % func_number_5() * (-number_7), func_number_11(1 * 1))
                      elif func_number_4() // func_number_10() <= func_number_2(number_21) :
                        if True:
                          1
                          None
                        elif func_bool_3(func_bool_6(number_65 // 1)) :
                          func_bool_6_param_0
                        elif (not func_number_10() > func_number_9((-(-1)))) :
                          None
                          func_number_8(func_bool_8(1 * number_80, False))
                        else:
                          func_number_3(number_80) + func_number_7() - 1
                        1
                  1 == bool_20
                  number_81 - func_number_3(number_17)
                  bool_10
                  func_number_10()
                bool_17
                func_number_4()
              func_number_0()
            if number_82 + (-func_number_2((-number_72))) <= number_25:
              if func_bool_2(1):
                func_number_2(1)
              else:
                bool_21 = True
                1 * 1
              (-(-1) // 1)
              1
              func_number_12(True, func_bool_6((-func_number_9(1 // 1))), 1 + 1)
            if func_bool_1(1, func_bool_9(func_number_13(), 1)):
              number_83 - 1 % func_number_1(number_84, number_14)
            elif True :
              number_85 = number_26
            else:
              1
            False
          else:
            1
            func_number_4()
          1
          1 * number_86
          return func_bool_4(func_number_7(), (-func_number_3(1) - func_number_14(1, 1, 1, func_number_1(1, func_number_8(False)) * number_87, 1) % func_number_8(bool_22)))
        bool_9
        if 1 <= number_46 % func_number_8(False) or bool_15:
          if bool_8:
            if func_none_0() is None is None != bool_16:
              number_47 = number_45 % 1
        elif func_bool_6((-number_48) % number_49 // number_50) :
          True
        bool_15 = True
        return 1
      bool_11
      number_42 = (-1)
      (-number_43)
      if (not func_bool_1(number_44, bool_12 or bool_13)):
        (-(-(-number_3 + 1) + (-func_number_7())))
        (-func_number_7()) == 1
      1
      return func_number_8(1 > number_45) + (-(-1 % func_number_2((-1))) * func_number_3(func_number_4()))
    def func_bool_0() -> bool:
      True
      1
      1
      return 1 < number_9
    def func_bool_1(func_bool_1_param_0: int, func_bool_1_param_1: bool) -> bool:
      func_bool_1_param_0:int = 1
      number_43:int = 1
      number_44:int = 1
      func_bool_1_param_1:bool = False
      1 - func_number_6(1, number_9) + 1
      return 1 < number_29 - number_43 + (-1) // number_44
    def func_bool_2(func_bool_2_param_0: int) -> bool:
      func_bool_2_param_0:int = 1
      number_43:int = 1
      number_29 + func_number_2(1 + func_number_4() % number_43 // func_number_0())
      return True
    def func_bool_3(func_bool_3_param_0: bool) -> bool:
      number_42:int = 1
      number_43:int = 1
      number_44:int = 1
      func_bool_3_param_0:bool = False
      bool_12:bool = False
      def func_number_8() -> int:
        func_number_4()
        1
        return func_number_3(func_number_0() - 1)
      if func_bool_0():
        if False:
          number_30 = 1 // 1
      elif func_bool_3(func_bool_3((not func_number_1(1, func_number_3((-func_number_6(func_number_7(), (-number_42))))) > 1 % func_number_0() - number_12))) :
        if False:
          if func_bool_2(1):
            func_number_0()
          else:
            True
            func_number_7()
        elif (not 1 != 1) :
          if 1 > number_42 + 1 // 1:
            1
          number_43 = 1
          if (not func_number_8() - 1 - 1 + number_44 < (-1) - func_number_8()):
            number_30 > number_6
          elif 1 // (-1) > 1 // func_number_8() :
            number_4
        else:
          bool_12
        1
        number_7
      func_bool_4(number_11, func_number_5())
      return False
    def func_bool_4(func_bool_4_param_0: int, func_bool_4_param_1: int) -> bool:
      func_bool_4_param_0:int = 1
      func_bool_4_param_1:int = 1
      bool_11:bool = False
      bool_12:bool = False
      def func_number_8() -> int:
        number_44:int = 1
        number_35 * number_44 * (-number_8)
        return 1
      func_number_4()
      if bool_9:
        if True or True:
          True
          None
          func_bool_4_param_0 = 1
      elif bool_11 :
        if False:
          func_bool_3(bool_12)
      else:
        func_number_3(func_number_8())
      func_number_3(1)
      func_number_1(func_number_4(), 1)
      return True
    def func_bool_5() -> bool:
      number_42:int = 1
      number_31 = number_42
      if func_none_0() is None is None == False:
        number_1
      return func_bool_2(1)
    None
    if bool_0:
      1
    else:
      1
    1
    func_number_0()
    bool_0 = (not bool_0)
    number_9
    if number_8 > number_10 + number_4:
      bool_1 = bool_2
    else:
      1
      if True:
        if number_11 > 1 * func_number_0():
          number_12
        if number_7 >= 1:
          1 > (-1)
      else:
        if True:
          number_13 - 1 + 1
          func_number_0()
          False
        elif True :
          func_bool_0()
          (not True)
        else:
          if True:
            bool_0 = True
            number_0 + 1 - (-1)
            func_number_1(func_number_0(), number_10 + number_14 // 1 * 1 % func_number_1(1, func_number_0()))
            1 % number_6
          elif func_bool_0() :
            False
            func_number_0() == (-(-1 // number_9 + (-(-func_number_0()))))
            1 > func_number_0()
          else:
            1
            (-number_0)
            func_bool_0() or number_6 < 1
          if bool_3:
            number_1 = (-func_number_0() - 1)
          elif (not bool_4) :
            if None == func_number_0():
              func_number_0()
            else:
              number_15 = 1 % 1
            number_9 = (-func_number_1(number_16, func_number_0()) + number_17 + number_18)
          else:
            if True:
              func_bool_0()
              (-number_19) * (-1)
            elif func_bool_0() :
              1
            (-func_number_1(1, func_number_2(func_number_2((-number_20))) - func_number_2(number_21 % func_number_2(func_number_1((-1), 1 % 1)) + number_22) - number_23))
            if func_bool_0():
              number_1 = (-1)
            else:
              func_bool_0()
            if True:
              func_number_0()
            number_24
          number_25 = 1 - number_20
      if bool_5:
        1
      if True:
        number_26 = (-(-1 - number_27 % func_number_0() // number_1 % func_number_2(func_number_0()) % number_17 * func_number_0() - func_number_0() % number_28))
        bool_6 = bool_1
        (-1 // number_29 // number_30)
        if bool_7:
          if (not func_number_1(func_number_2(func_number_0() + func_number_1(number_20, 1) * number_31 - func_number_0()), 1) < 1):
            number_12 = number_9
          (-1) >= func_number_1(func_number_1(1, number_26), number_22 % 1) + func_number_3(1)
          number_32 = func_number_1(func_number_0(), 1)
          number_33
        else:
          True
        if number_34 - 1 > number_8:
          if func_bool_1(1, bool_8):
            if False:
              number_16
              func_number_1(func_number_2(func_number_1(func_number_0(), number_35)), number_36 - func_number_4()) % func_number_2((-1))
            (-1)
            number_9
          func_number_5()
        elif bool_9 :
          True
          1
        1
      elif False :
        if False:
          bool_10
        elif False :
          if func_number_0() - number_37 > 1 // func_number_5():
            if (not func_bool_0()):
              1
          elif func_bool_2(func_number_1(1, 1) % number_15) :
            if func_bool_3(bool_3):
              bool_10
              if func_bool_4(1, (-1)):
                number_15
                if bool_4:
                  1
                  number_4 = 1 + func_number_4()
                elif False :
                  1
                else:
                  1
            else:
              func_number_5()
              1 + 1
          elif bool_4 :
            func_number_5() * (-func_number_6(1, 1 - func_number_6(number_38, (-1)) + 1 + func_number_3(1) % 1 + func_number_4()))
            number_33
          else:
            func_number_3(1 // func_number_4() % 1 // 1)
          number_39 >= func_number_3(1)
          if False:
            if func_bool_2(1):
              1
            elif True :
              func_number_4() - func_number_5()
            number_40
        else:
          func_bool_3(bool_2)
        func_bool_5()
        number_12
        func_number_6(func_number_6(func_number_3(1 % number_37), number_41 - func_number_7()), (-func_number_7()))
      else:
        func_bool_2(func_number_5())
        1
    return 1
  if True:
    1 > number_5 * number_8
  1
  1
  func_number_0() + (-1)
  return func_none_0()
func_none_0() is None is func_none_0()
if True:
  (-1)
  number_0
if False:
  False
else:
  number_1 = number_0 * number_2
  number_3 % number_4 // 1 // number_5 % 1 % 1 * 1
  number_5 = 1 * 1
  number_6 = 1
  False
  if True:
    number_0 = 1 - (-1) % 1 * 1
  if True:
    (not False) or True
    (-1) * (-(-(-number_5)))
  else:
    number_7
  number_4 // number_0 + 1
  1 % (-(-number_4))
  True
  1
True
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
bool_0:bool = False
def func_none_0():
  number_2:int = 1
  def func_number_0() -> int:
    number_3:int = 1
    number_4:int = 1
    number_5:int = 1
    number_6:int = 1
    number_7:int = 1
    number_8:int = 1
    number_9:int = 1
    number_10:int = 1
    number_11:int = 1
    number_12:int = 1
    number_13:int = 1
    number_14:int = 1
    number_15:int = 1
    number_16:int = 1
    number_17:int = 1
    number_18:int = 1
    number_19:int = 1
    number_20:int = 1
    number_21:int = 1
    number_22:int = 1
    number_23:int = 1
    number_24:int = 1
    number_25:int = 1
    number_26:int = 1
    number_27:int = 1
    number_28:int = 1
    number_29:int = 1
    number_30:int = 1
    number_31:int = 1
    number_32:int = 1
    number_33:int = 1
    number_34:int = 1
    bool_1:bool = False
    bool_2:bool = False
    bool_3:bool = False
    bool_4:bool = False
    bool_5:bool = False
    bool_6:bool = False
    bool_7:bool = False
    bool_8:bool = False
    def func_number_1(func_number_1_param_0: int, func_number_1_param_1: int) -> int:
      func_number_1_param_0:int = 1
      func_number_1_param_1:int = 1
      1
      return 1
    def func_number_2(func_number_2_param_0: int) -> int:
      func_number_2_param_0:int = 1
      number_36:int = 1
      def func_number_7() -> int:
        number_37:int = 1
        number_38:int = 1
        1 - number_37 > 1
        number_38 = 1
        return 1
      number_36 = func_number_1((-func_number_4(1)) % 1 + func_number_3() % func_number_3() % (-(-1)) * 1, 1)
      1 - number_18
      return func_number_7()
    def func_number_3() -> int:
      number_35:int = 1
      number_36:int = 1
      def func_number_7(func_number_7_param_0: bool, func_number_7_param_1: int) -> int:
        func_number_7_param_1:int = 1
        func_number_7_param_0:bool = False
        func_bool_2(number_5 // (-1) + (-func_number_5()) * 1, number_30)
        1 % (-number_25)
        True
        number_35
        1
        if 1 > number_16:
          number_15
        bool_5 = 1 <= 1
        func_bool_1()
        return (-1)
      func_number_4(1 - func_number_7((not (not False)), func_number_1(1, number_35 - func_number_1(number_36, (-1)) % 1)) + func_number_5()) + number_34
      return 1
    def func_number_4(func_number_4_param_0: int) -> int:
      func_number_4_param_0:int = 1
      number_22 = number_8
      return 1
    def func_number_5() -> int:
      1
      return func_number_2(1)
    def func_number_6() -> int:
      1
      return number_17
    def func_bool_0() -> bool:
      number_35:int = 1
      number_36:int = 1
      number_37:int = 1
      def func_number_7(func_number_7_param_0: int, func_number_7_param_1: int, func_number_7_param_2: bool) -> int:
        func_number_7_param_0:int = 1
        func_number_7_param_1:int = 1
        number_40:int = 1
        func_number_7_param_2:bool = False
        bool_10:bool = False
        bool_11:bool = False
        def func_number_9() -> int:
          1
          return 1
        if True:
          if number_6 <= 1 + func_number_9():
            True != func_none_0() is func_none_0() is None is None
            if bool_8 or False or (not func_bool_0()):
              bool_0
            else:
              bool_10
              if False:
                (not False)
                bool_8
              elif bool_8 :
                number_40
              elif number_29 >= 1 :
                1
                1
                1
          elif False :
            func_number_9()
          1
          bool_11 = func_bool_1()
        1
        number_27 - (-func_number_6()) * 1
        return 1
      def func_number_8() -> int:
        number_38:int = 1
        number_26
        return number_38
      number_27 = (-1 + (-number_35 + (-number_36)) % 1 * (-number_37 + number_25 * 1 // 1) // func_number_7(func_number_8(), 1, False) - 1)
      return False
    def func_bool_1() -> bool:
      bool_9:bool = False
      (-(-1))
      return bool_9
    def func_bool_2(func_bool_2_param_0: int, func_bool_2_param_1: int) -> bool:
      func_bool_2_param_0:int = 1
      func_bool_2_param_1:int = 1
      1 // (-(-number_2 * number_15))
      func_bool_2_param_0
      return True
    def func_bool_3() -> bool:
      number_35:int = 1
      number_36:int = 1
      number_37:int = 1
      def func_number_7() -> int:
        number_38:int = 1
        number_39:int = 1
        number_40:int = 1
        number_41:int = 1
        number_42:int = 1
        number_43:int = 1
        number_44:int = 1
        number_45:int = 1
        number_46:int = 1
        bool_9:bool = False
        if bool_2:
          number_38 // func_number_0() * 1 + number_39 * (-(-(-func_number_5())))
          1
          1 * 1
          1
        else:
          1
          if func_bool_2(number_40, func_number_6()):
            number_41 = func_number_5()
          else:
            if True:
              1
            elif bool_9 :
              if number_1 <= number_42 * (-func_number_5() + func_number_4(number_43)):
                1
                if 1 == number_43:
                  number_44 = func_number_5()
                  (-1)
                  number_4
              else:
                func_number_5()
          number_45 - 1 * (-number_5) + func_number_7()
        return number_46
      None is func_none_1(func_number_7(), func_bool_0(), 1, False, number_35) is func_none_0() is None is None
      number_25
      if True:
        number_7
      number_18
      (-number_36) - number_37
      return False
    if True:
      if bool_0:
        if True:
          if 1 != (-1) or False:
            if bool_1:
              if (-func_number_0()) <= 1 + number_2 // func_number_0():
                1 != 1
                number_1
                bool_2
              else:
                bool_3
                1
            number_0 = (-1 + number_0)
          else:
            1
          if False:
            number_1 % 1
            1
          else:
            number_3
            number_3 = (-func_number_0() % 1 + 1)
            False
            number_0
            if False:
              1 // 1 * 1
              bool_4
          func_number_0()
          False
          True
        else:
          1
          number_4
          (not func_bool_0())
          number_5 = 1
          number_5
          func_none_2()
          if False:
            if 1 >= number_1:
              number_2
              bool_4
            elif 1 <= 1 :
              if func_bool_0():
                bool_5
              else:
                number_6 % func_number_0()
                func_number_1(1 + (-1), number_7)
                1
                (-number_6)
                None
                (not True or (-1) <= (-func_number_2((-(-(-1))) % number_8) + func_number_1((-number_6), func_number_1(1, (-1))) - number_9) * (-number_10) % number_10 - func_number_2(number_11))
                (-(-1) // 1)
              func_number_0()
              number_12 = number_9
              if bool_3:
                func_number_0()
                if False:
                  1 + 1 // func_number_3()
                else:
                  number_5
              else:
                (-1) > 1
                None
                number_2 = (-number_5)
                1 + number_13
                None is func_none_1(1, True, number_14, 1 < 1, number_12)
                (-1) > 1
                number_15 = number_16
          1
          number_6
          1
      if False:
        if func_bool_0():
          None
          if bool_1:
            if 1 > func_number_3():
              bool_1
              if True:
                if func_bool_0():
                  1
                else:
                  if 1 // func_number_0() <= 1:
                    number_17 = func_number_0() * number_18 * (-func_number_0()) % number_16 * number_19 // number_8 + number_20 // 1 * (-1) % number_21 * number_7 // func_number_1(1 + 1 // func_number_1(number_22, number_3), (-1 * func_number_4(number_23)))
                  else:
                    if (not func_bool_0()):
                      if func_number_4(1 * 1) == None is func_none_2() is None:
                        (-(-(-1 % (-(-(-1)) * number_24))))
                      1
                    else:
                      if func_number_2(number_8) > 1:
                        (not 1 > number_22)
                      else:
                        1
                        func_bool_0()
                    bool_6
                    bool_5
                    1
                    (-1 - 1 - 1 % number_25 + 1 - number_26)
                    1
                func_bool_0()
              else:
                1
                1 + 1 * (-1 + 1)
            elif False :
              True
              number_6
              1
            else:
              number_24
              number_13
              if (not func_bool_0()):
                func_number_0()
              else:
                func_number_5()
                number_23 = (-(-number_21))
                number_21
                number_27 = 1
                number_28 = 1
                bool_7 = bool_3
                number_29
            1
          else:
            func_bool_1()
          if func_bool_1():
            1
            number_20 = 1
          elif 1 < func_number_1(func_number_0() // 1, number_30) * 1 + 1 :
            if bool_1:
              func_bool_2(1, func_number_1(1, (-number_31)))
          if False:
            1
          if True:
            if number_28 // 1 * 1 % 1 // number_32 > 1:
              1
              1
            else:
              number_5
              1 * number_33
          else:
            if True:
              bool_8
              bool_5
              1 > func_number_3()
            else:
              1
              number_0
              func_bool_3()
              func_number_1(func_number_2(func_number_2(number_25)), number_23)
        else:
          1 * 1
          True
        func_bool_1()
        number_30
      elif False :
        func_number_0() % func_number_2(func_number_1(1 * number_0, 1 * 1 % func_number_6() % 1 + func_number_2((-func_number_0()) % (-1))))
    else:
      func_number_5()
      func_bool_1()
    func_number_1(1, number_34)
    return 1
  if True:
    number_0
  return func_none_1(1, False, (-1), False or (not number_2 // func_number_0() == 1), 1) is None
def func_none_1(func_none_1_param_0: int, func_none_1_param_1: bool, func_none_1_param_2: int, func_none_1_param_3: bool, func_none_1_param_4: int):
  func_none_1_param_0:int = 1
  func_none_1_param_2:int = 1
  func_none_1_param_4:int = 1
  func_none_1_param_1:bool = False
  func_none_1_param_3:bool = False
  bool_3:bool = False
  func_none_1_param_2 = 1
  number_1
  bool_3
  return func_none_0()
def func_none_2():
  number_2:int = 1
  number_3:int = 1
  (-number_0 - number_2)
  number_3
  1
  number_1 + 1
  return None
None is func_none_0() is None is None is None is func_none_1(number_0, bool_0, (-1 * 1 - (-1) % 1 + 1), True, 1) is None
func_none_2() is None is func_none_1(1 % 1, 1 > number_0 + number_1, (-1), bool_0, 1)
None is None
False
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
number_0:int = 1
number_1:int = 1
number_2:int = 1
def func_bool_0(func_bool_0_param_0: int, func_bool_0_param_1: int, func_bool_0_param_2: int) -> bool:
  func_bool_0_param_0:int = 1
  func_bool_0_param_1:int = 1
  func_bool_0_param_2:int = 1
  func_bool_0_param_0
  return False
bool_0
1
number_0
False or func_bool_0(1, 1 * number_1, number_2)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:def func_number_0() -> int:
  number_0:int = 1
  number_1:int = 1
  def func_number_1(func_number_1_param_0: int) -> int:
    func_number_1_param_0:int = 1
    number_3:int = 1
    number_4:int = 1
    number_5:int = 1
    bool_0:bool = False
    bool_1:bool = False
    def func_number_2() -> int:
      number_6:int = 1
      number_7:int = 1
      func_number_1(1)
      (-number_4)
      if True:
        number_6
      return (-(-number_7))
    def func_none_0(func_none_0_param_0: int):
      func_none_0_param_0:int = 1
      number_7:int = 1
      number_7
      return func_none_1()
    def func_none_1():
      number_6:int = 1
      def func_number_3() -> int:
        number_7:int = 1
        (-1 - 1) == func_number_3()
        return number_7 % 1
      (-number_1 // 1) + 1 * number_1 % func_number_3()
      number_6 = 1
      return None
    (-number_0) % 1
    bool_0 = bool_0
    func_number_1(func_number_1(func_number_0() % number_0))
    1 // func_number_0()
    if False:
      None is None is None is None is func_none_0(1) is func_none_0(1) is None is func_none_1()
      (not 1 > func_number_1(number_0))
    elif bool_0 :
      1 + (-1 - (-1) * 1 + number_1 // func_number_1_param_0) - 1
      (-number_3)
    elif number_4 < func_number_0() :
      number_3 = func_number_1(1 // number_5 // 1 // func_number_1(number_5)) * (-func_number_2())
    else:
      bool_1 = bool_1
    return 1
  number_0 = 1 // 1
  1 + func_number_1(func_number_1(1)) > number_1
  return number_0
if False:
  func_number_0()
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:None
if True:
  1 + 1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
number_5:int = 1
if True:
  1
else:
  1 // 1
  if (not True):
    1 + 1
    number_0 - (-number_1)
    number_2
    1 * number_1 + number_3
    (-number_4)
  else:
    number_5
  if True:
    number_5 - number_1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
if False:
  (-1)
  1
else:
  number_0
  1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
number_5:int = 1
number_6:int = 1
number_7:int = 1
number_8:int = 1
def func_bool_0(func_bool_0_param_0: int) -> bool:
  func_bool_0_param_0:int = 1
  number_10:int = 1
  number_11:int = 1
  number_12:int = 1
  number_13:int = 1
  def func_number_1(func_number_1_param_0: int) -> int:
    func_number_1_param_0:int = 1
    number_15:int = 1
    bool_0:bool = False
    bool_0 = func_bool_0(number_15)
    return 1
  def func_number_2() -> int:
    number_14:int = 1
    number_15:int = 1
    1 > func_number_0(number_14, func_number_1(number_15))
    return 1
  number_10 = func_number_0(1, number_11 % func_number_0(func_number_0(1, func_number_0(func_number_0(1, func_number_0(1 % 1 // func_number_0(number_3 * 1, 1), func_number_1(func_number_1(1)) + 1 + number_12 + 1 // 1)) - func_bool_0_param_0 - 1, 1 + 1) + func_number_0(1, number_13)), (-func_number_1(func_number_2() // number_11) // number_10)))
  return True
def func_number_0(func_number_0_param_0: int, func_number_0_param_1: int) -> int:
  func_number_0_param_0:int = 1
  func_number_0_param_1:int = 1
  number_11:int = 1
  (-(-func_number_0_param_1 + 1) // 1)
  return number_11
def func_none_0(func_none_0_param_0: bool):
  number_9:int = 1
  number_10:int = 1
  number_11:int = 1
  number_12:int = 1
  number_13:int = 1
  number_14:int = 1
  number_15:int = 1
  number_16:int = 1
  number_17:int = 1
  number_18:int = 1
  number_19:int = 1
  number_20:int = 1
  number_21:int = 1
  number_22:int = 1
  number_23:int = 1
  number_24:int = 1
  number_25:int = 1
  number_26:int = 1
  number_27:int = 1
  number_28:int = 1
  number_29:int = 1
  number_30:int = 1
  number_31:int = 1
  number_32:int = 1
  func_none_0_param_0:bool = False
  def func_bool_1(func_bool_1_param_0: int, func_bool_1_param_1: int) -> bool:
    func_bool_1_param_0:int = 1
    func_bool_1_param_1:int = 1
    number_35:int = 1
    number_36:int = 1
    number_37:int = 1
    number_38:int = 1
    func_number_1(1 // (-number_35) + func_number_0((-(-func_number_0(func_number_2(number_5), func_number_4(number_0 // 1 * 1)) % number_17 * 1 * number_4)), func_number_0(number_36 * (-1) + number_29, 1)) * func_number_2(1)) // number_37
    1
    number_38
    return False
  def func_number_1(func_number_1_param_0: int) -> int:
    func_number_1_param_0:int = 1
    number_34:int = 1
    number_34
    return 1
  def func_number_2(func_number_2_param_0: int) -> int:
    func_number_2_param_0:int = 1
    number_34:int = 1
    number_35:int = 1
    def func_number_5(func_number_5_param_0: int) -> int:
      func_number_5_param_0:int = 1
      number_37:int = 1
      number_38:int = 1
      number_37
      return func_number_3((-number_38))
    func_none_0_param_0
    if True:
      1
    else:
      1
    1
    func_number_3(1)
    func_number_1(1)
    1
    return (-func_number_5(1 * number_32 // 1)) % 1 % number_34 % func_number_0(1, func_number_0(func_number_1(number_21 * (-number_35)), 1)) - 1 // 1
  def func_number_3(func_number_3_param_0: int) -> int:
    func_number_3_param_0:int = 1
    number_34:int = 1
    number_35:int = 1
    number_36:int = 1
    number_37:int = 1
    number_38:int = 1
    number_39:int = 1
    number_40:int = 1
    True
    if func_none_0_param_0 or func_bool_1(1 % number_34 * 1, 1):
      number_35 = number_36
      if func_none_0_param_0:
        number_9 = func_number_1(number_21 * number_37) // 1 - func_number_0(func_number_4(1), func_number_3(1))
        1
        number_38
      1
    else:
      (-1)
    if False == 1 or False:
      func_number_2((-func_number_1(1 % number_31) - 1 + func_number_3(1) // (-number_39 * 1)))
    else:
      1
      None is None
    func_number_3(1) + func_number_1(1)
    number_12
    return number_40
  def func_number_4(func_number_4_param_0: int) -> int:
    func_number_4_param_0:int = 1
    number_34:int = 1
    number_35:int = 1
    number_36:int = 1
    bool_1:bool = False
    if func_bool_0(number_32):
      bool_1 = bool_1
      if False:
        func_bool_1((-number_7), 1 * 1)
        bool_1
      else:
        if 1 == func_number_3(1) // number_34:
          1
        else:
          number_35 - 1
    return number_36 // func_number_2(number_36)
  number_9
  func_number_0((-func_number_0(func_number_0(func_number_0(1, 1), 1), 1)), func_number_0(1 - 1, func_number_0(func_number_0(1 + func_number_0(1, (-1)), 1), (-(-1 // number_10)))) // 1 * func_number_0(number_10, 1))
  if False:
    func_none_0((not 1 > func_number_0(func_number_0(number_11, (-(-number_12))), number_7) or (not number_13 > func_number_0(1 % 1, 1))))
    1
    if func_bool_0(number_5):
      number_14 = (-1 + number_9) % func_number_0(1 - number_3, 1) // 1 // 1
      if (not True):
        if func_bool_0(number_12):
          func_number_0(1, 1) % func_number_0(func_number_1(func_number_1(number_8)), number_8)
          if (not (not True)):
            number_15 % 1 + 1
            True
            (-number_10)
          elif True :
            number_16 = 1
          else:
            number_17
            if False:
              func_number_0(number_18 + 1 % 1, func_number_2(1) % func_number_1(func_number_2(1)))
              if 1 > 1:
                func_number_0(number_0, number_19) < number_20
                func_none_0_param_0
              elif True :
                func_none_0_param_0
                number_13
        else:
          func_bool_0(func_number_0(1, func_number_3(func_number_4(number_21)) * number_13))
        if func_none_0_param_0:
          number_8
          func_none_0((-number_13) % number_19 // number_11 <= 1) is None is func_none_0((not (not func_bool_1(1 * 1, number_22))))
          func_bool_1(1 % 1 // 1 - 1 + (-1 + number_0 + 1 % number_2) - 1, (-(-func_number_1(1))) % number_23 * 1 * number_24 % number_25)
          number_12 // 1 - number_26 // 1 // 1
          number_27 = func_number_4(number_28)
          func_none_0_param_0 = True
          1 % (-func_number_2((-number_5 % 1 + (-number_19))) * number_24)
          1 // number_29
        else:
          number_24
          (-func_number_4(func_number_4(1))) // number_30 - func_number_3(1) - func_number_4(1)
          if True:
            1
        1
      else:
        if True:
          func_number_2((-func_number_1(number_31 + 1)))
    else:
      func_none_0_param_0
    if func_none_0_param_0:
      if True:
        None
        number_32
        number_18 = 1 - number_22 + 1
        func_number_1(1)
      elif func_none_0_param_0 :
        False
        1
        (-number_7)
  if func_bool_0(func_number_1(1)):
    number_17 = 1
  else:
    1
  return None
if func_bool_0(1):
  if False:
    if func_bool_0(1 + number_0):
      1 % (-number_1)
      if func_bool_0(number_2):
        number_2
    else:
      1 % number_0 % (-1) % number_3 % number_3 // 1 - 1 // (-1 * 1 - 1 * func_number_0(func_number_0(number_0, 1 + (-(-1))), number_4)) % 1 * func_number_0(1, number_5 // number_6)
    number_7 = number_6
    None
  elif False :
    func_none_0(func_number_0(number_8, func_number_0(1, 1 - 1)) > number_3)
False
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
bool_0:bool = False
if 1 <= (-1):
  True
  number_0 = 1
elif 1 * 1 <= number_0 :
  if 1 > number_0:
    if bool_0:
      False
else:
  if (not 1 == 1 + 1):
    True or bool_0
  else:
    False
    1 < number_0
  number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
bool_1:bool = False
number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
def func_number_0() -> int:
  bool_2:bool = False
  if bool_0:
    1 % number_0 * func_number_0()
  elif 1 - 1 > number_2 :
    (not func_number_0() % (-func_number_0()) < (-func_number_0()))
    (not bool_2)
  return func_number_0()
None
if (not bool_0):
  if number_0 < func_number_0():
    if number_1 >= 1:
      if (not False):
        1
      elif (not True) :
        func_number_0() % 1
        1
        func_number_0()
        True
      number_2 = func_number_0()
      1
  elif (not bool_1) :
    bool_1
    if (not 1 > number_1):
      number_3
  elif bool_0 :
    func_number_0()
else:
  (-1) // (-(-1))
number_4 * 1 - 1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
bool_1:bool = False
number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
number_5:int = 1
number_6:int = 1
def func_bool_0() -> bool:
  number_7:int = 1
  number_8:int = 1
  def func_number_1(func_number_1_param_0: int) -> int:
    func_number_1_param_0:int = 1
    number_10:int = 1
    number_11:int = 1
    (-func_number_1(number_1 * 1 * func_number_0()))
    1 // number_10
    if False:
      if func_bool_0():
        (-1)
        (not func_bool_0())
      1
      (-(-number_11))
    else:
      func_number_1(func_number_0())
      1
    return 1
  if True:
    func_number_0()
    func_number_0()
    1
    number_1
    number_3 = number_2
  elif func_bool_0() :
    number_7 * 1
    func_number_1(number_8)
    (-1)
  else:
    (not func_bool_0())
  return True
def func_number_0() -> int:
  if number_1 != None is None:
    1
    bool_0 = True
  return number_5
if bool_0:
  False
elif True :
  if True:
    if func_bool_0():
      (-1) + number_0 - number_0
    else:
      1
      1 + number_1
      1
  elif bool_0 :
    1 // 1 % number_2
  elif 1 > (-1 - 1) * number_0 - 1 :
    None
  else:
    if func_bool_0():
      1
      1
      1
      number_3
      if 1 > number_4:
        (not bool_1) or True
        func_bool_0()
        number_0
    else:
      if func_bool_0():
        1
        bool_1 = bool_1
      elif func_bool_0() :
        False
      None is None
      if 1 > 1:
        number_5
        if func_bool_0() or 1 >= 1:
          func_number_0()
          number_2
        elif number_3 > 1 :
          number_1
        else:
          if bool_0 == 1:
            func_number_0()
            None
            1 > 1
          func_number_0()
      else:
        None
        number_0 > number_6
else:
  number_2 = 1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0 = 1
number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
number_5:int = 1
number_6:int = 1
bool_0:bool = False
def func_number_0(func_number_0_param_0: int, func_number_0_param_1: int) -> int:
  func_number_0_param_0:int = 1
  func_number_0_param_1:int = 1
  number_9:int = 1
  number_10:int = 1
  number_5 = (-1 + 1 - number_9 % func_number_0(1, 1) * (-1) // number_10 - number_2 + func_number_0(func_number_0(1 // (-number_4), 1) % 1 - (-1), (-1)) % (-(-1 - 1)))
  return func_number_0(1 * 1, 1)
func_number_0(number_0 % number_0, 1)
if (-1 - func_number_0(1, (-(-1 // number_1 // number_1))) * func_number_0(func_number_0((-(-1)), 1 // 1), func_number_0(func_number_0(1 + 1, func_number_0((-(-1)), func_number_0(number_1, func_number_0((-(-(-(-1)))), func_number_0(func_number_0(1 % 1, 1), 1))) + number_2 % number_3)), number_3))) // func_number_0(1, number_4) == bool_0:
  1
elif True :
  True
elif False or number_5 > func_number_0((-func_number_0(number_0, 1)), number_6) :
  1
  func_number_0(1, number_0 // 1)
  number_2
bool_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
number_5:int = 1
number_6:int = 1
number_7:int = 1
number_8:int = 1
number_9:int = 1
number_10:int = 1
number_11:int = 1
number_12:int = 1
number_13:int = 1
number_14:int = 1
number_15:int = 1
number_16:int = 1
number_17:int = 1
number_18:int = 1
number_19:int = 1
number_20:int = 1
number_21:int = 1
number_22:int = 1
number_23:int = 1
number_24:int = 1
number_25:int = 1
number_26:int = 1
number_27:int = 1
number_28:int = 1
number_29:int = 1
bool_0:bool = False
bool_1:bool = False
bool_2:bool = False
bool_3:bool = False
bool_4:bool = False
bool_5:bool = False
bool_6:bool = False
bool_7:bool = False
bool_8:bool = False
bool_9:bool = False
bool_10:bool = False
bool_11:bool = False
def func_none_0(func_none_0_param_0: int, func_none_0_param_1: bool):
  func_none_0_param_0:int = 1
  number_31:int = 1
  number_32:int = 1
  func_none_0_param_1:bool = False
  number_11 = 1
  1 % func_number_0()
  return func_none_0((-number_31 + 1 + func_number_0() * number_32), True)
def func_number_0() -> int:
  bool_12:bool = False
  def func_number_1() -> int:
    number_30:int = 1
    number_31:int = 1
    None
    number_30 = func_number_1()
    return 1 // number_31 % 1
  False
  func_bool_1(bool_6, bool_8, func_bool_1(bool_12, False, func_bool_0(), False, False, func_number_1(), True), True, (not func_bool_0()), 1, True)
  return func_number_1()
def func_bool_0() -> bool:
  number_30:int = 1
  number_31:int = 1
  number_32:int = 1
  bool_12:bool = False
  if bool_10:
    if False:
      if 1 > number_30:
        if func_bool_0():
          False
      1 - 1
    elif bool_12 :
      bool_1 = bool_12
  else:
    True
    func_number_0()
    if (not False):
      number_6 // func_number_0()
      1
    else:
      number_31 = (-number_32 - (-1)) + 1 - 1
      func_number_0() > number_29
  return func_bool_0()
def func_bool_1(func_bool_1_param_0: bool, func_bool_1_param_1: bool, func_bool_1_param_2: bool, func_bool_1_param_3: bool, func_bool_1_param_4: bool, func_bool_1_param_5: int, func_bool_1_param_6: bool) -> bool:
  func_bool_1_param_5:int = 1
  func_bool_1_param_0:bool = False
  func_bool_1_param_1:bool = False
  func_bool_1_param_2:bool = False
  func_bool_1_param_3:bool = False
  func_bool_1_param_4:bool = False
  func_bool_1_param_6:bool = False
  def func_number_1() -> int:
    number_31:int = 1
    number_32:int = 1
    number_33:int = 1
    number_34:int = 1
    number_35:int = 1
    number_36:int = 1
    number_37:int = 1
    number_38:int = 1
    number_39:int = 1
    number_40:int = 1
    number_41:int = 1
    number_42:int = 1
    number_43:int = 1
    bool_18:bool = False
    bool_19:bool = False
    bool_20:bool = False
    bool_21:bool = False
    bool_22:bool = False
    bool_23:bool = False
    bool_24:bool = False
    def func_number_2(func_number_2_param_0: int) -> int:
      func_number_2_param_0:int = 1
      def func_number_4(func_number_4_param_0: bool) -> int:
        number_45:int = 1
        number_46:int = 1
        number_47:int = 1
        number_48:int = 1
        number_49:int = 1
        number_50:int = 1
        number_51:int = 1
        number_52:int = 1
        number_53:int = 1
        number_54:int = 1
        number_55:int = 1
        number_56:int = 1
        number_57:int = 1
        number_58:int = 1
        number_59:int = 1
        number_60:int = 1
        number_61:int = 1
        number_62:int = 1
        number_63:int = 1
        number_64:int = 1
        number_65:int = 1
        number_66:int = 1
        number_67:int = 1
        number_68:int = 1
        number_69:int = 1
        number_70:int = 1
        number_71:int = 1
        number_72:int = 1
        number_73:int = 1
        number_74:int = 1
        number_75:int = 1
        number_76:int = 1
        number_77:int = 1
        number_78:int = 1
        number_79:int = 1
        number_80:int = 1
        number_81:int = 1
        number_82:int = 1
        number_83:int = 1
        number_84:int = 1
        number_85:int = 1
        number_86:int = 1
        number_87:int = 1
        func_number_4_param_0:bool = False
        bool_26:bool = False
        bool_27:bool = False
        bool_28:bool = False
        bool_29:bool = False
        bool_30:bool = False
        bool_31:bool = False
        bool_32:bool = False
        bool_33:bool = False
        bool_34:bool = False
        bool_35:bool = False
        bool_36:bool = False
        bool_37:bool = False
        bool_38:bool = False
        bool_39:bool = False
        bool_40:bool = False
        def func_number_5(func_number_5_param_0: int) -> int:
          func_number_5_param_0:int = 1
          number_89:int = 1
          number_90:int = 1
          number_91:int = 1
          number_92:int = 1
          number_93:int = 1
          number_94:int = 1
          number_95:int = 1
          number_96:int = 1
          bool_41:bool = False
          bool_42:bool = False
          def func_number_7(func_number_7_param_0: int, func_number_7_param_1: bool) -> int:
            func_number_7_param_0:int = 1
            number_98:int = 1
            func_number_7_param_1:bool = False
            number_31
            1
            return number_98 - 1 % 1 + 1 // 1 // 1 - 1
          def func_number_8(func_number_8_param_0: int) -> int:
            func_number_8_param_0:int = 1
            number_98:int = 1
            number_98
            return 1
          if 1 != func_number_0() - 1 + func_number_5(1 + func_number_7(number_78, func_bool_1_param_1) * func_number_2((-1)) + 1) > number_5:
            if True:
              (-1 * func_number_2(1 + number_89 - 1 + (-1) + func_number_8((-1))))
              number_90 = 1
              if func_bool_2():
                func_number_5(1 % 1)
                number_33 > number_91
                1 * 1
                func_bool_0()
              elif (not func_number_7(func_number_5(number_9), func_number_2(number_92) >= 1 % func_number_1()) >= (-func_number_1())) :
                if bool_41:
                  True
                func_bool_3(bool_42, number_93)
                number_94
          else:
            if (-func_number_4(bool_10)) * number_67 >= 1:
              bool_42
            else:
              if True:
                number_67 > 1 - func_number_3(func_number_4(True), number_95)
              else:
                1 > (-1 * 1)
            1
            func_bool_2() == None
          return number_96 - 1
        def func_number_6(func_number_6_param_0: bool) -> int:
          func_number_6_param_0:bool = False
          func_bool_0()
          return 1 % func_number_0()
        def func_bool_5() -> bool:
          (not True)
          return True
        1
        if False:
          number_45 = func_number_1()
          func_number_3(func_number_2(func_number_1()) + func_number_1() // 1, number_46)
          if (not func_number_4(False) > 1 * func_number_1()):
            False
            if func_number_3(func_number_3(1, func_number_4(False) - 1), 1) <= 1 + func_number_3(1, 1) or func_bool_1(True, True, func_bool_3(func_bool_0(), func_number_4(False)), True, func_bool_2(), func_number_3((-1 * (-number_6)), func_number_3((-number_47), 1)) - 1, func_bool_4()):
              number_23 * func_number_1()
              if True:
                number_48
              elif func_bool_4() :
                if bool_26:
                  1
                  if True:
                    None
                    if func_bool_4():
                      if True:
                        1
                        func_number_3(1, func_number_1())
                      else:
                        1
                      number_49
                  else:
                    func_number_0() % 1
                    1
                    func_number_3((-number_50), 1) * func_number_5(number_6 - 1)
                    False
                    func_number_1()
              else:
                func_number_4(1 < 1)
                if True:
                  if func_bool_1((not True) or bool_27, 1 > func_number_4(func_number_1() == number_1), (not (not bool_28) != 1), False, func_bool_0(), func_number_0() // number_31, True):
                    1
                elif bool_27 :
                  (not False)
                  if False:
                    if 1 > number_49 * number_51 - 1:
                      1
                      func_number_2(1)
                      number_52 = func_number_4(True)
                    else:
                      if bool_29:
                        False
                      if func_bool_0():
                        1
                        if func_bool_1_param_6:
                          False
                          1 % number_53 + number_12
                        elif func_bool_4() :
                          number_54
                        else:
                          if func_bool_2():
                            1 % func_number_5(1)
                            True
                          else:
                            (-1)
                          False
                          func_number_5(1)
                          1
                          (-number_55)
                          if func_bool_0():
                            if func_bool_1(number_56 != 1, func_bool_1(True, False, func_bool_4(), True, number_16 > 1, func_bool_1_param_5, func_bool_5()), (not (not bool_27)), func_bool_2(), True, (-number_57) + 1, func_number_0() // (-func_number_3((-1), 1)) + number_58 - (-1) * number_59 <= 1):
                              func_number_2_param_0
                          func_bool_3(bool_30, 1 // 1)
                          bool_31 = True or True or False
                          func_number_4(bool_0)
                        1
                        (-1)
                      number_47
                    (-number_53 * 1)
                  else:
                    False
                    number_21 // (-(-func_number_4(func_bool_1((not bool_32), True, 1 + func_number_4(number_60 // number_61 <= number_62) <= 1 // 1 * 1, 1 >= 1, func_bool_1((not False), func_bool_2(), func_bool_1(True, False, bool_31, bool_33, func_bool_4(), number_63, 1 > 1), (-1) == (not True), True, 1, (not (not False))), (-func_number_3(1, number_64 * 1)), (not func_bool_1(func_number_0() < number_65, (not func_bool_5()), bool_34, (-number_66) < func_number_2(number_41) or (not False), bool_35, 1, func_bool_1(bool_36, False, True, False, bool_8, 1 - (-func_number_6(False)), func_bool_2())))) == 1))) // func_number_5(number_48)
                    func_number_5((-func_number_5(number_67))) // (-number_32) > (-number_68) - func_number_5(func_number_1()) // 1 - number_48 % (-1 - 1 % 1) == 1
                    number_49 = func_number_1()
                    (-number_69)
                  number_27 = 1
                  func_none_0(1, 1 * 1 > 1 % 1 // 1 + number_42) is None
                  number_70
                elif True :
                  1
                  number_71 = func_number_4(False)
                else:
                  if True:
                    func_none_0(number_72 // number_73, func_bool_5()) is func_none_0(func_number_4(func_bool_1(func_bool_1_param_6, (-(-func_number_1())) // (-1 + func_number_4(func_bool_3(func_bool_5(), number_17))) < func_number_1(), (-(-1 * 1) * number_42) < number_64, func_bool_1_param_0, (not (not bool_22)), 1, False) == 1 > (-1)), func_bool_1(func_bool_2(), func_number_0() % number_74 < number_75, bool_37, True, bool_38, 1, (not (not (not bool_6)))))
                  number_18 = 1 // 1 // number_76
                  number_77 = 1
                1
              number_78 = func_number_2(1) - 1
          1
          func_number_4(False)
          func_number_6(number_79 * func_number_5(1) != func_number_4(func_bool_4())) // number_80
          1
        elif True :
          if func_bool_2():
            number_20 = func_number_4(False)
            False
          else:
            number_81 - number_15
          func_number_3(1, func_number_1())
        func_bool_5()
        if False:
          number_82
          func_bool_1_param_5 = 1
        elif False :
          func_number_3(number_83, func_number_0())
          bool_39
        else:
          if bool_40:
            func_number_3(1, 1)
          elif 1 + 1 < number_74 * number_84 :
            number_85
          elif bool_29 :
            number_56
          func_number_6((not func_bool_3(bool_33, 1)))
          number_12 = number_86
        return number_87
      False
      func_number_4(bool_4 or 1 != func_number_1())
      return 1
    def func_number_3(func_number_3_param_0: int, func_number_3_param_1: int) -> int:
      func_number_3_param_0:int = 1
      func_number_3_param_1:int = 1
      number_46:int = 1
      number_47:int = 1
      func_bool_2()
      number_41 // func_number_3(func_number_0() + number_46 + 1 % number_47, (-number_4)) // func_number_2((-func_number_0()))
      number_40
      return 1
    def func_bool_2() -> bool:
      number_44:int = 1
      number_45:int = 1
      number_46:int = 1
      number_47:int = 1
      number_48:int = 1
      bool_25:bool = False
      bool_26:bool = False
      bool_27:bool = False
      def func_number_4() -> int:
        number_49:int = 1
        number_49 = 1
        return 1
      def func_number_5() -> int:
        number_49:int = 1
        number_50:int = 1
        number_51:int = 1
        number_52:int = 1
        number_53:int = 1
        number_54:int = 1
        number_55:int = 1
        number_56:int = 1
        number_57:int = 1
        number_58:int = 1
        number_59:int = 1
        number_60:int = 1
        number_61:int = 1
        number_62:int = 1
        number_63:int = 1
        number_64:int = 1
        number_65:int = 1
        number_66:int = 1
        number_67:int = 1
        number_68:int = 1
        number_69:int = 1
        number_70:int = 1
        bool_28:bool = False
        bool_29:bool = False
        bool_30:bool = False
        bool_31:bool = False
        bool_32:bool = False
        bool_33:bool = False
        bool_34:bool = False
        bool_35:bool = False
        bool_36:bool = False
        bool_37:bool = False
        def func_number_7(func_number_7_param_0: int) -> int:
          func_number_7_param_0:int = 1
          1
          return number_66
        def func_number_8(func_number_8_param_0: int) -> int:
          func_number_8_param_0:int = 1
          1 * func_number_0()
          return func_number_1()
        def func_number_9() -> int:
          number_71:int = 1
          number_71
          return 1
        def func_number_10() -> int:
          number_71:int = 1
          func_number_5()
          number_71 = func_number_5() - 1
          return 1 * 1 * number_15
        def func_number_11(func_number_11_param_0: bool, func_number_11_param_1: bool, func_number_11_param_2: int) -> int:
          func_number_11_param_2:int = 1
          number_72:int = 1
          number_73:int = 1
          number_74:int = 1
          number_75:int = 1
          number_76:int = 1
          number_77:int = 1
          number_78:int = 1
          func_number_11_param_0:bool = False
          func_number_11_param_1:bool = False
          bool_40:bool = False
          bool_41:bool = False
          bool_42:bool = False
          if func_bool_1(func_number_6(func_number_9()) > 1, (not (not bool_40)), bool_18, number_2 > number_72, 1 > (-number_62), func_number_9(), True):
            func_number_6(number_73) * number_74 - 1
          else:
            func_number_4()
            1
            number_75 = number_39 * func_number_2(number_76)
          func_bool_1(bool_41, bool_42, func_number_8(1) > 1 * number_77 + number_10 % func_number_10(), False, number_78 > 1 % number_70, 1, False)
          1
          return func_number_3((-1), func_number_7(1))
        def func_bool_6() -> bool:
          func_number_6(number_12)
          True
          (-(-number_10))
          return 1 > 1
        number_31
        if func_bool_0():
          None
          if True:
            1 + 1 // number_12
            func_number_6(number_47 - 1 + 1)
          else:
            number_49 = func_number_2((-number_50) * (-func_number_4()) + 1) - 1
          number_51 = 1
          if func_number_6(1) // 1 == 1 // 1 - func_number_2(1):
            1 * func_number_3((-number_9 % 1 - 1 // 1), number_52) - number_53 <= number_18 % number_1
          1
          number_11
          func_number_7(func_number_1())
          if True:
            number_12 % func_number_2(1) % number_7 // func_number_5()
            if func_bool_3(True, 1):
              None
              func_none_0(number_4, bool_28)
              number_47
              bool_29
            elif True :
              (-number_54)
            elif bool_29 :
              True
            number_18 - func_number_4()
            1
          elif bool_30 :
            number_55
            func_number_4() > 1
          else:
            1
            1 * 1
            1
          func_bool_4()
          1
        else:
          (not False)
          func_number_3(number_48, (-func_number_7((-1))))
        if (not func_bool_0() or False):
          number_56
        else:
          number_37 = (-func_number_7(number_57) + number_21 // number_58 % 1)
          func_bool_3(func_bool_1_param_2, (-(-func_number_7(number_59))))
          number_60 // func_number_2(1)
          if bool_1:
            number_44
            if (-1) > 1:
              func_bool_2()
              func_number_5()
              bool_31
              func_number_6(number_23)
            elif True :
              (-number_1)
              None is func_none_0(number_34, number_10 <= 1)
            else:
              if True:
                if False:
                  number_16
                  if bool_29:
                    if func_bool_1(True, True, func_bool_0(), func_bool_3(True, number_16), func_bool_6(), func_number_2(number_61), func_bool_1(True, bool_0 or False, func_bool_4(), bool_1, func_bool_6(), 1 * func_number_1(), func_bool_1_param_0)):
                      number_35
                    else:
                      number_62
                    func_number_6(func_number_8(number_63))
                    func_number_2(1)
                    if func_bool_5():
                      func_number_9() * number_64 * 1 % func_number_2(func_number_3(1, func_number_7(1))) // number_32 % 1 * (-1 + (-1 + func_number_0())) // func_number_0() * number_65
                    if True or func_bool_0():
                      func_number_7((-1))
                      func_bool_4() or bool_32
                      1
                    func_none_0(func_number_4(), bool_18)
                  else:
                    if True:
                      number_17 = 1
                    bool_33
                  func_number_10()
                1
            bool_18
          number_66 = func_number_9()
          bool_34
          if (not (-number_39) >= 1):
            if bool_35:
              func_none_0((-1 - (-1)), False or False)
            if False or bool_36:
              number_0
            elif (not bool_37 or True) :
              None
            else:
              if True:
                1
                1
                number_67
                func_number_5() - func_number_7(1) - func_number_7(number_53) * 1
                number_68 = number_0
                func_number_5()
              func_number_4()
              if 1 % func_number_10() <= number_69 or func_number_11(bool_37, func_bool_4(), func_number_0()) > 1:
                1
            number_70 = func_number_5()
            1
        return 1
      def func_number_6(func_number_6_param_0: int) -> int:
        func_number_6_param_0:int = 1
        number_50:int = 1
        number_50 % 1 + 1 - 1 // 1
        number_38 = func_number_4() * (-1)
        return 1
      def func_bool_5() -> bool:
        number_47
        return True
      1
      if False:
        (-number_23)
      elif False :
        number_13 = 1
      else:
        if func_bool_1(bool_25, True, bool_26, bool_5, func_bool_3(False, number_9 % 1), 1, True):
          func_number_4()
        else:
          number_33 = number_44
          bool_9 = bool_27
          func_none_0(1 % number_45, False)
          if func_bool_4():
            func_bool_5()
          else:
            number_46 = number_47
          number_19
        func_number_4()
      number_48 = func_number_3(func_number_5() + number_10, func_number_6(1))
      return True
    def func_bool_3(func_bool_3_param_0: bool, func_bool_3_param_1: int) -> bool:
      func_bool_3_param_1:int = 1
      number_45:int = 1
      number_46:int = 1
      number_47:int = 1
      func_bool_3_param_0:bool = False
      bool_26:bool = False
      if func_bool_1(bool_26, (-1) > 1, bool_1, number_28 > number_45, func_bool_1_param_0, 1, True):
        number_46 = 1 // func_number_3(number_41, (-number_0)) // number_47 - 1 * 1
      else:
        func_bool_2()
      return 1 > 1
    def func_bool_4() -> bool:
      1 % (-number_34 - func_number_3((-1), 1) - func_number_1() - 1)
      return True
    func_number_1()
    number_21 = 1
    if func_bool_1(True, func_bool_1(1 * 1 % (-number_4 * 1) * 1 < 1, bool_18, func_bool_2(), True, (not func_bool_0()), 1, (not True)), number_14 < 1 % number_11, bool_19, func_bool_1_param_5 - func_number_0() < func_number_1() or func_bool_2(), 1 % 1, 1 > func_number_0() * (-1)):
      number_31
      number_9 <= (-(-number_26))
    else:
      func_bool_2()
    (-func_number_0())
    number_4 % func_number_0()
    number_9
    if func_bool_1(func_bool_2(), False, 1 + 1 * 1 - func_number_0() + 1 // (-1 + number_14 * 1 + number_32 % func_number_1()) > 1, (not True), False, func_number_0(), False):
      1 % 1
      bool_20 = False
    else:
      1
    if number_33 - func_number_0() > func_number_1():
      if func_bool_1(True, func_bool_1(False, 1 < number_1, False, True, True, number_34, bool_21), func_bool_0(), False, 1 > (-1), func_number_0(), func_bool_2()):
        func_bool_1_param_1
      else:
        1
    if False:
      bool_22 = func_bool_1(False, True, (not bool_3 or False), (not (not (not func_bool_1(bool_23, False, True, func_bool_0(), True, 1, True)))), bool_24, func_number_2(number_35), func_bool_0())
    else:
      if func_bool_1(func_bool_1(number_36 * (-func_number_1()) % 1 > number_37, func_bool_1((-func_number_1() - func_number_0()) != None, True, bool_10, (not number_38 == func_bool_3(number_39 < func_number_1() + (-(-1) * func_number_2(1)), number_8 % func_number_0())), bool_20 != func_number_0(), number_40, func_bool_0()) or True, number_32 // number_41 > 1, False, func_bool_3(True, 1), 1, True), False, func_bool_4(), func_bool_2(), func_bool_0(), number_41, 1 >= 1):
        False
        if (not True):
          bool_20
          None
      elif False :
        func_number_1()
    False
    number_42 - func_number_0() % 1 * func_number_3(1, (-func_number_3(number_10, number_36)))
    return number_43
  func_number_0() % func_bool_1_param_5 - func_number_0()
  func_number_1()
  return func_bool_1_param_3
if False:
  number_0
  (not False)
  1
  number_1
else:
  if bool_0:
    False
    if False:
      if bool_0:
        number_0
      if bool_0:
        number_2
      else:
        if number_2 > 1 or (not (-number_0) - (-number_3) * 1 + 1 - number_3 % number_0 > 1 - 1):
          1
          if False:
            (-1 // 1 // 1) // 1
            if 1 != 1:
              if False:
                number_0 <= 1 - (-1)
                if False:
                  1
                  number_4 = (-1)
                  1 // number_5
                else:
                  1
                  1 * 1
                  (-number_6 // 1) // 1 % number_7
                  (not (not True))
                  1 * 1 // number_8 * 1 % (-number_9 % (-1))
                  None
                  False
                  (not None != (-(-1) // 1)) or True
              elif False or bool_0 :
                1
                if bool_1 or True:
                  None is None is func_none_0(1, 1 - 1 > 1) is None is func_none_0(number_9 - number_10, True) is None
                  1
              else:
                1
                number_11 = 1
              if True:
                False
              elif False :
                bool_2 = True
              else:
                False
                if False:
                  True
                  number_12
                  1
              if bool_3:
                1
                number_13 = number_10
              elif (not True) or number_12 <= 1 :
                number_4
              1
              number_14 - 1
          True
          if bool_4:
            number_5
    else:
      1 + 1
  else:
    (-(-number_15 + number_5))
  if False:
    number_16 > func_number_0()
    number_0
  elif func_number_0() > 1 or True :
    True
    if True:
      True
      if bool_1:
        False
      else:
        1
        (not func_number_0() == True)
        (not True)
        if False:
          if bool_3:
            1
            if bool_1:
              if False:
                number_17 = (-number_18)
              else:
                (-func_number_0() + (-(-1)))
              number_19
            elif False or func_number_0() > func_number_0() + func_number_0() + func_number_0() :
              number_10
            bool_5 = func_bool_0()
          elif bool_6 :
            number_20
            number_21
          else:
            if func_bool_1(1 > 1, False, func_bool_1(func_bool_0(), False, func_bool_0(), bool_7, bool_1, 1, (not bool_8)), bool_7, False, number_22, 1 % func_number_0() != (-number_5) or True):
              number_2
            else:
              1
              True
              func_none_0((-1), (-number_23) >= func_number_0())
              number_24
          1
      1
    elif (not False) :
      func_none_0(1 - func_number_0() + func_number_0() * number_18 - number_25 - func_number_0() + number_7 + 1 * number_26, True) is func_none_0(number_27, bool_9)
      if bool_10:
        number_28
        func_number_0()
        func_bool_1(True, (not bool_3), (not (not (not False))), (not True), bool_11, func_number_0(), False)
      1 * (-number_29) + 1 + func_number_0() > 1
      1
    if bool_5:
      True
func_number_0()
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
number_5:int = 1
number_6:int = 1
number_7:int = 1
number_8:int = 1
number_9:int = 1
number_10:int = 1
number_11:int = 1
number_12:int = 1
number_13:int = 1
number_14:int = 1
number_15:int = 1
number_16:int = 1
number_17:int = 1
number_18:int = 1
number_19:int = 1
number_20:int = 1
number_21:int = 1
number_22:int = 1
number_23:int = 1
number_24:int = 1
number_25:int = 1
number_26:int = 1
number_27:int = 1
number_28:int = 1
number_29:int = 1
bool_0:bool = False
bool_1:bool = False
bool_2:bool = False
bool_3:bool = False
bool_4:bool = False
bool_5:bool = False
bool_6:bool = False
bool_7:bool = False
bool_8:bool = False
bool_9:bool = False
bool_10:bool = False
bool_11:bool = False
bool_12:bool = False
bool_13:bool = False
bool_14:bool = False
bool_15:bool = False
bool_16:bool = False
bool_17:bool = False
bool_18:bool = False
def func_number_0(func_number_0_param_0: bool, func_number_0_param_1: int, func_number_0_param_2: int, func_number_0_param_3: bool) -> int:
  func_number_0_param_1:int = 1
  func_number_0_param_2:int = 1
  number_32:int = 1
  number_33:int = 1
  func_number_0_param_0:bool = False
  func_number_0_param_3:bool = False
  def func_number_4() -> int:
    number_34:int = 1
    number_34 = 1
    return 1 % (-1)
  (-func_number_2()) * number_32 - 1 * 1 % func_number_4()
  1 * 1 + number_33
  return 1
def func_number_1(func_number_1_param_0: int) -> int:
  func_number_1_param_0:int = 1
  1
  return 1
def func_number_2() -> int:
  number_30:int = 1
  number_31:int = 1
  number_20
  number_5
  (-(-1 // 1 * number_15) + number_30) * (-1)
  1
  if func_bool_0():
    1
  return (-number_31)
def func_number_3(func_number_3_param_0: bool, func_number_3_param_1: int) -> int:
  func_number_3_param_1:int = 1
  number_31:int = 1
  func_number_3_param_0:bool = False
  False
  (-number_31)
  func_number_2()
  return number_15
def func_bool_0() -> bool:
  number_30:int = 1
  number_30
  return True or 1 * 1 <= 1
def func_none_0():
  number_30:int = 1
  if (not bool_2):
    if func_bool_0():
      func_bool_0()
    elif bool_8 :
      number_18 = 1
      number_30
  return func_none_0()
if False:
  if True:
    number_0
    if True:
      func_number_0(bool_0, 1 % func_number_0(True, 1, number_1, bool_1), (-1 + (-1)), bool_2)
    else:
      False
      False
    if True:
      if False:
        func_number_0(func_number_0(bool_3, number_0, func_number_0((not bool_4), number_1, 1, func_bool_0() or func_bool_0() or bool_5), bool_3) > 1, func_number_0(True, 1 * number_2, 1 // 1 // number_3, func_bool_0()), func_number_0(func_bool_0(), number_4, (-1), 1 >= number_5 // 1), func_number_0(bool_1, func_number_1(func_number_0(bool_6, number_6 % number_7, (-1), (-1) == bool_0)), func_number_1(1 + number_7 // 1), (not (-func_number_0((not bool_7), func_number_0((-1) > func_number_1(1), 1, func_number_1(number_8), False) - 1, (-number_9), bool_0)) > 1 % func_number_0(number_10 <= func_number_0(True, func_number_1(func_number_0(func_bool_0(), number_11, 1, func_bool_0())), number_6, bool_8), (-1), 1, func_bool_0()) * (-1) != (-func_number_0(bool_9 or bool_10, 1, 1, False)))) + number_12 < 1)
      else:
        1
      func_number_0(bool_11, number_13, 1, func_bool_0() or True)
      number_8
    elif func_number_0(bool_12, 1, 1, True) - (-1) > func_number_0(False, number_9, 1, func_bool_0()) :
      if bool_1:
        number_14
        if True:
          func_number_0((-number_15) > func_number_1((-number_10) // number_16), func_number_1(1 + func_number_0(False, func_number_1(number_10), 1, bool_5)) // number_0, 1 % 1, True) % func_number_0(False, number_3, 1, True)
        func_number_0(func_number_1(1) > 1, (-number_6), number_17, bool_8)
      elif bool_13 :
        1
      else:
        number_18
        func_number_1(1) - number_12 * number_19
      None
    else:
      number_18 = 1 // 1
    1
    func_number_1(1)
    number_14 + number_3
    if func_bool_0():
      if bool_14:
        None is None is None is None is None is None
        func_number_0(False, 1, number_20, bool_15)
        func_number_1(1)
        (-number_21 // 1)
        if False:
          if (not func_bool_0()):
            1
            number_22 = number_13
          else:
            bool_11 = bool_16
            1
        else:
          if False:
            number_23
          else:
            True
            (-number_24)
            number_25 = 1 + func_number_1(1)
            (-number_26 % func_number_0((not True), 1, 1, False or (not number_27 % (-1) > number_28)))
            number_25
            1 + func_number_1((-number_19) + 1) // 1
            number_20
            number_29 = 1
            number_25 - number_28
          number_15
    if bool_9:
      1
      number_25 = number_9
    else:
      func_none_0()
  elif func_bool_0() :
    func_number_2()
  else:
    if (not func_bool_0()):
      bool_17
      func_number_2() * 1
    elif (not bool_18) :
      (-1) + 1 * func_number_3(False, 1)
    else:
      None
    1 + 1
    1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
def func_bool_0(func_bool_0_param_0: bool, func_bool_0_param_1: int) -> bool:
  func_bool_0_param_1:int = 1
  func_bool_0_param_0:bool = False
  None is None is None
  return False
func_bool_0((-number_0) == False, (-number_0))
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:None is None is None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
bool_0:bool = False
number_0
bool_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
number_5:int = 1
number_6:int = 1
number_7:int = 1
number_8:int = 1
bool_0:bool = False
def func_none_0():
  number_9:int = 1
  number_10:int = 1
  bool_1:bool = False
  bool_2:bool = False
  def func_bool_1(func_bool_1_param_0: bool, func_bool_1_param_1: int) -> bool:
    func_bool_1_param_1:int = 1
    func_bool_1_param_0:bool = False
    1
    number_0 = 1
    return True
  if func_bool_1((not (not bool_1)), (-1)):
    number_9 > (-1 + 1) or False
    1
  else:
    number_9 = number_10
  bool_2
  return None
def func_none_1():
  1
  return func_none_0()
def func_bool_0(func_bool_0_param_0: int, func_bool_0_param_1: int, func_bool_0_param_2: int, func_bool_0_param_3: int) -> bool:
  func_bool_0_param_0:int = 1
  func_bool_0_param_1:int = 1
  func_bool_0_param_2:int = 1
  func_bool_0_param_3:int = 1
  number_13:int = 1
  number_14:int = 1
  number_15:int = 1
  def func_number_0(func_number_0_param_0: int, func_number_0_param_1: bool) -> int:
    func_number_0_param_0:int = 1
    number_17:int = 1
    number_18:int = 1
    number_19:int = 1
    number_20:int = 1
    number_21:int = 1
    number_22:int = 1
    number_23:int = 1
    number_24:int = 1
    number_25:int = 1
    func_number_0_param_1:bool = False
    bool_2:bool = False
    bool_3:bool = False
    def func_number_1(func_number_1_param_0: int) -> int:
      func_number_1_param_0:int = 1
      number_27:int = 1
      number_28:int = 1
      number_29:int = 1
      number_30:int = 1
      number_31:int = 1
      number_32:int = 1
      number_33:int = 1
      number_34:int = 1
      number_35:int = 1
      number_36:int = 1
      number_37:int = 1
      number_38:int = 1
      number_39:int = 1
      number_40:int = 1
      number_41:int = 1
      number_42:int = 1
      number_43:int = 1
      number_44:int = 1
      number_45:int = 1
      number_46:int = 1
      number_47:int = 1
      number_48:int = 1
      number_49:int = 1
      number_50:int = 1
      number_51:int = 1
      number_52:int = 1
      number_53:int = 1
      number_54:int = 1
      number_55:int = 1
      number_56:int = 1
      number_57:int = 1
      number_58:int = 1
      number_59:int = 1
      number_60:int = 1
      number_61:int = 1
      number_62:int = 1
      number_63:int = 1
      number_64:int = 1
      number_65:int = 1
      number_66:int = 1
      number_67:int = 1
      number_68:int = 1
      number_69:int = 1
      number_70:int = 1
      bool_4:bool = False
      bool_5:bool = False
      bool_6:bool = False
      bool_7:bool = False
      bool_8:bool = False
      bool_9:bool = False
      bool_10:bool = False
      bool_11:bool = False
      bool_12:bool = False
      bool_13:bool = False
      def func_bool_1(func_bool_1_param_0: int, func_bool_1_param_1: int, func_bool_1_param_2: int, func_bool_1_param_3: int, func_bool_1_param_4: int) -> bool:
        func_bool_1_param_0:int = 1
        func_bool_1_param_1:int = 1
        func_bool_1_param_2:int = 1
        func_bool_1_param_3:int = 1
        func_bool_1_param_4:int = 1
        number_76:int = 1
        number_77:int = 1
        number_78:int = 1
        number_79:int = 1
        bool_14:bool = False
        def func_number_9() -> int:
          number_80:int = 1
          number_81:int = 1
          number_82:int = 1
          number_83:int = 1
          number_84:int = 1
          bool_15:bool = False
          bool_16:bool = False
          def func_number_10(func_number_10_param_0: int) -> int:
            func_number_10_param_0:int = 1
            number_86:int = 1
            1
            func_number_9() // 1 > 1
            number_6
            number_86 = number_25
            1
            return number_82
          def func_number_11() -> int:
            number_85:int = 1
            1
            1
            number_85
            return 1 + (-(-1)) % 1
          def func_number_12(func_number_12_param_0: int) -> int:
            func_number_12_param_0:int = 1
            number_86:int = 1
            None is None
            return func_number_3(1 < func_number_8(), number_86)
          if (not func_number_5() == True):
            if func_bool_0(func_number_10(number_80), (-1 + (-number_1) + func_number_7() - number_80 + 1 + func_number_2(bool_15, 1, 1) // func_number_4()), 1, func_number_8()):
              number_81 % 1 % func_number_11()
            else:
              if False:
                1
                bool_12 = bool_16
              None
            if (not func_bool_1((-number_82), func_number_11() * func_number_5(), number_0, 1, number_38)):
              1 // number_41
            elif False :
              number_83
            else:
              False
              number_84
          return func_number_12(func_number_3(True or bool_12, func_number_5()) + 1) + func_number_5()
        if False:
          number_76 == 1
          if (not func_bool_2()):
            if False:
              1
              func_none_1()
          else:
            1
          1
          number_77
          None is None
          func_number_3(True, number_35)
        if 1 > (-1):
          1 * 1 % func_number_9() + 1
        elif func_bool_0(1, 1, 1 + 1, number_78) :
          func_number_2(True, func_number_3(True, func_number_8()), 1)
          number_62
        1
        if func_none_0() is None == False:
          func_number_8()
          bool_14
        1 % func_number_8()
        func_number_3(1 > 1, number_79)
        1
        return False
      def func_bool_2() -> bool:
        number_71:int = 1
        number_72:int = 1
        number_73:int = 1
        bool_14:bool = False
        bool_15:bool = False
        bool_16:bool = False
        bool_17:bool = False
        def func_number_9() -> int:
          number_74:int = 1
          if number_74 > (-func_number_8()):
            func_number_8()
            (-func_number_5()) * 1
            1
          return (-(-1)) % func_number_9()
        if 1 == (not bool_14):
          if bool_15:
            number_71 = func_number_6(func_number_7(), func_number_6(1, func_number_9() // (-1), number_72, False, (-1)), 1 // number_70 * func_number_1(func_number_1(number_14 - number_73) - 1) % number_38 % 1 // func_number_5(), bool_16, func_number_0(1, bool_17))
            True
        return bool_2
      def func_number_3(func_number_3_param_0: bool, func_number_3_param_1: int) -> int:
        func_number_3_param_1:int = 1
        number_72:int = 1
        number_73:int = 1
        number_74:int = 1
        number_75:int = 1
        func_number_3_param_0:bool = False
        bool_15:bool = False
        bool_16:bool = False
        def func_number_9() -> int:
          number_76:int = 1
          number_77:int = 1
          number_78:int = 1
          def func_bool_3() -> bool:
            number_79:int = 1
            1
            number_79 = 1
            return bool_4
          if True:
            func_number_0(number_76, func_bool_3())
            func_bool_1(1, 1, 1, 1, func_number_8())
            1
            number_77 = number_23
            True
          if func_bool_3():
            number_78
          else:
            None
            (-func_number_2(bool_3 or True, number_20, func_number_3_param_1) * 1)
            number_30 = 1
          False
          func_number_8()
          return func_number_9()
        1
        bool_15
        if bool_16:
          number_72
        else:
          1 % 1 % 1
        return (-func_number_6(1, 1 % func_number_1(1 - (-(-1 // 1)) + func_number_9() // 1 % func_number_4()), number_73, number_59 // func_number_5() <= number_74, number_59 * number_75 // number_24))
      def func_number_4() -> int:
        number_71:int = 1
        number_72:int = 1
        number_73:int = 1
        number_74:int = 1
        number_75:int = 1
        number_76:int = 1
        number_77:int = 1
        number_78:int = 1
        number_79:int = 1
        number_80:int = 1
        number_81:int = 1
        number_82:int = 1
        number_83:int = 1
        number_84:int = 1
        number_85:int = 1
        number_86:int = 1
        number_87:int = 1
        number_88:int = 1
        bool_14:bool = False
        bool_15:bool = False
        bool_16:bool = False
        bool_17:bool = False
        bool_18:bool = False
        bool_19:bool = False
        bool_20:bool = False
        bool_21:bool = False
        def func_bool_3() -> bool:
          number_89:int = 1
          1 - number_89
          1 % number_2 // (-number_84)
          return func_bool_3()
        def func_bool_4(func_bool_4_param_0: int) -> bool:
          func_bool_4_param_0:int = 1
          func_number_4()
          None is None is None is None is func_none_1() is func_none_0() is func_none_1() is func_none_1() is None is func_none_1() is func_none_0() is func_none_1() is func_none_1() is None
          1
          return True
        def func_number_9(func_number_9_param_0: int) -> int:
          func_number_9_param_0:int = 1
          number_6
          return func_number_5()
        def func_number_10(func_number_10_param_0: int, func_number_10_param_1: bool) -> int:
          func_number_10_param_0:int = 1
          func_number_10_param_1:bool = False
          bool_23:bool = False
          bool_23
          return 1
        def func_number_11(func_number_11_param_0: int) -> int:
          func_number_11_param_0:int = 1
          bool_19
          return 1
        def func_number_12() -> int:
          number_89:int = 1
          number_90:int = 1
          number_91:int = 1
          if False:
            1 + func_number_12()
          elif (not (not True)) == func_number_12() // number_89 < 1 :
            func_number_0(number_90, False)
          return number_91
        if bool_6:
          (-func_number_5() % number_71)
          func_number_9(1)
        else:
          func_bool_1(1, (-1), 1 * 1, 1 % number_30, number_48 % 1)
          func_number_4()
          if bool_13:
            if False:
              if bool_14:
                1
              else:
                func_number_9(1 % func_number_7())
                number_72 + 1
                bool_15
                if bool_13:
                  number_73
                1 % func_number_5()
                number_20 = 1
                number_74
                if func_number_1(func_number_10(func_number_6(1, func_number_0(1, (not True)), 1, bool_5, (-func_number_5()) // func_number_9(1)), func_bool_0(1, (-1), func_number_3(bool_16, (-(-(-1)))), (-1) * number_75)) * 1) + number_56 > number_58 // number_43:
                  bool_17 = True
                elif False :
                  (not func_bool_2() or bool_18)
                  func_none_0() is None
                elif func_number_2(bool_19, 1, number_76) > 1 :
                  func_number_4()
                number_44
                if False:
                  number_67 = number_77
                  func_number_6(1 - 1, 1, func_number_8(), func_bool_3(), func_bool_0_param_1 % 1)
                  1
                else:
                  1 % number_78 - 1
                1 % number_18
            else:
              (-1) * 1
              if True:
                if 1 // func_number_11(func_number_2(bool_6, number_79, func_number_11(func_number_10(number_72 * func_number_6(number_80, func_number_4(), 1 + 1, False, 1), False)) - 1)) % number_81 > 1:
                  number_62 - number_82
                func_number_0(func_number_6(1, func_number_2(bool_16, func_number_5(), 1), func_number_7(), number_83 > (-number_74), (-func_number_11(1 * 1)) + func_number_10(number_84, True) * number_85) + number_6 * func_number_6(number_86, 1, func_number_1(func_number_1(func_number_11(1) + 1 // number_7)), bool_20, 1), bool_21) > (-1)
              func_bool_1(1, number_87, 1, func_number_9(1) % func_number_10((-func_number_2(func_bool_2(), func_bool_0_param_3, 1 - func_number_4())) + 1 // (-number_88), func_bool_4(1)), number_81)
              if bool_14:
                number_72
              elif bool_19 :
                bool_2
              None is None
              1 % 1
        return number_3 % func_number_12() // 1 % 1
      def func_number_5() -> int:
        number_71:int = 1
        number_72:int = 1
        number_73:int = 1
        bool_14:bool = False
        func_number_4()
        if bool_9:
          1
          bool_14 = True
        else:
          (-func_number_6(number_71 - func_number_4(), func_number_7() - 1 % number_15 % 1 - 1, number_72, False, func_number_1((-func_number_3(False, 1)))))
          (-number_36)
        number_73 = 1
        return 1
      def func_number_6(func_number_6_param_0: int, func_number_6_param_1: int, func_number_6_param_2: int, func_number_6_param_3: bool, func_number_6_param_4: int) -> int:
        func_number_6_param_0:int = 1
        func_number_6_param_1:int = 1
        func_number_6_param_2:int = 1
        func_number_6_param_4:int = 1
        number_75:int = 1
        number_76:int = 1
        number_77:int = 1
        number_78:int = 1
        number_79:int = 1
        func_number_6_param_3:bool = False
        bool_15:bool = False
        bool_16:bool = False
        def func_bool_3() -> bool:
          number_80:int = 1
          bool_17:bool = False
          def func_number_9(func_number_9_param_0: int, func_number_9_param_1: bool, func_number_9_param_2: int) -> int:
            func_number_9_param_0:int = 1
            func_number_9_param_2:int = 1
            func_number_9_param_1:bool = False
            def func_number_10() -> int:
              number_83:int = 1
              number_84:int = 1
              number_85:int = 1
              bool_19:bool = False
              1
              if func_bool_0(number_83 + 1 - (-1) % 1, 1, (-1 * func_number_5()) % 1, func_number_3(bool_8, 1)):
                number_84
              else:
                1
              return func_number_3(bool_19, number_85)
            1
            return func_number_10() * 1
          func_number_9(func_number_5(), bool_8, 1)
          return (not func_number_0((-1), (not False) or bool_17 or True) > (-number_80) // 1 + func_number_0(func_number_5(), bool_12))
        func_bool_0(1, 1, func_number_2(func_number_6(number_66, 1, number_75 // number_76 + func_number_6(func_number_1(1), number_77, 1, bool_15, 1), True, 1) >= func_number_3(bool_16, 1), 1, 1) + 1, number_39)
        func_bool_1(1 % func_number_0(func_number_7(), func_bool_1(func_number_2(func_bool_3(), 1, number_52) // 1 + 1 - 1, (-1), 1, number_78, 1)), func_number_1((-1 + 1 % number_78)), 1, 1 // 1 // 1, func_number_7())
        func_bool_0(1, (-number_79), func_number_7(), func_number_6(func_number_5(), 1, number_48 + 1, (not False or True), 1))
        return func_number_8()
      def func_number_7() -> int:
        1
        return 1
      def func_number_8() -> int:
        def func_none_2():
          number_71:int = 1
          if func_bool_1((-number_71 // 1), (-1 % 1 // number_0 * 1 - (-number_23) - func_number_1(number_33)), 1, (-1), func_number_4()):
            True
            1
          else:
            (-func_number_5())
          number_50
          return None
        func_number_7()
        func_none_2()
        return 1
      if True:
        if False:
          func_number_2((-number_17) // 1 + number_15 + 1 - (-(-func_number_2((not func_bool_0(func_number_0(func_number_2(False, (-number_27) % 1, (-(-func_bool_0_param_1))), 1 == func_bool_0(number_17, 1 // 1, func_number_1(1 + 1 % func_number_0(func_number_2(True, 1, func_number_1(func_number_2(bool_4, number_28 // 1 % func_number_0(func_number_0(1, bool_5) * 1 - func_number_1((-1)), func_bool_0(func_number_1(1 + func_number_2(True, 1, number_29)) * 1, number_27, number_30, (-(-number_15) + number_8))), number_31))), bool_4)), number_32) or bool_6), number_33, func_number_0(func_number_0(1, func_bool_0(1 % 1, number_24, 1, 1)), bool_7), func_number_0(1, False))), number_34, (-func_number_1(func_number_3(func_bool_1(number_35, (-func_number_3(func_bool_1(1, number_36, number_33 // 1, number_37, 1), (-number_38))), number_39, number_40 + number_41, (-1)), func_number_1(1))))))) // 1 * (-1 % 1) == 1 - 1, number_27, func_number_4())
          func_bool_0((-func_number_3(False, (-1))), number_39, 1 + (-1) % 1, number_42)
          1
        else:
          if func_bool_0((-func_number_2(True or (not func_bool_0(number_43, 1, func_number_4(), 1)), func_number_2(True or False or True, number_44, func_number_4()), 1)), number_13, number_45, number_40):
            number_46
            if (not bool_8):
              if func_number_0(1, True == func_number_0((-func_number_3((not bool_6), number_29 // (-(-number_17 % func_number_5())))), False) % number_47 * number_47 + 1) > (-func_number_4()):
                (-func_number_1(1) // 1)
              func_number_6(number_48 // 1, func_number_3(bool_9, func_bool_0_param_1) // 1 - 1, number_38 // func_number_0(1, bool_8), 1 + 1 <= 1, 1)
              func_bool_1(func_number_7(), 1, 1, 1, func_number_2((not func_number_5() < 1), (-func_number_6(func_bool_0_param_0, 1, (-1), func_number_0_param_1, func_bool_0_param_2) * func_number_1((-func_number_5()))), 1))
              number_34
            if number_49 >= func_number_5():
              1
              if False:
                func_bool_0_param_0 = number_50 % 1
              else:
                func_bool_1(1, func_number_3(func_bool_0((-number_51), 1, (-func_number_6(number_38, 1, 1, func_bool_2(), 1 * (-1))), 1 * func_number_1(func_number_5() * 1) // func_number_1_param_0), 1), 1, (-1), 1 * number_52)
              number_53 // 1
              number_45
          elif True :
            if bool_10:
              (-func_number_4())
            elif True :
              (-func_number_1(1 * 1))
              if func_bool_2():
                func_number_1(1)
              elif True :
                1
                bool_11 = (not 1 > 1)
              func_number_2(True or (not True), func_number_1(number_4), func_number_6(number_54, 1, number_48, 1 > func_number_7(), (-1)) * number_41) * 1
              1
              1
            else:
              if False:
                func_number_1_param_0
              else:
                func_number_7()
            func_number_6((-number_55 * number_56 + number_27), 1, 1, False, func_number_3(True, 1 - 1))
            (not True)
            if bool_12:
              bool_6 = func_bool_2()
              func_bool_0(func_number_4() % number_57, func_number_0(1, 1 < 1 + func_number_6(number_2, number_58, 1 * func_number_1_param_0, bool_4, func_number_2(number_49 == number_59, 1, 1))), number_60, func_number_7()) or bool_13
              (-1) != func_number_3(True, 1)
            else:
              (-1 - 1)
              1
              if func_bool_2():
                func_number_3(True, number_61)
                number_62 = number_63
        func_number_2(True, number_64, 1)
        1 - 1
        func_number_7()
        1
        number_5 = func_number_5()
      else:
        (not True)
        if True or True:
          None
        elif func_bool_0(number_38, (-func_number_2(func_bool_0((-func_number_1(func_number_8())), number_38, 1 + func_number_7(), 1), 1, 1)) + 1, func_number_6(1, 1, func_number_0_param_0, True, 1), 1 + 1) :
          if number_65 // (-func_number_0(func_number_7(), number_15 > 1)) > (-1):
            1 - func_number_0(number_66, False)
            func_bool_1(1, func_number_0(1, True), number_67, 1, number_68)
          1 == func_number_2(True, (-number_18), number_69) > number_4
          number_49 = (-1) + (-1) + number_70
        elif 1 <= 1 or False or True :
          (-1)
      return number_61
    def func_number_2(func_number_2_param_0: bool, func_number_2_param_1: int, func_number_2_param_2: int) -> int:
      func_number_2_param_1:int = 1
      func_number_2_param_2:int = 1
      number_28:int = 1
      func_number_2_param_0:bool = False
      func_number_1(func_bool_0_param_3 // (-number_7))
      return func_number_0(number_28, bool_2)
    func_number_0((-number_17), bool_2) // number_15
    return func_number_0(1, func_bool_0(number_8 // func_number_0(func_number_0(1, func_bool_0(number_0, 1 - 1, 1 // 1, func_number_0(number_18, bool_3))) * 1 // number_19, True) // 1 * 1 % (-1), func_number_0(1, func_bool_0(func_number_0(func_number_1(func_number_0(1, 1 >= func_number_0(number_20, func_number_1(1) < number_4 or func_bool_0(number_4, func_number_2(False, number_21, number_22), number_14, (-number_23 // number_24 // (-func_number_0(1, False))))))), func_bool_0(1, func_number_1(1), 1 * number_25, func_number_1(1))), 1, 1, 1)), (-number_15) + 1, 1))
  number_13
  if False:
    1
    1
  return (-number_0) % (-(-number_14)) // 1 - 1 + func_number_0(1, bool_0) * 1 > number_15
number_0 = 1
1
if (not True) or func_none_0() is func_none_0() is func_none_0() is func_none_0() == 1:
  if bool_0:
    number_0 = 1 % 1 * (-1 % 1) // (-number_1) // (-number_2 * number_0)
  else:
    False
    (-1)
  bool_0
if number_0 <= number_1:
  (-number_3 + 1 - number_2)
  None is func_none_0()
  if 1 != 1:
    1
    (-(-number_4))
  elif 1 > 1 :
    number_1
    None is None is func_none_0() is None
    1
    number_5
  else:
    (not func_bool_0(1, 1, 1, number_6 * 1 // number_1))
    number_7 = 1
    if bool_0:
      if True:
        (not bool_0) or (not number_8 < 1)
        1 + 1
        number_4
      number_3
    else:
      func_none_1()
      1
else:
  (-1)
(-1)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
number_5:int = 1
number_6:int = 1
number_7:int = 1
number_8:int = 1
number_9:int = 1
number_10:int = 1
number_11:int = 1
bool_0:bool = False
bool_1:bool = False
bool_2:bool = False
def func_number_0() -> int:
  bool_1
  return func_number_0()
def func_bool_0() -> bool:
  bool_3:bool = False
  (-1) + number_9
  False
  return bool_3
def func_none_0(func_none_0_param_0: int, func_none_0_param_1: bool, func_none_0_param_2: bool, func_none_0_param_3: int):
  func_none_0_param_0:int = 1
  func_none_0_param_3:int = 1
  number_14:int = 1
  number_15:int = 1
  number_16:int = 1
  number_17:int = 1
  func_none_0_param_1:bool = False
  func_none_0_param_2:bool = False
  func_none_0(1 % 1 + number_9 // number_14 % number_9 // number_15 % number_2 * number_16 - func_number_0(), (-(-func_number_0())) > number_10, func_bool_0(), func_number_0())
  number_17 = 1 + (-1) * func_number_0() % number_4
  return None is None is func_none_0(func_number_0(), func_number_0() > number_15 % 1 * 1, func_number_0() > func_number_0() * 1 or func_none_0_param_2, number_3) is func_none_0(1, func_bool_0(), func_bool_0(), 1) is None
if number_0 * (-(-number_1) * 1 * (-(-1)) + number_1 + func_number_0()) > 1:
  (-func_number_0() % number_0)
  if func_bool_0():
    1
  elif func_number_0() <= func_number_0() :
    number_2 // 1
  elif False :
    if (not False):
      1
      if 1 == None:
        (-func_number_0() % 1)
        number_3
      else:
        if bool_0:
          number_4
      None is None is None is func_none_0(number_5, bool_1, (not number_6 * func_number_0() > number_7 + number_8 + number_2), 1 - 1) is func_none_0(number_9, True, False, func_number_0()) is func_none_0(1, func_bool_0(), True, func_number_0()) is func_none_0(1, func_bool_0(), False, 1)
    if bool_0:
      func_number_0()
      number_8 = (-func_number_0() - func_number_0() - number_9 * func_number_0())
      func_number_0()
  else:
    number_10
    if number_0 <= number_11:
      False
    bool_2 = True
else:
  1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0
True
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
True
1
(-1 + number_0) - 1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:class class_0(object):
  pass
number_0:int = 1
number_1:int = 1
class_0_0:class_0 = None
def func_number_0() -> int:
  number_1 = func_number_0()
  False
  return func_number_0()
if number_0 == 1 * (-func_number_0()):
  number_1 > func_number_0()
else:
  number_0
  (-number_1) % func_number_0()
class_0_0
class_0_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
number_0:int = 1
number_1:int = 1
if bool_0:
  number_0 + 1
  1
else:
  number_1
  number_0 = 1
  number_1 = number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:class class_0(object):
  pass
bool_0:bool = False
class_0_0:class_0 = None
def func_bool_0(func_bool_0_param_0: int, func_bool_0_param_1: bool) -> bool:
  func_bool_0_param_1:bool = False
  func_bool_0_param_0:int = 1
  func_bool_0_param_0 = 1
  return True
if func_bool_0(1, bool_0):
  1
  1 * 1
  None
class_0_0 = None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
1 > (-number_0)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:class class_0(object):
  pass
class_0_0:class_0 = None
class_0_0 = None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
None == number_0 + 1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:class class_0(object):
  pass
class_0_0:class_0 = None
class_0_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1 < 1 + 1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
number_5:int = 1
number_6:int = 1
bool_0:bool = False
def func_number_0(func_number_0_param_0: int, func_number_0_param_1: bool) -> int:
  func_number_0_param_0:int = 1
  number_8:int = 1
  number_9:int = 1
  number_10:int = 1
  number_11:int = 1
  number_12:int = 1
  number_13:int = 1
  number_14:int = 1
  number_15:int = 1
  number_16:int = 1
  number_17:int = 1
  number_18:int = 1
  number_19:int = 1
  number_20:int = 1
  number_21:int = 1
  number_22:int = 1
  number_23:int = 1
  number_24:int = 1
  number_25:int = 1
  number_26:int = 1
  number_27:int = 1
  number_28:int = 1
  number_29:int = 1
  number_30:int = 1
  number_31:int = 1
  number_32:int = 1
  number_33:int = 1
  number_34:int = 1
  number_35:int = 1
  number_36:int = 1
  number_37:int = 1
  number_38:int = 1
  number_39:int = 1
  number_40:int = 1
  number_41:int = 1
  number_42:int = 1
  number_43:int = 1
  number_44:int = 1
  number_45:int = 1
  number_46:int = 1
  number_47:int = 1
  number_48:int = 1
  number_49:int = 1
  number_50:int = 1
  number_51:int = 1
  number_52:int = 1
  number_53:int = 1
  number_54:int = 1
  number_55:int = 1
  number_56:int = 1
  number_57:int = 1
  number_58:int = 1
  number_59:int = 1
  number_60:int = 1
  number_61:int = 1
  number_62:int = 1
  number_63:int = 1
  number_64:int = 1
  number_65:int = 1
  number_66:int = 1
  number_67:int = 1
  number_68:int = 1
  number_69:int = 1
  number_70:int = 1
  number_71:int = 1
  number_72:int = 1
  number_73:int = 1
  func_number_0_param_1:bool = False
  bool_2:bool = False
  bool_3:bool = False
  bool_4:bool = False
  bool_5:bool = False
  bool_6:bool = False
  bool_7:bool = False
  bool_8:bool = False
  bool_9:bool = False
  bool_10:bool = False
  bool_11:bool = False
  bool_12:bool = False
  bool_13:bool = False
  bool_14:bool = False
  bool_15:bool = False
  bool_16:bool = False
  bool_17:bool = False
  bool_18:bool = False
  bool_19:bool = False
  bool_20:bool = False
  bool_21:bool = False
  bool_22:bool = False
  bool_23:bool = False
  bool_24:bool = False
  bool_25:bool = False
  bool_26:bool = False
  bool_27:bool = False
  bool_28:bool = False
  bool_29:bool = False
  def func_number_1() -> int:
    number_74:int = 1
    1
    bool_22
    func_number_12() // 1
    1
    number_74
    return func_number_10()
  def func_number_2() -> int:
    (-1 + 1)
    return 1
  def func_number_3(func_number_3_param_0: int) -> int:
    func_number_3_param_0:int = 1
    number_75:int = 1
    (not func_bool_3(func_bool_2(), func_number_13(1 // 1, 1) - (-func_number_8()), func_number_7(func_bool_3(bool_19, 1 % func_number_10(), number_65 // number_3, func_number_1() // 1 - func_number_11())), 1))
    return number_75
  def func_number_4(func_number_4_param_0: bool) -> int:
    number_74:int = 1
    func_number_4_param_0:bool = False
    bool_31:bool = False
    if True:
      number_74 > func_number_7(True)
      True
    else:
      bool_23
      bool_31
    return (-(-1))
  def func_number_5(func_number_5_param_0: bool) -> int:
    number_74:int = 1
    number_75:int = 1
    number_76:int = 1
    number_77:int = 1
    number_78:int = 1
    number_79:int = 1
    number_80:int = 1
    number_81:int = 1
    number_82:int = 1
    number_83:int = 1
    number_84:int = 1
    number_85:int = 1
    number_86:int = 1
    number_87:int = 1
    number_88:int = 1
    number_89:int = 1
    func_number_5_param_0:bool = False
    bool_31:bool = False
    bool_32:bool = False
    bool_33:bool = False
    bool_34:bool = False
    bool_35:bool = False
    def func_number_15() -> int:
      number_90:int = 1
      number_90
      return (-1)
    def func_number_16() -> int:
      number_42
      return (-1 * 1)
    def func_number_17(func_number_17_param_0: int, func_number_17_param_1: int) -> int:
      func_number_17_param_0:int = 1
      func_number_17_param_1:int = 1
      number_92:int = 1
      number_93:int = 1
      if bool_32:
        1
        False
        if bool_26:
          number_92
        elif True :
          func_number_17(1, 1 * 1)
      else:
        (-func_number_17(1, 1)) // func_number_4(func_bool_7())
        bool_22
        number_93
      return 1
    def func_number_18(func_number_18_param_0: bool, func_number_18_param_1: int) -> int:
      func_number_18_param_1:int = 1
      number_91:int = 1
      number_92:int = 1
      func_number_18_param_0:bool = False
      bool_37:bool = False
      (-1 + 1) % (-1 % func_number_12() % func_number_14(func_bool_3((not func_bool_6()), func_number_5(bool_37) - number_91, func_number_7(func_bool_3(bool_28, 1, number_12 + number_47, number_0)), number_92), True) % 1)
      func_number_16()
      return func_number_11()
    def func_number_19(func_number_19_param_0: bool, func_number_19_param_1: int) -> int:
      func_number_19_param_1:int = 1
      number_91:int = 1
      number_92:int = 1
      number_93:int = 1
      func_number_19_param_0:bool = False
      bool_37:bool = False
      func_bool_3(1 < func_number_13(number_91 % 1, 1), 1, func_number_8(), func_number_13(func_number_7(bool_21) % (-func_number_5(bool_37) // 1), func_number_11() - (-func_number_5((not True))) * 1))
      (-number_92 % (-1))
      number_93
      return func_number_1()
    def func_bool_5(func_bool_5_param_0: int) -> bool:
      func_bool_5_param_0:int = 1
      bool_36:bool = False
      (-1)
      return bool_36
    def func_bool_6() -> bool:
      number_90:int = 1
      number_91:int = 1
      number_92:int = 1
      number_93:int = 1
      bool_36:bool = False
      def func_none_0():
        if True:
          func_number_8()
        return None
      1 - func_number_17(number_9, 1)
      if number_90 - 1 // 1 * number_91 >= func_number_17(number_92, 1 + (-1 // (-1)) - 1 - 1 // func_number_14(number_13 > func_number_9(func_number_9(func_number_15())), bool_3)):
        if (not False):
          func_bool_4()
          bool_36
          number_25
      elif func_bool_7() :
        number_15 = 1
        1
      else:
        number_93 = (-1)
        func_none_0()
        func_number_17((-1 % 1), func_number_16())
      return bool_2
    def func_bool_7() -> bool:
      number_90:int = 1
      number_91:int = 1
      bool_36:bool = False
      bool_37:bool = False
      def func_number_20() -> int:
        number_92:int = 1
        number_93:int = 1
        number_94:int = 1
        func_bool_3(1 + number_92 < number_93 + 1, func_number_9((-1) % 1 % 1 * number_61), number_94, 1)
        return 1
      def func_none_0():
        number_92:int = 1
        number_93:int = 1
        bool_38:bool = False
        bool_39:bool = False
        bool_40:bool = False
        bool_41:bool = False
        bool_42:bool = False
        if bool_8:
          func_none_0()
        elif True :
          number_0
          bool_38
          if False:
            (-1)
          if bool_26:
            func_number_8()
        else:
          number_92 = func_number_9(1)
          bool_39 = True
          if bool_40:
            1
          (-number_16)
        number_57 // 1 - 1
        if bool_41:
          bool_13
        elif bool_34 :
          1 % 1 >= number_93
          (-func_number_0_param_0)
          if func_bool_2():
            bool_42
            1
          else:
            1
          bool_16
        1
        return func_none_0()
      if True:
        number_33
      else:
        if True:
          func_none_0()
          1
        else:
          if False:
            if False:
              func_number_5(True)
          else:
            bool_36 = bool_37
      if (not (-(-1)) >= number_90 + 1 - number_62 // (-1 - func_number_2())):
        if func_bool_5(1) or func_bool_2():
          number_80
        1
        func_number_20()
        1
        number_23 = 1 * func_number_9(1)
      number_91
      False
      1
      1
      return func_bool_7()
    if True:
      bool_9 = False
    elif (not func_number_5(func_bool_0()) - 1 > number_34) :
      if False:
        func_bool_2()
        (-(-number_74) // func_number_5(bool_31 or func_bool_3(func_bool_4(), 1, number_75 - number_76, func_number_10()))) + 1
        if bool_21:
          func_number_0(func_number_0((-1 % func_number_10()) * number_64 - (-1), 1 == 1 % func_number_6()) - 1 - func_number_5(number_58 == number_77) - number_51, True)
      elif bool_32 :
        if True:
          number_0
          bool_18
          if (not func_number_0_param_0 > number_62):
            if False:
              1 < number_78 - number_18
              1
        else:
          if (-1) != 1:
            number_28 = 1
          else:
            if True == func_bool_5(1) != False:
              None
            else:
              False
            if (not func_bool_6()):
              1 < number_79 * 1 - number_19 + (-1 * 1)
            else:
              number_80
              1 + func_number_6() >= func_number_13(number_12, 1 * 1) or func_bool_6()
            if func_bool_5(1) != 1:
              1
              None is None is None
            elif (not 1 * func_number_0((-1), 1 != bool_9) - 1 >= 1) :
              1
              func_number_3(number_81 - func_number_14(func_number_14(number_82 <= 1 or True, (not bool_22)) - 1 + func_number_15() - func_number_0(1, bool_33) % func_number_2() // number_83 % func_number_2() * number_19 >= 1, True))
              if True or False:
                (-number_16)
                1 > func_number_6()
                func_number_7(1 * func_number_16() > func_number_17(number_84, number_0) % 1 - 1) * (-func_number_18(func_bool_3(False, func_number_13(func_number_11(), func_number_16() // 1), 1, func_number_0(1, (not False))), 1)) + 1
                func_number_16()
              elif func_bool_5(number_85) :
                number_86 > func_number_6()
              else:
                True or 1 == 1 != 1
              func_bool_7()
              1
            else:
              1 + func_number_19(func_bool_5((-1 % (-func_number_8())) * func_number_12()), number_33 * 1) - 1 - number_87 * 1
        1
        bool_34 = (not (not (not False)))
      func_number_6()
    number_14 = number_88
    func_number_7(bool_35)
    return func_number_13(number_89 % func_number_1(), number_46) // func_number_19(True, func_number_1()) // 1
  def func_number_6() -> int:
    None
    return number_9
  def func_number_7(func_number_7_param_0: bool) -> int:
    func_number_7_param_0:bool = False
    def func_number_15() -> int:
      bool_31:bool = False
      number_51
      return func_number_4(bool_31)
    func_number_12()
    return func_number_15()
  def func_number_8() -> int:
    number_74:int = 1
    1
    return (-(-func_number_7(1 > number_3 - number_50))) * func_number_0(number_8, func_bool_3(False, (-number_35 // (-1)), number_74, number_26))
  def func_number_9(func_number_9_param_0: int) -> int:
    func_number_9_param_0:int = 1
    number_75:int = 1
    number_76:int = 1
    def func_number_15(func_number_15_param_0: int, func_number_15_param_1: int, func_number_15_param_2: bool, func_number_15_param_3: int, func_number_15_param_4: int) -> int:
      func_number_15_param_0:int = 1
      func_number_15_param_1:int = 1
      func_number_15_param_3:int = 1
      func_number_15_param_4:int = 1
      number_81:int = 1
      func_number_15_param_2:bool = False
      func_number_9(1) - number_81
      return func_number_8()
    def func_number_16() -> int:
      number_77:int = 1
      (-(-1) - func_number_15(1, number_21, (not func_bool_3(func_bool_2(), func_number_11(), 1 * 1, number_77 + func_number_1())), number_52, 1) % func_number_13((-number_61 + 1) % number_25, number_56))
      1
      return (-1)
    1
    return func_number_15(number_75, 1, False, number_76, func_number_4(func_number_16() <= 1 or 1 + func_number_8() - func_number_3(number_59) - (-1) > 1))
  def func_number_10() -> int:
    number_74:int = 1
    number_74
    return number_39
  def func_number_11() -> int:
    bool_30:bool = False
    bool_31:bool = False
    bool_32:bool = False
    bool_33:bool = False
    def func_none_0(func_none_0_param_0: bool, func_none_0_param_1: int):
      func_none_0_param_1:int = 1
      number_75:int = 1
      number_76:int = 1
      number_77:int = 1
      number_78:int = 1
      func_none_0_param_0:bool = False
      bool_35:bool = False
      bool_36:bool = False
      if func_bool_3(func_number_7(bool_35) <= (-number_72 % func_number_5(func_bool_1())) % number_75, func_number_5(bool_36), 1 * number_76, func_number_14(func_bool_1(), True)):
        func_number_13(func_number_9(number_52) * func_number_2(), number_77) > number_78
      number_48
      return None
    True
    if bool_28:
      bool_15 = 1 != None is func_none_0(bool_5 or bool_30, func_number_4(bool_11) // func_number_13(1, func_number_8()))
    else:
      func_number_12()
    None
    bool_31
    if True:
      number_23
      bool_32 = bool_33
      1
      number_2
      number_43 * 1 // 1
    return (-number_20)
  def func_number_12() -> int:
    1
    return number_5
  def func_number_13(func_number_13_param_0: int, func_number_13_param_1: int) -> int:
    func_number_13_param_0:int = 1
    func_number_13_param_1:int = 1
    1
    False != 1
    return 1
  def func_number_14(func_number_14_param_0: bool, func_number_14_param_1: bool) -> int:
    number_74:int = 1
    number_75:int = 1
    number_76:int = 1
    number_77:int = 1
    number_78:int = 1
    number_79:int = 1
    number_80:int = 1
    number_81:int = 1
    number_82:int = 1
    number_83:int = 1
    number_84:int = 1
    func_number_14_param_0:bool = False
    func_number_14_param_1:bool = False
    1
    1
    if func_bool_3(True, func_number_13(func_number_14(func_bool_2(), False), 1) + 1, 1 - func_number_1(), func_number_1()):
      if True:
        1
        if (not func_bool_1()):
          1
          if False != False:
            1
          else:
            None
          (-(-number_74)) // 1
          1 > number_75 // 1
        else:
          number_25 = number_41 * 1 + 1 // number_37 * 1 * number_76 // 1
          number_77
          1
          number_78 = func_number_9(1) - func_number_13(1 % number_79, number_80) * number_39
          False
        1
        bool_16
      else:
        number_81 = 1
    else:
      if func_bool_4():
        1
        number_82
        1
        1
        True
        func_number_8()
        func_number_13(1, 1) * (-1)
        (-func_number_4(False))
        number_83 = 1
    return number_84
  def func_bool_0() -> bool:
    number_74:int = 1
    1
    return func_number_14(func_bool_1(), func_bool_1()) >= (-1 + number_74)
  def func_bool_1() -> bool:
    number_74:int = 1
    bool_30:bool = False
    def func_number_15(func_number_15_param_0: int) -> int:
      func_number_15_param_0:int = 1
      number_76:int = 1
      number_76 * 1
      func_number_10()
      return func_number_14(1 <= 1, False)
    number_74
    func_number_5(bool_30)
    if False:
      1 * (-(-1))
    else:
      number_1
    1 % func_number_9(func_number_15(number_32))
    None is None is None
    return False
  def func_bool_2() -> bool:
    number_74:int = 1
    number_75:int = 1
    (-1) * (-number_74) % (-1) * (-number_75)
    return func_number_6() < func_number_1()
  def func_bool_3(func_bool_3_param_0: bool, func_bool_3_param_1: int, func_bool_3_param_2: int, func_bool_3_param_3: int) -> bool:
    func_bool_3_param_1:int = 1
    func_bool_3_param_2:int = 1
    func_bool_3_param_3:int = 1
    number_77:int = 1
    func_bool_3_param_0:bool = False
    if True:
      if 1 <= number_77 - 1:
        func_bool_0()
      elif (not (not func_bool_4())) :
        number_61 > number_18
    return func_bool_4()
  def func_bool_4() -> bool:
    number_74:int = 1
    number_75:int = 1
    number_76:int = 1
    bool_30:bool = False
    if bool_4:
      bool_30
    else:
      (-number_74 + func_number_2())
    1
    False
    None is None
    if func_number_0_param_1:
      (-number_75)
      1
    else:
      func_number_4(False)
      if func_bool_4():
        func_bool_3(True, func_number_2(), func_number_3(func_number_0_param_0), number_41)
      else:
        1
        number_76
    return 1 <= func_number_5(1 != False) * (-number_55)
  None
  if True:
    None
    if func_number_0(func_number_0(func_number_0_param_0, func_number_0_param_1), 1 > number_8) // func_number_0(1, False) % (-1) < func_number_0((-number_9), (not False)):
      1 + func_number_1() // number_10
      1 * 1 + (-1)
      1
    elif False :
      number_10
    else:
      bool_0 = 1 <= 1
      number_8 = func_number_1()
      if bool_2:
        if False:
          False
          1
          if bool_3:
            if 1 > (-func_number_2()):
              func_number_0_param_1 = True
              1 - 1
              if (not True):
                number_11
              elif True :
                1
              (-1 - 1)
            else:
              number_6
              if func_number_0_param_0 % number_9 * (-1) - (-1) // number_9 >= func_number_3(number_11):
                bool_4 = (not bool_5)
                number_12
                number_13 = number_11 + func_number_0(1, bool_0) * (-number_10 // number_8) % (-(-number_14 * 1))
                1 - 1
                if True:
                  if True:
                    1
                    1 - 1
                    func_number_2()
                  else:
                    (not True)
                    if False:
                      (not bool_6)
                      if func_number_2() > func_number_1() * func_number_0(number_4, bool_0) != 1:
                        if 1 - 1 // number_15 > 1:
                          if False:
                            1 > func_number_0(1, number_16 >= 1)
                            number_17 = number_18 % 1 % func_number_2()
                        else:
                          None
                          if func_bool_0():
                            1 % 1 % number_6 // func_number_0(number_9, bool_7) - number_19 // 1
                          else:
                            (-number_19 % number_3 * number_20)
                          1
                          func_number_2() != 1
                          None
                        1 // (-1)
                        func_number_0(1, bool_8)
                      1
                      func_number_3(number_13 - 1)
                      number_20
                    elif bool_4 :
                      if func_number_2() > func_number_0(number_21, number_1 + 1 * 1 // 1 * 1 % func_number_2() > 1):
                        True
                      else:
                        if bool_3:
                          None
                      number_22 = number_16 % func_number_4(func_bool_1()) // 1
                    else:
                      number_21
                    (-number_23 - func_number_0(func_number_3((-func_number_4(func_bool_0()))), func_bool_0()) % 1 // func_number_5((not bool_9)) - func_number_6() * (-(-1) * func_number_6() * 1))
                None
              func_number_2()
              bool_2
          else:
            if bool_9:
              if bool_2:
                if func_number_0(func_number_0(1, number_5 > number_19 + 1), func_bool_0()) > number_23 or 1 < number_24:
                  if func_number_0_param_1:
                    bool_10 = func_bool_0()
                  else:
                    number_8
                    func_number_0(1, bool_11)
                    1
                    number_25
            None is None
            1
            func_number_1()
          number_26
          (not bool_12)
        else:
          if func_bool_2():
            False
            if number_27 < 1:
              number_28 * func_number_1()
          elif False :
            if func_bool_0():
              if bool_13 or False:
                if 1 > func_number_4(func_bool_0()):
                  number_29
                else:
                  number_30 = func_number_1()
                  1
                  1
                if func_bool_3(bool_14, func_number_5(True), 1, func_number_0((-(-1)), True)):
                  number_25
                else:
                  1
                  number_14
                  number_31
                if False:
                  number_0 = func_number_2() * 1 // func_number_3((-1))
                elif func_bool_2() :
                  if False:
                    if bool_10:
                      number_6
                    else:
                      number_32 = number_27
                  else:
                    number_33 = func_number_4(False)
                  number_34 = func_number_1()
              elif True :
                if func_bool_1():
                  if False:
                    if bool_13:
                      func_number_4(True)
                    elif func_bool_2() :
                      number_35 + 1
                    else:
                      if bool_15:
                        if (-1) <= 1:
                          number_29 - 1
                        else:
                          func_number_0(1, (not False))
                        1 % 1 % 1
                        1
                        number_36 = (-1 - 1 + number_29) + func_number_7(False) * func_number_2()
                      else:
                        bool_2 = False
                        number_37 = 1 // (-func_number_2())
                        number_38
                      bool_3 = (not func_bool_1())
                    (-1) * 1
                  elif func_bool_1() :
                    if bool_16:
                      if 1 > func_number_1() % (-number_39):
                        func_number_6()
                      elif True :
                        if (not (not bool_11)):
                          number_21
                      else:
                        bool_17
                        number_40 * func_number_0((-1), func_number_0_param_1) - func_number_7(True) + 1 - func_number_0_param_0
                        func_number_4(True)
                    1
                    func_bool_2()
                    if func_bool_2():
                      if func_number_7(True) - number_16 // 1 // 1 * 1 > 1:
                        False
                        func_number_7(True)
                        1
                      elif True :
                        number_33
                      number_40 = 1
                      1
                      number_2
                    elif (not (not number_10 > (-func_number_5((not bool_15))) // func_number_7(bool_18))) :
                      number_29
                      if False:
                        1
                        number_41 - (-number_30 + (-1) // number_42 % number_8 * 1 * (-1) % (-1 % func_number_6())) - 1 * number_43
                    elif True :
                      if func_bool_3(False, 1, 1, number_15):
                        1
                      number_3 = func_number_0((-func_number_2()), bool_19) + 1 - number_44
                      1
                    elif func_bool_0() :
                      func_bool_0()
                      if False:
                        number_35
                        if False:
                          number_40 * number_45
                          number_19 - number_11
                        else:
                          (not func_bool_4())
                        number_46 = number_29 * 1 * 1
                      else:
                        func_bool_2()
                    elif True :
                      bool_20 = (not func_bool_0())
                    if (not bool_21):
                      number_2
                    else:
                      (not func_bool_1())
                      1
                  else:
                    (-number_18) - number_0 + 1
                    number_19
                  func_number_8()
                  func_number_0(1, number_5 < (-1)) + func_number_0(1, func_bool_1()) - number_47
              else:
                number_48
                1
                func_number_8()
                if True:
                  number_49
                else:
                  number_50 + func_number_4(bool_22) % 1 - 1 + number_32
                  if False:
                    func_number_0(1, True) % number_10 * (-number_16 + func_number_7(bool_23)) % 1 * func_number_0(1, func_bool_4())
                    None is None
                  else:
                    func_number_4(number_51 > 1 // 1 or (not func_number_3(1) <= 1))
                1
                func_number_9(func_number_8())
                1
                if number_52 <= 1:
                  bool_24 = bool_25
                  1
                else:
                  number_53
                  if False:
                    if False:
                      (not (-(-func_number_1())) == number_10 - number_54)
                    if func_bool_4():
                      (-number_55 % (-func_number_1())) > 1 - number_56 * func_number_5(func_bool_0()) + number_23 - 1
                      None
                    elif (not False) :
                      number_54 > 1
                    else:
                      func_number_4(func_bool_0())
                      if bool_26:
                        func_number_4(True)
                      else:
                        func_number_10() - number_57
                      number_58 = 1
                  1
                  number_59
                  if (not bool_27):
                    (-func_number_1()) >= 1 + (-1 - func_number_10() * (-1)) % (-1) - func_number_11() % 1 % func_number_11() + 1
                  else:
                    1
                    number_60 = number_13
                  func_number_6()
                  number_51 = (-(-1))
                  (-1)
            elif True :
              1 <= 1 % func_number_4(func_bool_4())
              (-func_number_12() % func_number_0(1, (-func_number_10() - func_number_9(1) % func_number_7((not func_bool_2()))) > func_number_9(func_number_10()) // func_number_4(True)) // number_61 % 1 - (-1)) * (-number_49) * func_number_3(func_number_6() + func_number_1() % number_62) % 1
              (-(-func_number_1() % number_63))
              bool_13
              if (not False):
                1
              else:
                func_number_11()
                if func_number_0_param_1:
                  number_34
                else:
                  number_64 - func_number_9(number_65)
              func_number_11() % (-func_number_0_param_0) + number_66
              1 % 1
            elif False :
              1
              number_0 - func_number_4(1 != 1) + 1
            number_67
            1
          func_number_3(1)
          if True:
            if False:
              number_68
              if True:
                1
              elif bool_12 :
                number_69
              number_70 = (-1)
              1
              1
          False
        func_number_8() - func_number_11()
        func_number_12() % func_number_0(1, (not True))
      else:
        func_number_8()
        bool_28 = func_number_13(number_71, number_59) > func_number_3(func_number_12())
        1 // 1 % 1 * number_72
  func_number_9(number_73)
  return func_number_14(func_bool_0(), bool_29)
if True:
  1 // number_0 % 1
  number_1 = 1
else:
  1
  func_number_0(func_number_0(func_number_0(1 * (-1) * func_number_0(1, False), (not bool_0)), (not 1 // number_2 > 1 - number_3)), False) // (-number_4) % 1
  1
  False
  number_5 = number_6
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
number_5:int = 1
number_6:int = 1
number_7:int = 1
number_8:int = 1
number_9:int = 1
number_10:int = 1
number_11:int = 1
number_12:int = 1
number_13:int = 1
bool_0:bool = False
bool_1:bool = False
def func_bool_0() -> bool:
  bool_1
  return (not func_bool_0())
def func_number_0(func_number_0_param_0: int, func_number_0_param_1: int) -> int:
  func_number_0_param_0:int = 1
  func_number_0_param_1:int = 1
  number_16:int = 1
  number_17:int = 1
  bool_2:bool = False
  (-(-func_number_0(number_16 - 1, 1)))
  if (-func_number_0_param_0) == func_number_0(number_17, 1):
    bool_2
  return 1
if False:
  if 1 <= number_0 + number_0 * (-1):
    number_0 < number_1 + 1
    if 1 > 1 % (-number_2):
      if func_bool_0() != (-number_3 - 1):
        number_4
    else:
      1
  elif False :
    if func_bool_0():
      None is None
      number_2
      func_bool_0()
  elif (-1) <= 1 % number_5 // 1 + (-1) :
    if False:
      func_number_0(number_3 * func_number_0(func_number_0(1, (-1)), number_1) * (-1 - number_6 % number_4 - (-1) + (-number_7 * (-func_number_0(func_number_0(1, (-number_8)), func_number_0(func_number_0(number_3 % 1, func_number_0(1, 1)), number_9) + func_number_0(number_10, 1) % 1)))), (-number_10))
    else:
      1
    None
    1 // func_number_0((-1 + (-number_11 % 1)), func_number_0(number_12, func_number_0((-(-1)), number_3)))
  else:
    if True:
      None is None
    elif True :
      bool_0
    else:
      (not True)
    if bool_0:
      bool_1 = False
    1
    1
else:
  True
  number_13
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
bool_1:bool = False
bool_2:bool = False
number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
number_5:int = 1
def func_number_0() -> int:
  number_2 * func_number_0() * 1
  return number_0
def func_number_1() -> int:
  number_6:int = 1
  (-number_0)
  return number_6
if bool_0:
  number_0 = 1
  (-1)
elif (not False) :
  None
if True:
  1 + 1 + 1 // number_0
  number_0
  number_1 = number_2
else:
  if bool_1:
    if 1 > (-(-1)):
      if False:
        1
      else:
        bool_2
        if bool_2:
          (-1)
          1
          1
          if (-(-(-1))) < number_0 + 1:
            None
          if bool_1:
            False
        else:
          1
    else:
      None
      if 1 - 1 % 1 - 1 - func_number_0() >= (-1):
        bool_2
        if True:
          number_2 = 1
          False
          number_3 = number_1
          func_number_0()
        (not True)
        1
        number_0 = number_4
      else:
        func_number_0() - func_number_0() - (-1)
        (-func_number_0())
    func_number_1()
    True
  else:
    number_5
    1
  func_number_1() * number_4
  1
  (-func_number_1())
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0
True
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
bool_1:bool = False
number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
if (not (not bool_0) or bool_0):
  if bool_0:
    if False:
      number_0 // number_0 // number_1
    1 > 1
    number_0 = 1
else:
  (-(-number_1 % number_2))
  if True:
    bool_1
    number_2
  number_3 = 1
  None is None
  1
(-1)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
def func_number_0(func_number_0_param_0: int) -> int:
  func_number_0_param_0:int = 1
  number_4:int = 1
  bool_0:bool = False
  if True:
    if bool_0:
      1
    else:
      (-(-func_number_0(number_1))) + number_4
    number_0
    1
    func_number_0(1)
  1
  return 1
1
if 1 > 1 % func_number_0((-number_0) // (-1)) - number_1:
  (-(-1)) * 1
else:
  number_2 = 1
1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:def func_number_0(func_number_0_param_0: int, func_number_0_param_1: bool) -> int:
  func_number_0_param_0:int = 1
  number_1:int = 1
  number_2:int = 1
  number_3:int = 1
  number_4:int = 1
  number_5:int = 1
  number_6:int = 1
  number_7:int = 1
  number_8:int = 1
  func_number_0_param_1:bool = False
  if func_number_0_param_1:
    if func_number_0((-1), (not True)) <= number_1:
      number_2 = func_number_0(1 + 1 * 1 // 1, func_number_0(1, 1 > func_number_0(number_3, True)) != 1) + func_number_0(number_4, func_number_0(1, func_number_0_param_1) > number_5) * 1 * number_6
  return func_number_0(1 + 1, (-1) * (-number_5) > func_number_0(1 + 1, (-number_7) > number_8))
1 - 1 + func_number_0(1, False)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
number_5:int = 1
number_6:int = 1
number_7:int = 1
number_8:int = 1
bool_0:bool = False
if True:
  None
  if True:
    1 + (-1 // number_0) // 1 - 1
    number_0
    number_1 % (-number_2) % (-number_3 // number_2 - 1 - (-1 - number_4 // number_5) // number_6 * 1) + (-(-number_4))
  elif False :
    bool_0 = True
  elif bool_0 == number_7 :
    1
    number_8 = (-number_6 % number_6) - 1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
number_0:int = 1
bool_0 = False
number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
bool_0:bool = False
bool_1:bool = False
def func_number_0() -> int:
  1
  return func_number_0()
number_0 = number_0 // number_1 - 1 - number_0 + 1 - (-number_1) // func_number_0()
None
bool_0 or bool_1 or (not False)
None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
number_5:int = 1
bool_0:bool = False
bool_1:bool = False
def func_number_0() -> int:
  number_6:int = 1
  number_7:int = 1
  number_8:int = 1
  number_9:int = 1
  def func_number_2(func_number_2_param_0: int, func_number_2_param_1: int, func_number_2_param_2: int) -> int:
    func_number_2_param_0:int = 1
    func_number_2_param_1:int = 1
    func_number_2_param_2:int = 1
    bool_2:bool = False
    bool_3:bool = False
    number_9
    if bool_2:
      1 - number_2
    bool_3
    return 1
  def func_number_3(func_number_3_param_0: bool) -> int:
    number_10:int = 1
    func_number_3_param_0:bool = False
    1 // 1 % 1 * (-number_3)
    1 * func_number_1()
    return number_10 + number_1 + 1
  def func_none_0(func_none_0_param_0: int):
    func_none_0_param_0:int = 1
    number_11:int = 1
    number_12:int = 1
    number_13:int = 1
    number_14:int = 1
    number_15:int = 1
    number_16:int = 1
    number_17:int = 1
    number_18:int = 1
    number_19:int = 1
    number_20:int = 1
    number_21:int = 1
    number_22:int = 1
    number_23:int = 1
    number_24:int = 1
    number_25:int = 1
    number_26:int = 1
    number_27:int = 1
    number_28:int = 1
    number_29:int = 1
    bool_2:bool = False
    bool_3:bool = False
    bool_4:bool = False
    bool_5:bool = False
    def func_number_4(func_number_4_param_0: int, func_number_4_param_1: int, func_number_4_param_2: bool) -> int:
      func_number_4_param_0:int = 1
      func_number_4_param_1:int = 1
      number_32:int = 1
      number_33:int = 1
      number_34:int = 1
      number_35:int = 1
      number_36:int = 1
      number_37:int = 1
      number_38:int = 1
      number_39:int = 1
      number_40:int = 1
      number_41:int = 1
      number_42:int = 1
      number_43:int = 1
      number_44:int = 1
      func_number_4_param_2:bool = False
      def func_number_5(func_number_5_param_0: int, func_number_5_param_1: bool, func_number_5_param_2: int) -> int:
        func_number_5_param_0:int = 1
        func_number_5_param_2:int = 1
        number_47:int = 1
        func_number_5_param_1:bool = False
        func_number_4_param_2 = func_bool_1(func_number_2(func_number_4(1 * 1 + number_47 % 1, 1, True), number_8, 1), 1)
        return func_number_6()
      def func_number_6() -> int:
        number_36
        return 1
      def func_bool_3() -> bool:
        if func_bool_2():
          number_28 // 1
        return True
      if (not func_bool_2()):
        func_bool_1(number_8, func_number_2((-func_number_2(func_number_2(func_number_2(func_number_3(bool_1), number_14, func_number_2(1, func_number_3(True), number_32) - func_number_0() % (-func_number_4(1 + number_33, number_34, bool_5)) // 1), 1, number_35) + number_12, number_2, func_number_1())) % 1 * func_number_0() % func_number_5(number_36, func_bool_3(), (-1)) // 1 * 1, number_37, func_number_2(number_5, func_number_2(func_number_1(), func_number_3(func_number_5(1, (not 1 > func_number_6() % number_38 // func_number_3((not func_bool_0(func_number_6())))), 1) * number_39 * (-func_number_6() % number_40) < number_27), 1), number_1)))
      else:
        number_41 // number_42 - func_number_0() - number_26
        number_43 >= number_14
      return func_number_1() - (-(-1)) + 1 // func_number_2(func_number_6() + 1, 1 - number_44, 1)
    def func_bool_0(func_bool_0_param_0: int) -> bool:
      func_bool_0_param_0:int = 1
      False
      None
      func_number_0()
      1
      return 1 >= number_26
    def func_bool_1(func_bool_1_param_0: int, func_bool_1_param_1: int) -> bool:
      func_bool_1_param_0:int = 1
      func_bool_1_param_1:int = 1
      number_32:int = 1
      bool_6:bool = False
      1
      if number_22 >= (-1) - func_number_3(False) or bool_4 or func_bool_2():
        bool_6 = (not bool_5)
      number_3
      return number_32 > func_number_0()
    def func_bool_2() -> bool:
      number_30:int = 1
      number_31:int = 1
      number_32:int = 1
      number_33:int = 1
      number_34:int = 1
      number_35:int = 1
      number_36:int = 1
      number_14 = func_number_4(func_number_4(number_30, func_number_3((not func_bool_1((-func_number_3(bool_2) - 1), (-(-1))))), 1 // number_31 // number_32 + 1 % 1 < 1), (-1) * number_18, func_bool_1(number_33, 1 - func_number_4(func_number_2((-(-func_number_3(1 % 1 < (-func_number_1())))) - 1, 1, number_22 - number_34), func_number_1() - number_35, True) % 1 % number_36 * 1 - 1 * (-1)))
      return False
    (-1 % 1)
    if func_number_2(1, 1, 1 * func_number_2(1, number_11, number_6 % 1 % (-func_number_0()) + 1 * number_11) * (-1)) >= 1:
      False
      func_number_3((not number_6 <= 1))
      number_12 = func_number_3(bool_2)
      if True:
        number_13 * func_number_3(func_number_0() != number_14)
        if (not False):
          if 1 > func_number_3((not (-number_7) > (-1) * 1)):
            func_number_3(number_15 > number_16)
            func_bool_0(1)
            func_bool_0(1)
            number_9 = func_number_3(1 > func_number_2(1, 1 + func_number_2(1, 1, func_number_2(number_11, number_8, number_4)), number_17 - (-(-number_3) * (-(-1)))))
            bool_3
          elif 1 * func_number_1() == func_number_1() != number_18 * 1 :
            number_19
            number_20 = number_21
          else:
            1
        else:
          func_number_4(1, number_22, bool_3)
      else:
        func_number_2(func_number_2(1, 1 * (-1) // number_15, 1), 1 * func_number_2(1, func_number_4((-func_number_0()), func_number_1(), True) // (-1) // number_6, number_19), 1) % 1
        if (not (-func_number_4(1, func_number_0() * (-number_20), (not bool_4))) > func_number_1()):
          if bool_5:
            number_23
            1
        else:
          number_19
          if number_6 > 1:
            False
            True
          else:
            number_24
            (-number_16)
        number_25 - (-1)
        number_26
        if func_bool_0(number_0):
          if 1 > func_number_0() + 1:
            1
        else:
          if bool_0:
            number_22 = func_number_3((not (not func_bool_1(number_27, (-(-1))))))
          elif 1 > 1 :
            if (not False):
              (-1 // func_number_4(1, number_1, True))
            else:
              func_none_0(1)
          number_28 * number_29
          number_1 = func_number_0() // 1 // (-1)
        func_bool_2()
    return None is None
  def func_none_1():
    1
    return None
  if False or True:
    number_6 = func_number_0()
  else:
    (not (not False))
    None is None is None is None is None is None is None is None is None is None is None is None is None is None is None is None is None is None is None is None is None is func_none_0(func_number_2(number_6, 1 - func_number_2(func_number_1(), (-number_7), number_4) % 1, number_6)) is None is None is func_none_1() is func_none_0(number_8) is func_none_1() is None
  return func_number_3(1 > number_9)
def func_number_1() -> int:
  func_number_1()
  return 1
if number_0 < number_0:
  number_0 * number_1
elif 1 != 1 :
  1 // 1 % (-1) // (-number_2) * number_1 - func_number_0() + (-func_number_0()) // number_3 % number_3 % (-1 + 1) * func_number_1() + 1 - func_number_1() % func_number_1() < (-func_number_1())
  number_3 = 1
elif True :
  1
  number_4 != number_5
  (-func_number_0() - number_3 * number_2)
  if bool_0:
    1
    None
  elif bool_0 :
    func_number_0()
  bool_1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
bool_0:bool = False
def func_bool_0(func_bool_0_param_0: int) -> bool:
  func_bool_0_param_0:int = 1
  number_6:int = 1
  number_7:int = 1
  number_8:int = 1
  def func_number_1(func_number_1_param_0: int, func_number_1_param_1: int, func_number_1_param_2: int) -> int:
    func_number_1_param_0:int = 1
    func_number_1_param_1:int = 1
    func_number_1_param_2:int = 1
    number_12:int = 1
    number_13:int = 1
    number_14:int = 1
    number_15:int = 1
    number_16:int = 1
    number_17:int = 1
    number_18:int = 1
    number_19:int = 1
    number_20:int = 1
    number_21:int = 1
    number_22:int = 1
    number_23:int = 1
    number_24:int = 1
    number_25:int = 1
    number_26:int = 1
    number_27:int = 1
    number_28:int = 1
    def func_number_2() -> int:
      number_29:int = 1
      number_30:int = 1
      number_31:int = 1
      number_32:int = 1
      number_33:int = 1
      number_34:int = 1
      number_35:int = 1
      number_36:int = 1
      number_37:int = 1
      number_38:int = 1
      number_39:int = 1
      number_40:int = 1
      number_41:int = 1
      number_42:int = 1
      number_43:int = 1
      bool_1:bool = False
      def func_bool_1() -> bool:
        number_44:int = 1
        number_45:int = 1
        number_46:int = 1
        number_47:int = 1
        number_48:int = 1
        number_49:int = 1
        bool_2:bool = False
        bool_3:bool = False
        def func_bool_2() -> bool:
          number_50:int = 1
          number_51:int = 1
          number_52:int = 1
          bool_4:bool = False
          func_bool_2()
          if bool_2:
            bool_4 = number_50 > number_51
          else:
            False
            func_bool_3(number_39, 1, number_52)
            1
            number_15
          return False
        def func_bool_3(func_bool_3_param_0: int, func_bool_3_param_1: int, func_bool_3_param_2: int) -> bool:
          func_bool_3_param_0:int = 1
          func_bool_3_param_1:int = 1
          func_bool_3_param_2:int = 1
          number_53:int = 1
          bool_4:bool = False
          bool_5:bool = False
          def func_bool_4(func_bool_4_param_0: int, func_bool_4_param_1: int, func_bool_4_param_2: int, func_bool_4_param_3: int, func_bool_4_param_4: int, func_bool_4_param_5: bool) -> bool:
            func_bool_4_param_0:int = 1
            func_bool_4_param_1:int = 1
            func_bool_4_param_2:int = 1
            func_bool_4_param_3:int = 1
            func_bool_4_param_4:int = 1
            number_59:int = 1
            func_bool_4_param_5:bool = False
            bool_7:bool = False
            if False:
              False
            if False:
              1 - number_7 - func_bool_4_param_0 - number_59
              1
              (-number_2)
            1
            return (not bool_7)
          if False:
            (not bool_0)
            1
          elif (not func_bool_0(func_number_4())) :
            bool_4 = bool_4
          else:
            (-number_7 * number_27 * number_16 + 1 // number_53) + func_number_1(1, 1, func_number_3(True, func_bool_4(func_number_4(), 1, (-(-number_3)), number_7, number_14, func_bool_0(1))))
          return bool_5
        def func_number_5(func_number_5_param_0: bool) -> int:
          number_50:int = 1
          number_51:int = 1
          func_number_5_param_0:bool = False
          def func_number_6(func_number_6_param_0: int) -> int:
            func_number_6_param_0:int = 1
            number_35
            return 1
          if True:
            func_number_0((-1 - 1))
          else:
            (-1)
            number_50 = 1 * (-1)
            number_17
            func_bool_3(func_number_2() * func_number_2(), func_number_3(False, (not False)) * 1, 1 - func_number_1(number_51, 1, func_number_6(1)) + (-1))
          return func_number_2()
        if bool_2:
          if (-1 + 1) > 1:
            func_bool_1()
            if True:
              func_number_2() + func_number_0(func_number_1(func_number_3(False, func_bool_1() or bool_0) // number_44, 1, number_25 % 1 + func_number_3((-1) // 1 - 1 >= number_45, number_46 == func_number_3(func_bool_0(1), func_bool_1()))))
            else:
              if func_bool_1():
                (-number_39)
              else:
                False
              if (-1) - number_20 > func_number_0(1):
                number_47 = (-func_number_1(1, (-(-func_number_5(bool_3)) % func_number_0(func_number_5(bool_3)) - number_48 + func_number_2()), func_number_4()))
            if True:
              1
              func_number_4()
              1
            else:
              number_26 = 1
              1
              func_bool_0(number_4)
              func_bool_2()
          elif False :
            False
            if func_bool_0(number_49 // number_8):
              if func_number_0(func_number_2()) < func_number_5(False):
                1 * 1
                1 % 1 % func_number_1(number_36, func_number_2(), 1 % number_3)
            else:
              None
            1
            (-func_number_5(func_bool_1()))
            1
        else:
          if False:
            func_bool_1()
            func_number_1_param_1
          elif func_bool_3(func_number_0((-1)), 1, (-number_25)) :
            1
            number_20 = 1 - func_number_2()
            func_bool_2() or True
          func_number_1((-(-number_31)), 1, number_7)
          if 1 > (-(-(-1)) - 1 * 1 % func_number_5(func_bool_1())):
            func_number_1((-1), 1 // 1, func_number_5(bool_3))
            (-number_0)
          else:
            1
          1 % 1
        return func_number_4() != func_bool_1()
      def func_number_3(func_number_3_param_0: bool, func_number_3_param_1: bool) -> int:
        func_number_3_param_0:bool = False
        func_number_3_param_1:bool = False
        def func_number_5() -> int:
          1
          return number_4
        1 // (-number_33 + func_number_5())
        return func_number_4()
      def func_number_4() -> int:
        number_21
        return 1 * 1 * func_number_3((not func_bool_0(func_number_1(1, (-func_number_2()), 1))), True or func_bool_1())
      number_13 % number_26 // number_29 - 1 * 1 // number_3 // 1
      if bool_0:
        if func_bool_0(func_number_2()):
          if (not func_bool_0(number_30)):
            number_7
            if func_bool_0(func_number_1(number_6, (-1) * number_31, func_number_1(func_number_0((-number_32) - number_33), number_34, 1 // number_22) + number_35)):
              1
              number_31 = number_36
              number_37 = number_4
            else:
              if (not func_bool_0((-1 - func_number_3(bool_1, (not False)) - number_7))):
                number_6
        False
      else:
        if func_bool_1():
          func_number_1(1, number_38, 1)
        else:
          if number_17 > 1:
            (-func_number_1_param_2)
            (-func_number_3(True, func_bool_1()))
            if False:
              (-1 % (-func_number_1_param_1) + 1 - number_39 * func_number_4())
            else:
              1
            (-func_number_1_param_1)
            number_40
          elif False :
            number_28
            if True:
              func_number_0(number_16 * func_number_1(1, number_41, func_number_0(number_13) // (-1)) * 1 % (-1))
              1
            elif False :
              number_42 = 1 * number_18
          False
      1
      return number_43 * (-1)
    1
    number_8
    if func_number_1(1, func_number_1(number_12, 1, (-1) // (-number_13)) + func_number_1(number_4, (-(-1)), func_number_1(func_number_1(number_1 - 1 - func_number_0(func_number_0(func_number_0(1 - number_13 + 1)) // number_14) * 1, number_4, (-1)), func_number_0(func_number_1_param_0 + 1) // func_number_2(), (-func_number_1(1, func_number_0(1 - func_number_1(1, number_1 + func_number_0(number_15) * 1, func_number_0(number_16 + 1 - number_2) * 1 * func_number_2()) % 1), 1 - (-1 - func_number_1(1, func_number_0(1), number_17) * func_number_1(func_bool_0_param_0, func_number_2() // 1 % 1 // func_number_2(), func_number_1(func_number_2(), func_number_1(1, func_number_0(func_number_1(func_number_2(), number_7, func_number_0(number_18) * number_19)), number_20) + func_number_0((-number_21 % (-func_number_2()) % 1 - 1)), number_22 // 1)) % 1) // 1 * number_23 % (-func_number_2()) * 1 - func_number_0(1)) // 1) % func_number_1(1, number_24, (-number_25 * func_number_0(func_number_2())) * 1 % 1 // (-1) // func_number_1(1, 1, 1 * func_number_1(1, 1, func_number_0(1)))) * 1)), (-number_26)) >= (-1 // 1):
      (-func_number_0(1))
    else:
      (-(-number_27 + number_1))
      1
    number_6
    1
    if (not False):
      number_25 = (-func_number_0(number_28) % 1 - 1)
    return 1
  number_6 > (-1) == (-func_number_1(func_number_0(1), number_7, 1) * 1)
  (-1)
  return func_number_0((-1 // func_number_0(1))) <= (-func_number_0(func_number_1(number_8, (-1), 1)))
def func_number_0(func_number_0_param_0: int) -> int:
  func_number_0_param_0:int = 1
  number_6:int = 1
  number_7:int = 1
  bool_1:bool = False
  func_number_0(number_2)
  bool_1
  1
  number_6 = 1
  func_number_0(func_number_0((-func_number_0(func_number_0(number_7)))))
  return 1
if func_bool_0((-1)):
  if (not True):
    if False:
      number_0 - func_number_0(1) + 1 - 1 % number_0 // func_number_0(1 % func_number_0(func_number_0((-func_number_0(1 % 1)) * 1 // 1 - (-func_number_0(number_1))))) * 1 + (-1)
    elif (not True) :
      1
    elif bool_0 :
      None
    else:
      if func_bool_0(1 - (-func_number_0(number_2))):
        number_1
      else:
        1
        number_3 // func_number_0(func_number_0(func_number_0((-number_0))))
      if False:
        1
  number_4 = func_number_0(1) + number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0 = number_0
False
if number_0 <= number_0:
  1
1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0 = 1
(-number_0)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
bool_0
1 > 1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
number_0:int = 1
number_1:int = 1
number_2:int = 1
(-(-1))
bool_0
if 1 * number_0 != number_0:
  number_1 = number_2
bool_0 = False
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:if False:
  True
1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
bool_1:bool = False
bool_2:bool = False
number_0:int = 1
number_1:int = 1
if bool_0:
  (-number_0)
else:
  if True:
    number_0
    number_0
  if bool_0:
    number_1 = 1
    True
    bool_1
    True
    bool_2
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
number_0:int = 1
bool_0
1
number_0
None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:class class_0(object):
  pass
bool_0:bool = False
bool_1:bool = False
bool_2:bool = False
bool_3:bool = False
bool_4:bool = False
bool_5:bool = False
bool_6:bool = False
number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
number_5:int = 1
number_6:int = 1
number_7:int = 1
number_8:int = 1
number_9:int = 1
number_10:int = 1
number_11:int = 1
number_12:int = 1
number_13:int = 1
number_14:int = 1
number_15:int = 1
number_16:int = 1
number_17:int = 1
number_18:int = 1
number_19:int = 1
number_20:int = 1
class_0_0:class_0 = None
class_0_1:class_0 = None
def func_number_0() -> int:
  func_number_3()
  func_number_3()
  func_number_3()
  func_number_2()
  return func_number_2()
def func_number_1(func_number_1_param_0: int, func_number_1_param_1: int) -> int:
  func_number_1_param_0:int = 1
  func_number_1_param_1:int = 1
  func_number_2()
  return number_15
def func_number_2() -> int:
  number_21:int = 1
  number_22:int = 1
  number_23:int = 1
  number_24:int = 1
  number_25:int = 1
  number_26:int = 1
  if bool_0:
    number_21
  elif func_number_0() <= number_22 or func_bool_0(number_19 % number_1, True, number_23 * (-number_14)) :
    number_10
  else:
    1
    1
    (-func_number_4(None)) + (-1) // number_4
    1
    if bool_2:
      bool_5
      func_number_0() // func_number_2() > 1 + 1
      1 - func_number_1(func_number_4(None), func_number_0())
      (not False)
      1 + number_24
      1
    elif True :
      number_25 = (-1 + number_24) + (-number_26)
  1
  return 1
def func_number_3() -> int:
  bool_7:bool = False
  number_21:int = 1
  number_22:int = 1
  if bool_7:
    1
    if False:
      func_number_2()
    else:
      number_18
      number_4 = 1 - func_number_1((-number_21), 1)
  else:
    1 - (-1) - (-number_10) * 1
  return number_22
def func_number_4(func_number_4_param_0: class_0) -> int:
  number_21:int = 1
  func_number_4_param_0:class_0 = None
  1
  return number_21
def func_bool_0(func_bool_0_param_0: int, func_bool_0_param_1: bool, func_bool_0_param_2: int) -> bool:
  func_bool_0_param_1:bool = False
  func_bool_0_param_0:int = 1
  func_bool_0_param_2:int = 1
  def func_none_0():
    class class_0(object):
      pass
    bool_8:bool = False
    number_23:int = 1
    number_24:int = 1
    number_25:int = 1
    number_26:int = 1
    number_27:int = 1
    number_28:int = 1
    number_29:int = 1
    number_30:int = 1
    number_31:int = 1
    number_32:int = 1
    number_33:int = 1
    number_34:int = 1
    number_35:int = 1
    class_0_0:class_0 = None
    class_0_1:class_0 = None
    def func_number_5(func_number_5_param_0: bool, func_number_5_param_1: class_0, func_number_5_param_2: class_0) -> int:
      func_number_5_param_0:bool = False
      bool_10:bool = False
      bool_11:bool = False
      bool_12:bool = False
      bool_13:bool = False
      bool_14:bool = False
      number_36:int = 1
      number_37:int = 1
      number_38:int = 1
      number_39:int = 1
      number_40:int = 1
      number_41:int = 1
      number_42:int = 1
      number_43:int = 1
      number_44:int = 1
      number_45:int = 1
      number_46:int = 1
      number_47:int = 1
      number_48:int = 1
      number_49:int = 1
      number_50:int = 1
      number_51:int = 1
      func_number_5_param_1:class_0 = None
      func_number_5_param_2:class_0 = None
      class_0_2:class_0 = None
      class_0_3:class_0 = None
      class_0_4:class_0 = None
      class_0_5:class_0 = None
      class_0_6:class_0 = None
      class_0_7:class_0 = None
      class_0_8:class_0 = None
      class_0_9:class_0 = None
      def func_number_6(func_number_6_param_0: bool, func_number_6_param_1: int, func_number_6_param_2: int, func_number_6_param_3: class_0, func_number_6_param_4: int, func_number_6_param_5: class_0) -> int:
        func_number_6_param_0:bool = False
        bool_16:bool = False
        func_number_6_param_1:int = 1
        func_number_6_param_2:int = 1
        func_number_6_param_4:int = 1
        number_55:int = 1
        number_56:int = 1
        number_57:int = 1
        number_58:int = 1
        number_59:int = 1
        number_60:int = 1
        number_61:int = 1
        func_number_6_param_3:class_0 = None
        func_number_6_param_5:class_0 = None
        def func_bool_2() -> bool:
          bool_17:bool = False
          number_62:int = 1
          number_63:int = 1
          number_64:int = 1
          number_65:int = 1
          class_0_0:class_0 = None
          def func_number_9() -> int:
            number_66:int = 1
            def func_number_10(func_number_10_param_0: int) -> int:
              func_number_10_param_0:int = 1
              number_68:int = 1
              number_1 % 1 % number_68
              return number_16
            def func_class_1(func_class_1_param_0: int) -> undefined:
              class class_0(object):
                pass
              bool_18:bool = False
              bool_19:bool = False
              bool_20:bool = False
              func_class_1_param_0:int = 1
              number_68:int = 1
              number_69:int = 1
              number_70:int = 1
              number_71:int = 1
              number_72:int = 1
              number_73:int = 1
              number_74:int = 1
              number_75:int = 1
              class_0_0:class_0 = None
              class_0_1:class_0 = None
              class_0_2:class_0 = None
              def func_number_11() -> int:
                def func_bool_3(func_bool_3_param_0: int) -> bool:
                  func_bool_3_param_0:int = 1
                  1
                  number_40
                  return (not (not (not False)))
                func_bool_3(number_12)
                return 1
              def func_number_12(func_number_12_param_0: int) -> int:
                func_number_12_param_0:int = 1
                1
                return 1
              def func_number_13() -> int:
                bool_21:bool = False
                number_76:int = 1
                number_77:int = 1
                1
                func_number_2()
                False
                number_31
                number_76 - 1
                func_number_14(bool_21, 1, (-number_77 % 1), class_0_0, func_class_1(func_number_3()), None, (-1), 1)
                return (-1)
              def func_number_14(func_number_14_param_0: bool, func_number_14_param_1: int, func_number_14_param_2: int, func_number_14_param_3: class_0, func_number_14_param_4: class_0, func_number_14_param_5: class_0, func_number_14_param_6: int, func_number_14_param_7: int) -> int:
                func_number_14_param_0:bool = False
                func_number_14_param_1:int = 1
                func_number_14_param_2:int = 1
                func_number_14_param_6:int = 1
                func_number_14_param_7:int = 1
                number_80:int = 1
                func_number_14_param_3:class_0 = None
                func_number_14_param_4:class_0 = None
                func_number_14_param_5:class_0 = None
                1
                return number_80
              def func_none_2():
                bool_21:bool = False
                bool_22:bool = False
                bool_23:bool = False
                bool_24:bool = False
                bool_25:bool = False
                bool_26:bool = False
                number_76:int = 1
                number_77:int = 1
                number_78:int = 1
                number_79:int = 1
                number_80:int = 1
                number_81:int = 1
                number_82:int = 1
                number_83:int = 1
                number_84:int = 1
                number_85:int = 1
                number_86:int = 1
                number_87:int = 1
                def func_number_15(func_number_15_param_0: int, func_number_15_param_1: int) -> int:
                  func_number_15_param_0:int = 1
                  func_number_15_param_1:int = 1
                  number_51 = number_28
                  return 1
                number_76
                if bool_21:
                  if func_bool_2():
                    number_77
                  else:
                    number_78
                elif (not False or func_bool_1(func_number_14(func_bool_0((-func_number_12(1)), bool_22 != func_bool_2(), 1 // 1), 1, number_13, func_none_2() is func_none_1(func_number_6(bool_23, func_number_14(1 > 1 - func_number_14(bool_24, number_79, 1, None is func_none_0() is func_none_0() is None, None is func_none_0(), class_0_0, (-1), (-1)), func_number_7(func_number_11() <= number_80) * 1, 1, class_0_0, None, func_class_1(func_number_5(func_bool_0(1, bool_25, 1), None, func_class_0(func_number_3() + func_number_8()))), (-1 + number_2 - number_81), (-number_82) * (-number_83 - func_number_2())) // (-number_84 // func_number_2()) * 1, number_68, class_0_1, 1 + 1 // number_85, class_0_0), func_number_3() - func_number_15(number_51, func_number_5(bool_26, None, func_class_1(number_86)))), None, None, number_87 + 1, (-(-1))), 1)) :
                  True
                else:
                  number_68
                return None is None
              if func_bool_0_param_1:
                func_none_1(1, 1)
              else:
                if True:
                  bool_18 = bool_8
                  if (not True):
                    1
                    if True:
                      func_number_3()
                      if 1 > func_number_8():
                        1 * func_number_11()
                      elif bool_19 :
                        (-func_number_6(func_number_12(1) > number_68, func_number_6((not bool_11) == number_15 == 1 + (-func_number_2()), 1 + func_number_9(), 1, class_0_0, number_38, func_class_0(1)) * 1 * (-(-1) - func_number_8()), func_number_13(), None is None is func_none_1((-(-1) // (-number_23) % func_number_12(func_number_1(1, func_number_4(None is func_none_0() is None is None)) % 1)), number_6) is func_none_0() is None is None is None is None, 1, None))
                        (-func_number_6_param_1 + 1)
                        if False:
                          if bool_20:
                            number_69
                            func_number_3()
                          else:
                            (not func_bool_0(1, True, func_number_6_param_4))
                            func_number_4(class_0_1)
                          1
                        1
                        number_70 // func_number_4(None) * 1
                      elif True :
                        (-func_number_11() % func_number_4(class_0_2))
                        1
                      else:
                        1
                        func_number_9()
                      1
                  else:
                    1
                else:
                  (-1 % 1)
                  number_71 = func_number_3()
                  func_none_1(1, (-number_72 * 1) % (-func_number_10(number_19)))
                1
                if (not False):
                  (-1)
                  True
                else:
                  func_number_14(func_bool_2(), number_20, number_73, func_class_0(func_number_7(False) - 1), None, func_class_0(number_74), 1, func_number_8())
              return func_none_1(func_number_6(False, number_75, func_number_12(1), None, 1, class_0_2), number_69) is None is func_none_1(number_66, 1) is func_none_0() is None is None is func_none_2()
            number_66
            False
            func_number_5(bool_1, func_none_0() is func_none_0() is None, func_class_1(func_number_10(func_number_1(1, number_63))))
            return func_number_2()
          1
          1
          1 % func_number_5(bool_14, func_none_0() is None is func_none_1(1, number_42) is None is func_none_1(number_62, (-func_number_1(number_63, 1)) // number_64 // func_number_9()) is None is func_none_1(func_number_8(), number_65) is None is func_none_1(func_number_9(), func_number_3() - 1), class_0_0)
          return func_number_5_param_0 or bool_17
        number_55
        if func_bool_0((-number_56), func_bool_2(), 1 % number_9 * number_57):
          number_15
          func_number_8()
          number_58
          bool_4 = (not (not bool_16))
          number_49 - number_59
          1
        class_0_2
        if func_bool_0(number_6, bool_1, (-1)):
          None is func_none_1(1 - number_60, func_number_8())
          func_none_0()
        else:
          func_none_1(number_61, 1 % 1 - (-1))
        return number_9
      def func_number_7(func_number_7_param_0: bool) -> int:
        func_number_7_param_0:bool = False
        number_52:int = 1
        func_number_0()
        return number_52
      def func_number_8() -> int:
        1
        return 1
      def func_none_1(func_none_1_param_0: int, func_none_1_param_1: int):
        func_none_1_param_0:int = 1
        func_none_1_param_1:int = 1
        number_54:int = 1
        number_55:int = 1
        def func_number_9(func_number_9_param_0: int, func_number_9_param_1: bool) -> int:
          class class_0(object):
            pass
          func_number_9_param_1:bool = False
          func_number_9_param_0:int = 1
          number_57:int = 1
          class_0_0:class_0 = None
          func_bool_1(1, number_46 + (-func_number_2()) + (-func_number_4(class_0_0) * 1 * func_none_1_param_0) + 1 // number_57)
          return number_19
        func_number_8() * 1
        if func_bool_0(1, (-1) % 1 - func_number_9(func_number_1(1, func_number_0()) * 1 - number_54, True or False) == number_20, 1):
          func_bool_0((-func_number_0()) // func_number_5(False, None is None is func_none_0() is None is None is func_none_0() is func_none_0() is None is None, func_none_1(func_number_2(), 1) is None), func_bool_1(number_55, 1), number_41)
        number_38
        return func_none_0() is None
      def func_class_0(func_class_0_param_0: int) -> undefined:
        func_class_0_param_0:int = 1
        class_0_0:class_0 = None
        number_34 = 1
        True
        return func_class_0(func_number_6(func_bool_1(1, 1), func_number_3(), number_10 % 1, None, 1, class_0_0))
      if True:
        1
        if bool_10:
          number_36
        else:
          func_number_6(func_bool_0_param_1, 1, 1, None, func_number_6(True, number_37 - 1, 1 + func_number_3() // number_20, None, number_38, None), None is None) // 1
          1
        class_0_2
        1
      (-(-number_39))
      if False:
        (-1 - func_number_2()) + number_40 - func_number_2()
        func_number_0()
        if True:
          (-1)
          number_41 = (-1) + number_26
        else:
          1 >= func_number_4(None)
          if number_5 > 1:
            bool_0 = func_bool_0(number_17 - 1 - number_30, 1 > 1, number_39)
          if func_bool_1(1, number_29):
            (-func_number_7(func_number_6(True, func_number_6(False, 1, func_number_2(), None, func_number_1((-number_42), 1 - 1 - (-func_number_1(1, 1) - func_number_5(bool_11, None, func_none_0() is None))), class_0_3), 1, None is None is func_none_1(func_bool_0_param_2 % 1, number_43) is None is None is None is None, number_44, None is func_none_0()) <= number_37))
            class_0_4 = class_0_2
            False
          else:
            1 * 1
          class_0_5
          if False:
            1
            bool_12 or func_bool_0((-number_45), True or False, (-1) % number_46)
          else:
            if (not func_bool_1(func_number_6(1 // 1 * 1 % number_10 // number_47 >= number_27, number_6, number_11, func_none_1(func_number_6(func_number_6(bool_13, func_number_3(), 1 * 1, None is func_none_0(), func_number_5(func_bool_0(1, func_bool_1(func_number_0(), number_20) or False, 1), class_0_6, class_0_7) - func_number_3(), class_0_8) % 1 // number_35 <= 1, 1, 1, func_class_0(1), 1, func_none_1((-number_33 % func_number_8()) // (-number_48) + number_11 + number_49, 1) is None), 1) is func_none_0(), number_13 // func_number_1(1 - number_11, func_number_3()), func_class_0(1)), func_number_7((not func_bool_1(number_50, func_number_0()))))):
              func_number_3()
            elif bool_14 :
              1 % 1
              class_0_9
      number_51
      return number_0 * (-number_9)
    number_23 + 1 + number_20 - 1
    if number_5 > number_24:
      number_25 = 1
      if False:
        if True:
          number_26 = func_number_3()
        elif bool_8 :
          func_bool_0((-1), True, number_26)
        number_1 = 1
      elif (not func_bool_0(1, False, number_27)) :
        bool_0
        1
        if bool_8:
          if True:
            None
            func_number_0()
          else:
            func_number_1(func_number_2(), 1 * 1)
            1
            1
            number_28 = number_7
        else:
          number_18
      else:
        func_bool_1(func_number_4(func_none_0() is None) // func_number_1(1, func_number_0()) + number_8, number_29) or (not True)
      (-(-number_30 - func_number_0())) % (-number_31) % (-1) - number_23 - 1 - 1 * func_number_0() * number_32
    else:
      func_number_1(number_33 * 1 % 1 - 1 + func_number_4(class_0_0), func_number_1(1 % number_11 * func_number_1(number_4, func_number_1(number_34, func_number_4(None))), 1)) * 1 * number_35 % func_number_0() == func_bool_1((-func_number_1(func_number_5(func_bool_1((-number_27), number_24), class_0_0, class_0_1), func_number_3())) - func_number_2(), 1)
    return None
  if True:
    func_none_0()
  else:
    None is func_none_0() is None
    1 + 1 // 1 % func_number_1(1, func_number_4(None))
    False
  func_bool_1(1, 1)
  return False
def func_bool_1(func_bool_1_param_0: int, func_bool_1_param_1: int) -> bool:
  func_bool_1_param_0:int = 1
  func_bool_1_param_1:int = 1
  True
  1
  True
  return False
class_0_0
bool_0 = False
if bool_1:
  number_0
  if (not True):
    if bool_2:
      (not True)
    if (not bool_0):
      if False:
        number_1 != number_2 == 1
        if False:
          number_3 = 1 - 1 * func_number_0()
          if (not True):
            1
            if number_4 != None:
              bool_3
              1
            else:
              number_5
              number_3 // (-(-number_6))
              func_number_0() - func_number_0()
          else:
            number_7 = number_2
          if func_number_0() > number_2:
            func_number_1(1, number_1)
            class_0_0
          else:
            number_2 = 1
            if True:
              func_number_1(func_number_0(), func_number_0()) + func_number_1(number_8 - 1, number_7) + 1 % 1
            else:
              None
          False or False
          False
        1 // number_9
        if bool_0:
          1
          True
          1
    else:
      bool_4 = func_bool_0(func_number_2() // (-func_number_0()), func_bool_0(number_0, (not bool_4), func_number_1(func_number_0(), number_4)), func_number_1(func_number_3(), func_number_0()))
      (not (not (not (not func_bool_1(func_number_1(func_number_3(), 1), number_7)))) or True or False == func_number_0() or True)
      class_0_1
  elif (-1) - 1 > number_10 :
    None
  else:
    1 // number_5 % number_11 * 1 % (-number_12 // 1) + func_number_0()
elif bool_5 :
  (-func_number_0()) - 1 + 1 + number_13 * (-1 - number_14) + number_15 * number_16
  number_15 = (-number_17 // func_number_4(None))
elif number_18 >= number_19 * func_number_0() :
  if func_bool_0(number_20, False, 1):
    bool_6
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
bool_0:bool = False
bool_1:bool = False
bool_2:bool = False
def func_number_0() -> int:
  number_3:int = 1
  number_4:int = 1
  number_5:int = 1
  number_6:int = 1
  number_7:int = 1
  number_8:int = 1
  bool_3:bool = False
  bool_4:bool = False
  bool_5:bool = False
  bool_6:bool = False
  bool_7:bool = False
  bool_8:bool = False
  bool_9:bool = False
  def func_number_1() -> int:
    bool_9 = 1 < 1
    1
    number_1
    return 1
  1
  func_number_0() // (-(-number_0)) - func_number_0() - func_number_0() - 1 - (-number_1 // func_number_0()) - 1
  number_2
  None
  if bool_3:
    if func_number_0() % number_0 > 1:
      if bool_3:
        if bool_4:
          func_number_0() - func_number_0() // number_3
        if bool_5:
          1 != (-1)
          1 > number_2
      elif bool_6 :
        number_3
      elif bool_3 :
        number_4
      elif bool_7 :
        number_0 = number_1 - func_number_0()
    else:
      number_5 = number_2
      True
    (-1)
  else:
    if bool_6:
      False
      func_number_0()
    else:
      1
      if False:
        1
        func_number_1() // func_number_0()
        number_2
        bool_8 = bool_9
        if number_6 > 1:
          func_number_1()
        else:
          (not (not (not bool_8)))
          if number_7 * 1 == 1:
            bool_8
          elif 1 % 1 + func_number_0() > func_number_1() or True :
            1
          else:
            number_3
          func_none_0(1 >= number_8) is func_none_0(True)
      number_1
      bool_6
  (-1)
  return func_number_1()
def func_none_0(func_none_0_param_0: bool):
  func_none_0_param_0:bool = False
  bool_4:bool = False
  1
  return func_none_0(bool_4)
if False:
  1 * func_number_0()
if False:
  func_number_0() >= 1
elif True :
  if False:
    if True:
      number_0 - func_number_0() // func_number_0() + 1
      if 1 - number_1 <= func_number_0():
        False
    (not bool_0 or bool_0)
  else:
    if bool_0:
      (-number_2 % number_0 + 1 % 1 // 1) < number_0
      if True:
        1 - (-(-func_number_0())) + 1 + 1 // 1 * 1
        True
        True
      func_none_0(bool_1 or bool_2)
  1
else:
  (-func_number_0() - (-number_0) % number_0)
  if func_number_0() > 1:
    1
    if False:
      number_2
    else:
      1
      func_number_0()
    (not True or False)
  else:
    1
    func_number_0()
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_0 = (-(-1))
None
number_1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0
1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_0 = number_1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
number_0 = number_0
number_1 = (-number_2)
1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
if False:
  number_0
  (not number_1 == number_1)
  (-number_0) + number_2
  (not (not (-1 * number_3 * number_4 % number_3) < 1))
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:(-1 % 1)
None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
number_0:int = 1
def func_number_0(func_number_0_param_0: bool) -> int:
  func_number_0_param_0:bool = False
  bool_2:bool = False
  bool_2
  1
  return func_number_0(False)
bool_0
number_0
(-number_0) * func_number_0(False) + 1
(-number_0)
1 % func_number_0(False) + (-func_number_0((not (not True))) % 1 * func_number_0(False))
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_0 = number_1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:if (not True):
  1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
number_0:int = 1
if bool_0:
  number_0
  number_0
  1
  1
  1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:False
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
None
1 - number_0
1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
if False:
  False
  if True:
    (-(-1 // 1))
    number_0
  else:
    1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:True
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1 <= 1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
number_5:int = 1
number_6:int = 1
def func_number_0() -> int:
  number_7:int = 1
  number_8:int = 1
  number_9:int = 1
  bool_0:bool = False
  if bool_0:
    number_7 = number_8
  elif True :
    func_number_0()
    if (not False):
      number_9 = 1
  else:
    if False:
      1
    func_number_0()
    func_number_0()
  1 - func_number_0()
  return 1
if (-number_0) - 1 // number_0 * (-number_1) > number_2 % (-number_3 - 1) // number_1 - number_0 % number_4 // 1:
  1 % number_5 - 1
else:
  func_number_0()
None
func_number_0()
None
number_6
None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
number_5:int = 1
number_6:int = 1
number_7:int = 1
if False:
  if 1 * number_0 > number_1 + number_1 - number_2 * 1 - number_1:
    1 < number_0 + 1
    number_3 // number_4 - 1 // number_0 % 1 * number_5 * number_1 - number_6 * number_7 + (-number_5) % (-1) % 1 - (-1)
    1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
bool_0:bool = False
bool_1:bool = False
1
number_0
if bool_0 or False:
  bool_0
  True
  number_1
elif False :
  if True:
    if bool_1:
      if (not bool_0):
        1 % (-number_0)
        (-1)
        (not number_0 * 1 > 1)
      1
  else:
    if True:
      (not False)
      1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:def func_number_0() -> int:
  bool_0:bool = False
  number_0:int = 1
  bool_0
  number_0
  func_number_0()
  number_0 = 1
  return 1
func_number_0()
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
None is None is None
(-1)
None
number_0 = 1
if True:
  None
  number_1
  1
  1
  1
  number_2
  1
None is None is None is None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:class class_0(object):
  pass
class_0_0:class_0 = None
class_0_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
def func_number_0(func_number_0_param_0: int) -> int:
  func_number_0_param_0:int = 1
  1
  return 1 + 1
if True:
  (-1)
  1
  number_0
func_number_0(1)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
if True or False:
  1
elif number_0 > 1 :
  1 * 1 - 1
number_0 = number_1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:class class_0(object):
  pass
bool_0:bool = False
bool_1:bool = False
bool_2:bool = False
bool_3:bool = False
number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
number_5:int = 1
class_0_0:class_0 = None
class_0_1:class_0 = None
def func_number_0() -> int:
  number_6:int = 1
  number_6
  return func_number_0()
def func_class_0(func_class_0_param_0: int) -> undefined:
  func_class_0_param_0:int = 1
  number_7:int = 1
  number_7
  return class_0_0
class_0_0
if bool_0:
  1
  if bool_1:
    1 - (-1 // number_0) - (-1 % 1 // (-1 + 1 + (-1 * 1) * 1 % number_0 // (-1) // 1 // (-number_0) - number_0) - (-1)) * number_0 * number_0 - number_1 + 1 % number_2 - func_number_0() // 1 * 1 % 1
  else:
    class_0_1 = func_class_0(number_3)
  if False:
    None
    func_number_0()
    False
    number_4 * 1
    bool_2 = True
  else:
    number_1
    None
    class_0_1
  number_5
  None
  None is None
else:
  (-number_0)
  func_number_0() - 1 < 1
bool_3
1 - func_number_0() * 1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
number_5:int = 1
number_6:int = 1
number_7:int = 1
number_8:int = 1
number_9:int = 1
bool_0:bool = False
bool_1:bool = False
bool_2:bool = False
bool_3:bool = False
bool_4:bool = False
def func_number_0() -> int:
  number_10:int = 1
  number_11:int = 1
  number_12:int = 1
  number_13:int = 1
  number_14:int = 1
  number_15:int = 1
  number_16:int = 1
  number_17:int = 1
  number_18:int = 1
  number_19:int = 1
  number_20:int = 1
  number_21:int = 1
  number_22:int = 1
  bool_5:bool = False
  bool_6:bool = False
  bool_7:bool = False
  def func_bool_0() -> bool:
    1
    number_14 = 1 // number_0 * func_number_0()
    (-1)
    None
    return bool_1
  def func_bool_1(func_bool_1_param_0: int) -> bool:
    func_bool_1_param_0:int = 1
    None is None is None is None is None is None
    return False
  def func_bool_2() -> bool:
    number_23:int = 1
    number_23
    return func_bool_2()
  if False:
    number_10 // 1
    number_5
  else:
    if True:
      if (not bool_5):
        if True:
          number_3 = (-1)
          1 - 1 - number_11 * number_12
          bool_6
          number_13 // func_number_0()
        elif True :
          func_number_0()
          (-(-1 * number_3 + func_number_0()))
          bool_5
        elif True :
          if func_bool_0() or True:
            number_14 = 1 + number_15
          if False:
            if bool_6:
              True
            else:
              False
            1 - 1
          else:
            if 1 * 1 < (-1):
              1
            elif bool_7 :
              1 // func_number_0() - func_number_0() - func_number_0() + 1 < number_5
              (-1)
              1
            else:
              if bool_7:
                func_number_0()
                number_16 % 1
                if 1 + (-func_number_0()) == (-number_17):
                  number_12
                  number_18
                if True:
                  func_number_0()
                  func_bool_1(number_19)
                else:
                  func_number_0()
                  number_20
                  if bool_3:
                    func_number_0()
                  func_number_0()
              else:
                1
      elif True :
        1
    elif func_bool_1(func_number_0() % 1) :
      number_21 = 1 + 1
      number_22 = (-func_number_0())
    number_16 * func_number_0()
    1
    func_bool_0()
    func_number_0()
    func_bool_2()
    func_number_0()
  return (-number_19)
if 1 <= 1:
  1
  (-(-1 * 1 + number_0))
  number_1
  None
  1
  if bool_0:
    False
  number_0 + number_1 // number_2 * 1
  (-(-(-1)))
  number_0 <= number_3
else:
  if bool_1:
    if 1 + 1 + (-(-number_2)) % number_4 != number_5:
      True
    else:
      number_4
      1
  else:
    1 - 1
    number_6 = 1 + 1 + func_number_0() - 1 + 1
    1 + 1
    number_7 = func_number_0()
    if bool_1 or (not True):
      1 - func_number_0()
    elif False :
      if bool_2:
        func_number_0() * func_number_0()
        if True:
          1
        else:
          if (not (-number_8) >= number_3):
            bool_3
            func_number_0() + func_number_0()
        number_7 = func_number_0()
      elif (not True) :
        bool_4
        (not number_7 == number_9)
      else:
        func_number_0()
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
number_5:int = 1
number_6:int = 1
number_7:int = 1
number_8:int = 1
number_9:int = 1
number_10:int = 1
bool_0:bool = False
bool_1:bool = False
def func_number_0(func_number_0_param_0: int) -> int:
  func_number_0_param_0:int = 1
  number_12:int = 1
  number_13:int = 1
  number_14:int = 1
  number_15:int = 1
  number_16:int = 1
  number_17:int = 1
  number_18:int = 1
  number_19:int = 1
  number_20:int = 1
  bool_2:bool = False
  def func_number_1(func_number_1_param_0: int) -> int:
    func_number_1_param_0:int = 1
    number_22:int = 1
    number_22 + 1
    return 1
  def func_number_2(func_number_2_param_0: int, func_number_2_param_1: int, func_number_2_param_2: int, func_number_2_param_3: int, func_number_2_param_4: int) -> int:
    func_number_2_param_0:int = 1
    func_number_2_param_1:int = 1
    func_number_2_param_2:int = 1
    func_number_2_param_3:int = 1
    func_number_2_param_4:int = 1
    None
    return 1
  def func_number_3() -> int:
    number_21:int = 1
    number_22:int = 1
    bool_3:bool = False
    func_number_0(1)
    if False:
      None
      1 == 1
      if bool_3:
        False
      elif True :
        (-1)
      else:
        if True:
          1
          bool_3
          number_21
        number_13
    number_8
    return number_22
  number_2
  if bool_2:
    number_5
  elif func_bool_0() :
    func_number_0((-number_1))
    1 - func_number_0(func_number_0(func_number_0(func_number_0(func_number_0(func_number_0(1)))) - 1 % (-1) // func_number_0(func_number_0(number_12))))
  elif 1 % number_13 % func_number_1(1) != number_13 // 1 // 1 :
    False
    if bool_1 or func_bool_0():
      bool_0 = 1 >= func_number_1(1)
      (-func_number_0(number_14) // 1 % number_2) + func_number_0(1)
    elif bool_1 :
      func_number_2(number_15 * 1, 1, number_8, func_number_2(number_5, number_3, 1, 1, 1), func_number_0(number_16)) * (-func_number_0(1) * (-1))
    elif func_bool_0() :
      if None is None is None is None is None == number_13:
        (-func_number_3() * 1)
      else:
        if func_bool_0():
          func_number_2(1, func_number_0(1), 1 // 1, number_16, func_number_0((-number_17 % 1)))
          1
        elif func_bool_0() :
          if 1 > func_number_3():
            (-1 - 1)
        else:
          number_18
          1 - func_number_1(1)
          1 * 1
        number_19 // 1 - 1
        number_18
        (-1 - 1)
  else:
    1
    func_bool_0()
    number_20 = number_9 - 1
  func_bool_0()
  func_bool_0()
  1
  return func_number_3()
def func_bool_0() -> bool:
  number_11:int = 1
  1 - number_10
  (-func_number_0((-func_number_0((-1)))) // 1)
  number_6 = number_11
  return True
if True:
  if True:
    number_0 // 1
    number_0 = (-1)
    1
    number_1 // number_1
    if bool_0:
      if 1 // 1 // 1 >= 1 + (-1 + func_number_0(func_number_0(func_number_0(1)))):
        func_number_0(1) % 1
      else:
        if (not bool_1):
          1
        else:
          number_2 = 1
          1
          1
          number_2 + func_number_0(1) // func_number_0((-func_number_0(1))) % 1 + (-1 - number_0 * number_0 % number_3) + (-number_4) % 1 - func_number_0(func_number_0(func_number_0(number_5) // (-(-func_number_0(1))))) - number_6
        1
        func_number_0(1)
  else:
    1
  number_7 // number_8 % number_9
elif (not 1 > (-1)) :
  func_bool_0() == number_10
(-1 + (-1))
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
bool_0
1
1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_0 % number_1 // number_0 + 1 % 1 * 1 % number_2 + number_2 - 1 - number_3
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0
1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0
None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
1 % (-(-1 + number_0))
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
bool_0:bool = False
def func_number_0() -> int:
  func_number_0()
  return func_number_0()
1
number_0
(-1 - 1 % 1 // 1)
if bool_0:
  True or False
  1 % func_number_0()
number_0 + 1
func_number_0() * number_1
number_1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
if bool_0:
  (not False)
1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_0 + number_1 % (-1) * number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0 = (-number_0) + number_0 // 1 % 1 - 1
True
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:class class_0(object):
  pass
number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
class_0_0:class_0 = None
def func_class_0() -> undefined:
  number_4:int = 1
  (-1) % number_4
  func_number_0(1, 1)
  1
  return func_class_0()
def func_number_0(func_number_0_param_0: int, func_number_0_param_1: int) -> int:
  func_number_0_param_0:int = 1
  func_number_0_param_1:int = 1
  number_6:int = 1
  (-1 - 1) - func_number_0(1, (-1 + number_6 // 1))
  1
  return (-1)
1 // 1
func_class_0()
number_0 = 1 % (-1)
False
class_0_0
(-1 - 1 + (-1 + func_number_0(number_0, 1 // number_1)) * 1 - number_0 + (-1 + 1 * 1) - 1 // number_2 % number_3 * 1)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
bool_1:bool = False
number_0:int = 1
number_1:int = 1
number_2:int = 1
if True:
  1
elif bool_0 :
  (not (not (-1) + (-(-1)) // number_0 > 1))
elif bool_0 :
  number_0
  number_1 - (-1)
  bool_1
else:
  number_2
number_2
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0 = 1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0
if 1 > (-1):
  (-number_0)
True
1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:None is None
False
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
bool_1:bool = False
bool_2:bool = False
number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
number_5:int = 1
number_6:int = 1
number_7:int = 1
number_8:int = 1
number_9:int = 1
number_10:int = 1
def func_bool_0() -> bool:
  bool_3:bool = False
  number_11:int = 1
  number_12:int = 1
  number_13:int = 1
  number_14:int = 1
  number_15:int = 1
  number_16:int = 1
  number_17:int = 1
  if True:
    number_11 = number_12
    number_2 = 1
    bool_2 = func_bool_0()
    number_12 = 1
    number_13
    number_14
  number_15 = (-1)
  1 // 1 - 1 // number_16 - number_17
  return bool_3
def func_bool_1() -> bool:
  number_11:int = 1
  number_11
  number_0 = 1
  return func_bool_0()
def func_none_0():
  number_11:int = 1
  1 + (-(-1))
  (-1) < number_11
  return None
1
if (not (not (not True))):
  (not func_bool_0() or bool_0)
  1
  1 % number_0
  if bool_0:
    number_1
    (-1)
  else:
    if 1 * 1 * number_2 <= number_3:
      number_4 // (-(-(-1) // 1 - 1) - 1 // 1) - 1
    else:
      number_5 = 1
else:
  if False:
    1
    func_none_0() is None is None
    1
    None is func_none_0()
  elif True :
    1 // number_4 // number_6
    if True:
      if number_5 != 1 // number_4 - number_7 + (-1) % number_3 + (-number_4) - number_2:
        None
        (not (not bool_0))
      if True:
        if True or bool_1:
          if number_7 > number_8:
            number_4 = number_2
            if False:
              if bool_2:
                number_4
                1
              else:
                1
            else:
              if False:
                func_bool_1()
              True
              1
          else:
            number_9
            (not 1 < 1)
        elif bool_2 :
          (-1 - 1)
      else:
        func_bool_1()
        if False:
          number_10
        else:
          False
        1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
number_0:int = 1
number_1:int = 1
number_2:int = 1
if bool_0:
  number_0
  number_1 % number_2
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
bool_1:bool = False
bool_2:bool = False
bool_3:bool = False
number_0:int = 1
number_1:int = 1
if True:
  if (not bool_0):
    1
    bool_1
    (-1)
    number_0 = (-number_1)
  elif bool_2 :
    None
    True
    if True:
      1
      1
      1 * 1
    else:
      None
    1
  elif 1 > (-1) * 1 :
    1 % (-1 % number_1 + 1)
    number_1
    number_0
else:
  False
  None
(not bool_3)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:class class_0(object):
  pass
class_0_0:class_0 = None
1
class_0_0 = None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
number_0:int = 1
if bool_0:
  (-number_0)
None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
1
number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:def func_number_0() -> int:
  number_0:int = 1
  number_1:int = 1
  number_0 = 1
  func_number_0() < number_1
  return 1
False
func_number_0() + 1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
(-number_0)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
def func_number_0(func_number_0_param_0: int) -> int:
  func_number_0_param_0:int = 1
  if (not False):
    (-func_number_0(func_number_0(1)))
    func_number_0(func_number_0(func_number_0(func_number_0(1))))
    func_number_0(1)
  return (-number_0)
(-func_number_0(number_0))
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
number_5:int = 1
number_6:int = 1
number_7:int = 1
number_8:int = 1
number_9:int = 1
number_10:int = 1
number_11:int = 1
number_12:int = 1
number_13:int = 1
number_14:int = 1
number_15:int = 1
number_16:int = 1
number_17:int = 1
number_18:int = 1
number_19:int = 1
number_20:int = 1
number_21:int = 1
number_22:int = 1
number_23:int = 1
number_24:int = 1
number_25:int = 1
number_26:int = 1
number_27:int = 1
number_28:int = 1
number_29:int = 1
number_30:int = 1
number_31:int = 1
number_32:int = 1
number_33:int = 1
number_34:int = 1
number_35:int = 1
number_36:int = 1
number_37:int = 1
number_38:int = 1
number_39:int = 1
number_40:int = 1
number_41:int = 1
number_42:int = 1
number_43:int = 1
number_44:int = 1
number_45:int = 1
number_46:int = 1
number_47:int = 1
number_48:int = 1
number_49:int = 1
number_50:int = 1
number_51:int = 1
number_52:int = 1
number_53:int = 1
number_54:int = 1
bool_0:bool = False
bool_1:bool = False
bool_2:bool = False
bool_3:bool = False
bool_4:bool = False
bool_5:bool = False
bool_6:bool = False
bool_7:bool = False
bool_8:bool = False
bool_9:bool = False
bool_10:bool = False
bool_11:bool = False
bool_12:bool = False
bool_13:bool = False
bool_14:bool = False
bool_15:bool = False
bool_16:bool = False
bool_17:bool = False
bool_18:bool = False
bool_19:bool = False
def func_number_0() -> int:
  number_55:int = 1
  number_56:int = 1
  bool_20:bool = False
  None
  1 + func_number_2()
  number_48
  return (-func_number_7((-func_number_2() % (-number_55)) + 1 * number_56, bool_20))
def func_number_1() -> int:
  number_55:int = 1
  number_47
  number_55
  1
  return number_42 * number_14
def func_number_2() -> int:
  number_55:int = 1
  number_56:int = 1
  bool_20:bool = False
  False
  if False:
    if (not False):
      func_number_7(1, True)
      number_55
    else:
      if bool_20:
        1
      else:
        func_number_7(number_36, number_56 * number_29 > (-1))
  return func_number_6((-func_number_5()), False, 1, 1, True, 1, 1)
def func_number_3(func_number_3_param_0: int, func_number_3_param_1: int, func_number_3_param_2: int, func_number_3_param_3: int, func_number_3_param_4: int, func_number_3_param_5: int, func_number_3_param_6: bool, func_number_3_param_7: int) -> int:
  func_number_3_param_0:int = 1
  func_number_3_param_1:int = 1
  func_number_3_param_2:int = 1
  func_number_3_param_3:int = 1
  func_number_3_param_4:int = 1
  func_number_3_param_5:int = 1
  func_number_3_param_7:int = 1
  number_62:int = 1
  number_63:int = 1
  number_64:int = 1
  number_65:int = 1
  number_66:int = 1
  number_67:int = 1
  number_68:int = 1
  number_69:int = 1
  number_70:int = 1
  func_number_3_param_6:bool = False
  bool_21:bool = False
  def func_number_11() -> int:
    func_number_8() + (-func_number_11())
    func_number_3_param_2
    return 1
  if False:
    1 * (-number_62) + 1 - 1 + number_63 - number_64 + number_65
  func_number_6(number_20 * 1, bool_14, func_number_6(func_number_10(bool_13), (not False), number_66 + 1 - (-number_23), 1, func_number_7(func_number_8(), bool_2) == bool_21, number_67, 1 % func_number_5() % number_22), 1, func_bool_0(number_68, func_bool_1((-number_69)), bool_15, func_number_0()), (-func_number_11()), number_65)
  return number_70
def func_number_4() -> int:
  number_55:int = 1
  None
  number_6
  return number_55
def func_number_5() -> int:
  func_number_8()
  return 1
def func_number_6(func_number_6_param_0: int, func_number_6_param_1: bool, func_number_6_param_2: int, func_number_6_param_3: int, func_number_6_param_4: bool, func_number_6_param_5: int, func_number_6_param_6: int) -> int:
  func_number_6_param_0:int = 1
  func_number_6_param_2:int = 1
  func_number_6_param_3:int = 1
  func_number_6_param_5:int = 1
  func_number_6_param_6:int = 1
  number_60:int = 1
  number_61:int = 1
  number_62:int = 1
  number_63:int = 1
  number_64:int = 1
  number_65:int = 1
  number_66:int = 1
  number_67:int = 1
  number_68:int = 1
  number_69:int = 1
  number_70:int = 1
  number_71:int = 1
  number_72:int = 1
  number_73:int = 1
  number_74:int = 1
  number_75:int = 1
  number_76:int = 1
  number_77:int = 1
  number_78:int = 1
  number_79:int = 1
  number_80:int = 1
  number_81:int = 1
  number_82:int = 1
  number_83:int = 1
  number_84:int = 1
  number_85:int = 1
  number_86:int = 1
  number_87:int = 1
  number_88:int = 1
  number_89:int = 1
  number_90:int = 1
  number_91:int = 1
  number_92:int = 1
  number_93:int = 1
  number_94:int = 1
  number_95:int = 1
  number_96:int = 1
  number_97:int = 1
  number_98:int = 1
  number_99:int = 1
  number_100:int = 1
  number_101:int = 1
  number_102:int = 1
  number_103:int = 1
  number_104:int = 1
  number_105:int = 1
  number_106:int = 1
  number_107:int = 1
  number_108:int = 1
  number_109:int = 1
  number_110:int = 1
  number_111:int = 1
  number_112:int = 1
  number_113:int = 1
  number_114:int = 1
  number_115:int = 1
  number_116:int = 1
  number_117:int = 1
  number_118:int = 1
  number_119:int = 1
  number_120:int = 1
  number_121:int = 1
  func_number_6_param_1:bool = False
  func_number_6_param_4:bool = False
  bool_22:bool = False
  bool_23:bool = False
  bool_24:bool = False
  bool_25:bool = False
  bool_26:bool = False
  bool_27:bool = False
  bool_28:bool = False
  bool_29:bool = False
  bool_30:bool = False
  bool_31:bool = False
  bool_32:bool = False
  def func_number_11(func_number_11_param_0: int, func_number_11_param_1: int, func_number_11_param_2: bool) -> int:
    func_number_11_param_0:int = 1
    func_number_11_param_1:int = 1
    number_124:int = 1
    number_125:int = 1
    number_126:int = 1
    func_number_11_param_2:bool = False
    func_number_4()
    number_124
    func_number_0() + 1
    number_82
    return number_75 - func_number_12(number_125) + number_126
  def func_number_12(func_number_12_param_0: int) -> int:
    func_number_12_param_0:int = 1
    number_43
    1
    func_number_0() * 1
    func_number_12(func_number_14(func_bool_1(number_3))) % number_76
    return 1
  def func_number_13() -> int:
    number_122:int = 1
    number_123:int = 1
    number_124:int = 1
    number_125:int = 1
    bool_33:bool = False
    bool_34:bool = False
    bool_35:bool = False
    def func_number_19() -> int:
      number_119 - 1 % 1 <= func_number_6_param_6
      number_44
      (-1) * 1 % func_number_5()
      func_number_16(1, 1)
      return 1
    if bool_33:
      number_14 = 1
      bool_34
      (-(-number_76 * func_number_18(1, (not number_105 < number_8)))) % func_number_19()
    else:
      1
      number_4
      number_122 = 1
      (-1)
      if bool_11:
        if (not True):
          1
          number_123 > func_number_12(number_65)
          (-1)
        elif bool_35 :
          1
          True
          number_119
        else:
          number_124
        number_39 = number_115
        number_125
      elif bool_1 :
        if False:
          1
      elif True or func_bool_3(1, 1 - 1 - 1 * func_number_8(), False) :
        number_122
      else:
        (not False)
        if func_bool_0(func_number_13(), func_bool_1(func_number_10(False)), True, 1):
          (-1) // func_number_19()
    return func_number_18(number_96, False)
  def func_number_14(func_number_14_param_0: bool) -> int:
    number_122:int = 1
    func_number_14_param_0:bool = False
    number_122 * number_41 // (-(-1))
    return 1
  def func_number_15(func_number_15_param_0: int) -> int:
    func_number_15_param_0:int = 1
    1
    return func_number_1()
  def func_number_16(func_number_16_param_0: int, func_number_16_param_1: int) -> int:
    func_number_16_param_0:int = 1
    func_number_16_param_1:int = 1
    number_124:int = 1
    number_125:int = 1
    number_126:int = 1
    number_127:int = 1
    number_128:int = 1
    number_129:int = 1
    bool_33:bool = False
    bool_34:bool = False
    def func_number_19() -> int:
      number_130:int = 1
      number_131:int = 1
      number_132:int = 1
      number_133:int = 1
      bool_35:bool = False
      def func_number_20() -> int:
        number_98
        return number_12
      def func_number_21() -> int:
        number_134:int = 1
        number_135:int = 1
        number_136:int = 1
        number_137:int = 1
        number_138:int = 1
        number_139:int = 1
        number_140:int = 1
        number_141:int = 1
        number_142:int = 1
        number_143:int = 1
        number_144:int = 1
        number_145:int = 1
        number_146:int = 1
        bool_36:bool = False
        def func_number_22() -> int:
          number_147:int = 1
          number_148:int = 1
          number_149:int = 1
          number_150:int = 1
          number_151:int = 1
          number_152:int = 1
          number_147
          return func_number_12(func_number_11(1 + (-number_148), number_149, False) + func_number_6(func_number_18(1, func_bool_1(1 + func_number_5())), False, 1, (-number_150), 1 >= (-1 % 1) * number_151, 1, func_number_18(1, True) // 1 % number_152) // 1) % 1
        def func_number_23(func_number_23_param_0: int) -> int:
          func_number_23_param_0:int = 1
          number_148:int = 1
          bool_37:bool = False
          bool_38:bool = False
          number_148 = number_102
          bool_37 = func_bool_0(func_number_7(func_number_10(bool_38), bool_7 or (not True)), (not True), False, 1)
          return number_43
        def func_bool_5(func_bool_5_param_0: int) -> bool:
          func_bool_5_param_0:int = 1
          1 - func_number_0()
          bool_12
          return False
        def func_bool_6() -> bool:
          number_147:int = 1
          bool_37:bool = False
          if bool_37:
            number_147
          return False
        if (not 1 % number_134 % 1 <= func_number_11(1 // func_number_13(), func_number_22() * 1 - func_number_11(1, func_number_6(1, func_bool_3((-func_number_0()), number_6, bool_36), func_number_12(func_number_2()), 1, (not True) or bool_14, 1, 1), False), number_135 >= number_136) - number_137):
          if False:
            number_72 = func_number_16(number_125, 1 % number_138 % func_number_10(True))
            if bool_9:
              if 1 != number_139:
                1
              else:
                func_bool_0(func_number_23(1), func_bool_4(), func_bool_0(1 + (-1), (not number_140 >= 1), False, number_141), func_number_14(False))
                (not func_bool_4())
                1
                number_142 = func_number_3(1, 1, func_number_1(), 1, (-(-number_143)) % number_144, func_number_0(), True, number_35)
            (not 1 >= func_number_10(True))
          elif func_bool_5(1) :
            if func_number_6_param_1:
              1
            func_number_14((not (-func_number_13()) > number_35 or number_145 == bool_32))
          elif func_bool_0(func_number_17(), (-func_number_12(number_93)) <= 1, func_bool_3(func_number_13(), 1 + func_number_14(True) - number_146 + number_80, func_bool_6()), 1) :
            func_number_18((-1), False)
          else:
            number_72
        else:
          bool_33
          func_bool_6()
        bool_32 = True
        return 1
      if (not bool_17):
        if func_bool_3((-1), (-1 % 1), True or number_130 <= func_number_5() % 1):
          number_131
      elif func_bool_2(number_116 // (-func_number_20()), func_number_17(), func_bool_1(func_number_21()), 1) :
        (-1)
      1
      (not number_132 < number_133 or func_bool_0(1, 1 != number_73, bool_35, number_13))
      return 1
    (-number_34)
    if bool_33:
      number_95
      func_number_6_param_6 // number_1
    elif bool_34 :
      func_number_4() * func_number_3(1, func_number_3(number_23 + (-1), (-1 - (-func_number_5())), number_124, (-func_number_16(func_number_19(), (-(-number_121) // number_125) + number_39)), func_number_13(), 1, func_number_15((-number_69)) < number_112, 1 % 1 - number_126), 1 % number_78 * 1 + func_number_17(), number_51, (-(-func_number_12(func_number_19() % func_number_1()))), 1 % func_number_14(False), 1 // func_number_9() * number_71 < func_number_4(), func_number_15(1)) + number_127
    else:
      func_number_18(func_number_8() + number_39, True)
      func_none_0()
      number_128 - number_71
    return number_129
  def func_number_17() -> int:
    number_122:int = 1
    number_123:int = 1
    number_124:int = 1
    number_125:int = 1
    number_126:int = 1
    number_127:int = 1
    number_128:int = 1
    number_129:int = 1
    number_130:int = 1
    number_131:int = 1
    number_132:int = 1
    number_133:int = 1
    number_134:int = 1
    number_135:int = 1
    number_136:int = 1
    number_137:int = 1
    number_138:int = 1
    number_139:int = 1
    number_140:int = 1
    number_141:int = 1
    number_142:int = 1
    number_143:int = 1
    number_144:int = 1
    number_145:int = 1
    number_146:int = 1
    number_147:int = 1
    number_148:int = 1
    number_149:int = 1
    bool_33:bool = False
    bool_34:bool = False
    bool_35:bool = False
    bool_36:bool = False
    bool_37:bool = False
    bool_38:bool = False
    bool_39:bool = False
    def func_number_19(func_number_19_param_0: int) -> int:
      func_number_19_param_0:int = 1
      number_151:int = 1
      number_152:int = 1
      bool_40:bool = False
      def func_number_21(func_number_21_param_0: bool) -> int:
        number_153:int = 1
        number_154:int = 1
        number_155:int = 1
        number_156:int = 1
        func_number_21_param_0:bool = False
        def func_bool_7() -> bool:
          number_157:int = 1
          number_157
          return bool_11
        number_153
        number_42 = number_154
        return number_155 * number_137 % number_156 - 1 + (-func_number_14(func_bool_7())) - number_46 % 1
      (-1)
      if True:
        1 < number_34
        if func_bool_0(number_10, func_bool_4(), (not bool_4), 1):
          1
          1
          1
        elif bool_40 :
          if False:
            (-1 - (-func_number_0()) % 1 * number_151)
            1 * func_number_16(number_94, 1)
            func_number_21((not func_bool_1(1)))
      else:
        number_152 = number_2
      number_24
      return 1
    def func_number_20() -> int:
      number_150:int = 1
      number_151:int = 1
      (-number_150)
      number_1
      None
      return number_151
    def func_bool_5(func_bool_5_param_0: bool, func_bool_5_param_1: int, func_bool_5_param_2: int) -> bool:
      func_bool_5_param_1:int = 1
      func_bool_5_param_2:int = 1
      number_152:int = 1
      number_153:int = 1
      number_154:int = 1
      number_155:int = 1
      number_156:int = 1
      number_157:int = 1
      number_158:int = 1
      number_159:int = 1
      number_160:int = 1
      number_161:int = 1
      func_bool_5_param_0:bool = False
      bool_41:bool = False
      bool_42:bool = False
      def func_number_21() -> int:
        number_162:int = 1
        number_163:int = 1
        number_158
        number_162
        return number_163
      def func_number_22(func_number_22_param_0: int, func_number_22_param_1: bool) -> int:
        func_number_22_param_0:int = 1
        func_number_22_param_1:bool = False
        func_number_2()
        return 1
      def func_number_23(func_number_23_param_0: bool) -> int:
        number_162:int = 1
        number_163:int = 1
        func_number_23_param_0:bool = False
        number_162
        1
        False
        number_163 = 1
        False
        return 1
      if func_bool_6(func_number_15(number_152) > func_number_4(), (-1), number_43, number_153, bool_41):
        if False:
          if False:
            func_number_11(number_154, 1, (not True))
            number_155
        else:
          1
        (-1)
        number_99 = func_number_14(1 < 1 // func_number_20() * 1) + number_156 % func_number_13() // 1
      elif func_bool_1(func_number_7(number_157, False)) :
        func_number_16(1, 1)
        if bool_25:
          1
        elif bool_15 :
          number_43 = func_number_15(1)
        else:
          (-1)
          if True:
            if True:
              number_158 = func_number_8()
              1
            elif bool_42 :
              number_159
        (-func_number_21())
        number_160
        1 > number_61
        func_number_22(number_161, True)
      else:
        False
        bool_19 = func_bool_0(func_number_23((-number_44) == None), False or False, (-(-1)) < number_34, 1)
      return False
    def func_bool_6(func_bool_6_param_0: bool, func_bool_6_param_1: int, func_bool_6_param_2: int, func_bool_6_param_3: int, func_bool_6_param_4: bool) -> bool:
      func_bool_6_param_1:int = 1
      func_bool_6_param_2:int = 1
      func_bool_6_param_3:int = 1
      func_bool_6_param_0:bool = False
      func_bool_6_param_4:bool = False
      1 % 1 + 1 * number_82
      return False
    if func_bool_0(number_122, func_bool_3(1, 1, bool_33), number_83 // func_number_7((-1), (not func_bool_0(1, bool_26, bool_34, (-(-number_123))))) >= func_number_18(number_63 - 1, bool_11 or func_number_1() <= func_number_1()), func_number_14((not 1 >= 1))):
      if bool_35:
        number_124
        if bool_5:
          bool_36 = func_bool_3((-(-number_125)) % 1 + func_number_18(func_number_19(1) * number_126 + (-1), (not (not True)) or False), number_127, func_bool_1(1))
        elif False :
          None
          number_128 = 1 * 1
          func_bool_5(True, number_43, 1)
        else:
          None
        True
        if True:
          number_91
          1
          True
          if False:
            number_129
          if func_bool_4():
            func_number_14(func_number_11(func_number_14(func_bool_0(func_number_7(func_number_8(), bool_37), False, func_bool_4(), (-func_number_1()))), 1 % number_130, False) <= func_number_15(number_52 // 1 % 1 - 1))
          elif 1 > (-1) :
            1
            False
            1
            number_127
            1 // 1 + number_14 % 1 % number_27 // (-(-number_131) - func_number_12(func_number_11((-func_number_20()) + func_number_3(func_number_11(number_132, func_number_14(func_bool_3(func_number_19(number_133), (-1), True)), False), func_number_20(), func_number_0() * (-func_number_1()) - (-func_number_8() * func_number_1()), number_134 % func_number_7((-func_number_6(func_number_4(), (-func_number_8()) != (-func_number_5() % (-1)), number_135, func_number_13(), func_bool_5(bool_36, 1, func_number_10(1 < 1)), number_136, func_number_15(1))), bool_34 or True) * number_137, (-1), 1, func_bool_2(number_68, number_35, bool_30, number_51), number_138) // func_number_11(number_139, 1, func_number_10(False == bool_38 or func_number_6(number_140, True, (-func_number_8()) + 1 // 1 // 1 % number_141, (-number_142), func_bool_3(func_number_6_param_0, func_number_8() // func_number_20(), bool_39), 1 // (-func_number_9()), 1) - 1 != func_number_13()) < 1) % number_143 % number_134 % 1, 1 % 1, func_bool_0(number_144 - 1, func_bool_6(func_bool_4(), func_number_4(), (-1 % 1 // 1 + (-number_145)), func_number_0(), func_bool_4()), func_number_18(number_146, False) > 1, number_147)) + (-number_69)) // number_111)
            if func_bool_1(func_number_16(1, number_148)):
              number_103 = func_number_14((not True))
              func_number_14(True)
            func_none_0() is func_none_0()
            func_number_1()
            number_131
          number_15 + 1
    else:
      func_number_2() * number_149
    return 1
  def func_number_18(func_number_18_param_0: int, func_number_18_param_1: bool) -> int:
    func_number_18_param_0:int = 1
    func_number_18_param_1:bool = False
    number_95
    return (-1)
  def func_bool_2(func_bool_2_param_0: int, func_bool_2_param_1: int, func_bool_2_param_2: bool, func_bool_2_param_3: int) -> bool:
    func_bool_2_param_0:int = 1
    func_bool_2_param_1:int = 1
    func_bool_2_param_3:int = 1
    number_125:int = 1
    func_bool_2_param_2:bool = False
    number_125 = number_18
    return True
  def func_bool_3(func_bool_3_param_0: int, func_bool_3_param_1: int, func_bool_3_param_2: bool) -> bool:
    func_bool_3_param_0:int = 1
    func_bool_3_param_1:int = 1
    func_bool_3_param_2:bool = False
    func_none_0()
    return True
  def func_bool_4() -> bool:
    number_122:int = 1
    (not bool_13)
    if func_bool_3(number_109 * (-1), func_number_15(1 // func_number_8()), 1 <= 1):
      number_122
      func_none_0()
    return True
  def func_none_0():
    1
    return None
  1
  1
  if func_bool_0((-number_8 * 1), func_bool_1(1), False, (-(-func_number_0()))):
    (not False)
    if bool_22:
      if (not func_bool_1(func_number_11(func_number_5(), 1 * 1, (not func_bool_0(1, False, bool_23, number_60))))):
        func_number_1() * 1 + func_number_8() // func_number_4() % 1
        number_61 = 1
    func_number_3(func_number_0(), 1 // 1, number_62, 1, (-1), 1 + func_number_2(), True, 1) - 1
  else:
    1
  1
  if False or func_bool_0(number_63, func_bool_0(number_64, func_bool_0(1 + 1 - func_number_9(), 1 // 1 >= 1, number_65 >= 1 % number_66 // (-number_67), number_68), func_bool_1(func_number_1()), 1), func_bool_0((-1 + 1), bool_8, 1 == number_69 - func_number_11((-func_number_7(number_70, (not func_bool_1(1)))), 1, bool_24), (-number_36)), 1) or func_bool_1(1):
    if False:
      if (not True):
        if bool_25:
          1
        if True:
          (-func_number_12(func_number_3(number_19, number_71 - func_number_5(), number_52, 1, 1, func_number_12(1 % 1), (not True), 1)))
        if False:
          (-1)
        elif True :
          number_72 = number_73
          (-1 // 1)
      if False:
        func_number_11(func_number_6(number_74, 1 >= 1, 1, number_52, number_75 + number_76 == 1 * 1 - number_70, number_1, 1) // number_77, number_78, False)
        number_79
      elif 1 > 1 :
        if func_number_2() < (-1):
          func_number_4() + (-(-number_11 + (-(-number_80) + func_number_8()) % 1 * number_81 % 1 % func_number_5() - (-(-func_number_12(number_82 - 1)))))
          number_83
        else:
          (-(-number_84 * number_60))
          number_64
      else:
        number_25 = number_15
        if func_number_6_param_1:
          if func_bool_1(number_85):
            func_bool_1((-func_number_6(1 + 1, number_83 - 1 * func_number_8() % 1 * (-func_number_7((-1), True)) != 1 >= func_number_10((not True)), 1, 1, func_bool_0(func_number_3(func_number_9(), 1, (-1 - 1), func_number_8() - func_number_4() + 1 % number_86, number_87, func_number_1(), bool_22, (-1)), func_bool_0(func_number_11(func_number_5() * func_number_10(func_bool_0(1 // 1, (not func_bool_1(number_88)), False, number_89)), number_90 // 1, bool_26), True, func_bool_2(number_91, func_number_6_param_6, (not 1 < 1), 1), number_92 % func_number_2()), True, func_number_9()) or (not 1 == number_74), number_93, 1)))
          bool_27
          1 > 1
        True
        bool_0
    else:
      (-(-(-1) * 1 % 1))
    number_94
    if bool_28:
      func_number_6_param_0
      if func_bool_3(1 * number_95 // number_12, (-func_number_11(func_number_8() + 1, 1, (not True or False))), (not func_bool_4())):
        number_90
      elif False :
        func_number_1()
      if False:
        bool_25
        func_number_3(func_number_2(), func_number_5(), func_number_13(), func_number_14(bool_24), 1, 1, (not (not bool_13) != number_15), 1 - 1) * func_number_15(func_number_16((-1 - 1), func_number_16(number_81, func_number_13()))) // func_number_0() * (-(-1) * number_96 - 1) - 1
        if bool_12:
          1
      number_14 > func_number_7(1, False)
  else:
    1 > func_number_9()
  number_9 = 1
  1
  1
  func_number_3((-1) // number_97 * 1 // func_number_0(), 1, number_80, func_number_11(func_number_3((-number_90), (-(-1 // number_98) * number_98 * (-1) % number_99 * number_99), func_number_17(), 1, number_46, (-func_number_18(1 % number_100, True != func_none_0()) % number_101 // 1 // number_102 - 1), (not func_bool_0(func_number_12(1), True, func_bool_2(func_number_2(), 1, True, func_number_6_param_6), (-number_103 % func_number_18(1, 1 > number_95) // (-func_number_16(number_104, number_94) * func_number_17())))), (-number_105)), func_number_18(func_number_5() // func_number_3(func_number_13(), 1 + 1 * func_number_18(1, bool_29) + 1, (-1 // func_number_6(number_106 + number_90, bool_15, (-func_number_18((-number_107), bool_1)), func_number_3(number_108, func_number_6((-1), bool_30 != True, number_109, func_number_5(), func_number_15(func_number_17()) == func_bool_3(number_38, func_number_3((-number_35), (-1), 1, 1 // 1, number_110, 1, func_bool_3(number_111, number_112, False) or False, 1), False), 1, 1), (-1 + (-number_113) // 1 % 1) % number_114, 1, number_115, 1, False, (-1)), bool_31, number_116, func_number_8())), (-1), 1, number_117 + func_number_10(func_bool_1((-1))), (not False), 1 % (-1)) % number_118 - (-number_119 - func_number_9()), bool_25) * 1 * func_number_14(1 >= func_number_6(1, func_number_2() > 1, number_66, 1, (not bool_32), (-number_120), number_10)), (not func_bool_3(1, 1, func_bool_2(number_121, 1, bool_31, 1)))), (-1), number_86, func_bool_3(func_number_9(), 1 + func_number_7(1, False), True), 1)
  return (-1 + 1)
def func_number_7(func_number_7_param_0: int, func_number_7_param_1: bool) -> int:
  func_number_7_param_0:int = 1
  number_56:int = 1
  func_number_7_param_1:bool = False
  bool_1 = number_56 < func_number_4()
  return func_number_7(number_46 * 1, True)
def func_number_8() -> int:
  number_55:int = 1
  number_55
  return (-number_11)
def func_number_9() -> int:
  number_55:int = 1
  number_55
  return func_number_5()
def func_number_10(func_number_10_param_0: bool) -> int:
  number_55:int = 1
  func_number_10_param_0:bool = False
  number_55 = 1
  return 1
def func_bool_0(func_bool_0_param_0: int, func_bool_0_param_1: bool, func_bool_0_param_2: bool, func_bool_0_param_3: int) -> bool:
  func_bool_0_param_0:int = 1
  func_bool_0_param_3:int = 1
  number_57:int = 1
  number_58:int = 1
  number_59:int = 1
  number_60:int = 1
  number_61:int = 1
  number_62:int = 1
  number_63:int = 1
  number_64:int = 1
  number_65:int = 1
  number_66:int = 1
  number_67:int = 1
  func_bool_0_param_1:bool = False
  func_bool_0_param_2:bool = False
  bool_22:bool = False
  bool_23:bool = False
  bool_24:bool = False
  def func_number_11() -> int:
    number_68:int = 1
    (-func_number_13())
    number_68
    return 1
  def func_number_12(func_number_12_param_0: int, func_number_12_param_1: int) -> int:
    func_number_12_param_0:int = 1
    func_number_12_param_1:int = 1
    number_70:int = 1
    number_70
    1
    return (-func_number_1())
  def func_number_13() -> int:
    number_68:int = 1
    number_69:int = 1
    func_bool_0_param_0 + number_68 + number_69
    return func_number_14()
  def func_number_14() -> int:
    False
    return 1
  def func_bool_2() -> bool:
    1
    bool_14
    return False
  if func_bool_0(number_57, func_bool_0(1, (-number_46) >= 1 + number_58, 1 * number_38 % func_number_8() > 1 - func_number_6(number_59, bool_22, 1, 1, func_bool_0(number_60, func_bool_0(func_number_6(1, bool_23, 1, func_number_2(), func_bool_0(func_number_2(), bool_10, func_bool_1(1), func_number_1()), (-1), func_number_11()), (not True), True, 1), (not (-1) >= number_61), 1), func_number_10((not False)), func_number_12((-1), 1 + func_number_5() % func_number_2() // number_9 % 1)), number_62 // number_63), True, (-(-1)) - (-(-number_58) % 1) // (-number_47) - func_number_10(False)) or number_33 > func_number_7(1, func_bool_1(func_number_8())):
    bool_9
    True
  else:
    func_number_3(func_number_12(func_number_5(), 1), 1, func_number_7(func_number_12(1, 1), bool_24) - 1 + 1 + (-1), number_18 * func_number_3(1, (-1) - 1, number_25, func_number_6((-1 - func_number_0() - 1), func_bool_0(func_number_13() + (-1) + func_number_2() + number_64, number_44 <= func_number_4(), (not True), number_9), 1, func_number_1(), False, 1, 1), 1, 1, func_bool_1(1 % (-func_number_1())), 1), (-func_number_14()), 1, True or func_bool_0_param_1, 1)
    number_65 = func_number_9()
    1
    1
  func_bool_0_param_3
  if number_66 <= 1:
    if (not True) or func_bool_2():
      func_bool_0(func_number_14(), True, False, 1)
    number_67
    None
    True
    False
    number_16
  return bool_24
def func_bool_1(func_bool_1_param_0: int) -> bool:
  func_bool_1_param_0:int = 1
  number_56:int = 1
  number_57:int = 1
  number_58:int = 1
  bool_20:bool = False
  bool_21:bool = False
  def func_number_11(func_number_11_param_0: bool) -> int:
    number_59:int = 1
    number_60:int = 1
    func_number_11_param_0:bool = False
    number_59 = number_60
    return number_53
  if True:
    number_56 = (-1 // func_number_9())
  else:
    (-number_42)
    number_57
    if True:
      number_58 * (-number_44)
    else:
      bool_20
    func_number_1()
  1
  if True:
    func_bool_1(func_number_6(1, True, (-1) // 1 - 1 - (-1), func_number_8(), bool_9, 1, func_number_11(False)))
  return bool_21
number_0
if True:
  if number_0 == number_1 * 1 // number_2 * number_3 + 1:
    if bool_0:
      1
      None
  else:
    if bool_0:
      if bool_0:
        (-number_4)
      else:
        if False:
          1
        (-1) % 1
else:
  if True:
    1 + 1
    1
    if False:
      if bool_0:
        number_1 = 1 % (-number_5 % number_3 - number_6)
    else:
      number_3 * (-1)
      (-1 // number_1 // 1)
      number_1 < (-1)
      if False:
        number_3 = number_7 - 1
      else:
        if (not (not 1 % 1 // number_3 // 1 // 1 % number_2 + (-1) % number_5 - 1 == False)):
          number_8
          bool_1
          if True:
            (-1) * 1 % 1 // 1 % number_9 // 1
            1 * 1 % (-1) + number_5 - 1
            False
            number_10
            if False:
              number_5 // number_11
            else:
              number_0
          if bool_2:
            number_12 * number_13 % 1
            if True:
              if 1 >= 1:
                1
              else:
                number_14 = 1 * 1 * number_5 * 1 * (-(-1))
          else:
            if bool_3:
              number_15 = 1
          (not bool_4)
          (-func_number_0())
          None
        else:
          1 // number_16
          1 // 1 % func_number_0()
          number_14
          None is None is None is None
        1
    if True:
      if (not number_14 > 1):
        1 > (-number_9)
        if (-1 % number_9) > number_17:
          if False:
            number_11
            (-1) - 1
          elif func_number_0() == bool_5 :
            1
            if True:
              1
              if 1 > func_number_0():
                1 + 1 + number_12
                number_18
          1
        1
      else:
        False or (not func_number_1() > number_19)
        if func_bool_0(1, False, func_bool_0(number_20, func_bool_0(number_21, False, (not True), (-1 % number_22 // (-func_number_0()))), func_bool_0(1, 1 // number_18 >= func_number_1() * 1 // 1 * (-func_number_0()), False, func_number_1()), 1), number_23):
          1
          func_number_2() * (-func_number_2()) // (-number_8)
          if bool_6:
            if bool_7:
              if True:
                if False:
                  False
                elif False :
                  if func_bool_0(1, True, bool_8, number_24):
                    1 % 1
                  elif func_bool_0(1 * 1, (not False), True, func_number_2() % 1) :
                    number_6 = 1
                else:
                  (-1 - 1 % number_25 * 1) > number_20
                func_number_0()
            elif func_bool_0(1, 1 // 1 != True, bool_4, number_26) :
              if False:
                (-number_27)
              if False:
                None
              else:
                1
                1
                1
              1
              number_28
              (not func_bool_0(number_29, True, False, 1))
              number_30
            else:
              func_number_2()
            func_number_1()
          else:
            number_14
            1 % number_13 % number_31
            func_bool_0(func_number_0(), False, False, 1)
          func_number_1() // func_number_0()
          number_32
          if True:
            func_number_3((-1), number_32, 1 * (-1), 1, func_number_3(1, 1 + 1, func_number_1(), 1, 1, 1, False, 1), 1, (not True), 1)
            if func_bool_0(1 + 1 - number_33, bool_9, func_bool_0((-number_6 * (-number_12) % 1), bool_9, bool_10, func_number_2()), func_number_0()):
              if (-(-1) - func_number_1()) >= 1 - func_number_3(number_34, 1, (-1), (-func_number_3(number_35 * number_31 // 1 + func_number_2() % 1 // 1 * func_number_1() - number_36, 1, 1, 1 * 1 // 1 % 1 * func_number_2(), 1, 1, func_bool_1((-func_number_4())), (-number_3))), 1, 1, bool_9, number_37) - func_number_4():
                1
              else:
                if bool_11:
                  if bool_12:
                    (-(-number_38))
                    func_number_5()
                    1 * 1 * func_number_2() - number_39
                  (-(-1))
                  (-number_40 - 1)
                  1
                  if True:
                    None is None
                    number_41
                    number_42
                    bool_13
                    number_42
                    1
                    func_number_1()
                  None
              1
            else:
              1
              1
            if bool_14:
              if (not (not True)):
                number_30 // number_43 - number_44
                bool_15 or func_bool_1(1)
                func_number_2() // 1 * func_number_6(1 * 1, func_number_3(1 + 1, func_number_7(1, (not bool_11)), 1 + (-1), number_45 % 1 - func_number_4() // 1, 1, func_number_0(), True, number_27) <= 1, 1, 1 // func_number_8(), False, (-1), func_number_0()) % (-number_46) - number_34
                if True:
                  if False:
                    number_46
                    bool_16 = False
                    1 * 1 // func_number_8() - func_number_8()
                  elif False :
                    1
                    1
                  bool_17
            else:
              number_5
              number_4 = 1
            number_39 + number_47
          else:
            (-1)
            (-number_47) * number_48
            (-1)
            (-1 + 1) % 1
            func_number_0() % 1 <= 1 * func_number_7(1, func_bool_1(func_number_7((-1), func_bool_0(1, bool_17, bool_9, func_number_8()) or func_bool_0(number_47, (not False), bool_18, func_number_9())) * number_49 % 1 - func_number_10(func_bool_1(1))))
        number_50 - 1
      number_51
      bool_10 = bool_19
    else:
      number_52 = func_number_1()
    1 // 1 % 1 + func_number_7(1 * number_18 * number_53, 1 > number_54 * 1 * number_9)
    1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
bool_1:bool = False
bool_0
bool_1 = False
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
def func_bool_0() -> bool:
  bool_1:bool = False
  number_0:int = 1
  number_1:int = 1
  number_2:int = 1
  (-number_0) + number_1 % number_2
  return bool_1
bool_0 = func_bool_0()
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
number_0:int = 1
number_1:int = 1
if False:
  None is None
elif bool_0 :
  number_0
  number_0
else:
  number_1
  (-1)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
None is None is None is None is None
1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
1
bool_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
number_5:int = 1
number_6:int = 1
number_7:int = 1
number_8:int = 1
number_9:int = 1
number_10:int = 1
number_11:int = 1
number_12:int = 1
number_13:int = 1
number_14:int = 1
number_15:int = 1
number_16:int = 1
number_17:int = 1
number_18:int = 1
number_19:int = 1
number_20:int = 1
number_21:int = 1
bool_0:bool = False
bool_1:bool = False
bool_2:bool = False
bool_3:bool = False
bool_4:bool = False
bool_5:bool = False
bool_6:bool = False
bool_7:bool = False
bool_8:bool = False
bool_9:bool = False
bool_10:bool = False
def func_number_0() -> int:
  1 + func_number_2(1) <= func_number_5()
  return func_number_5()
def func_number_1(func_number_1_param_0: bool) -> int:
  number_22:int = 1
  func_number_1_param_0:bool = False
  bool_12:bool = False
  bool_13:bool = False
  bool_12
  number_20 = func_number_2((-(-func_number_1(bool_13) - 1)))
  1
  return number_22
def func_number_2(func_number_2_param_0: int) -> int:
  func_number_2_param_0:int = 1
  number_23:int = 1
  func_number_4(func_number_2(1 + func_number_2((-(-1)))), number_20 // 1 - func_number_4(1, number_23 % 1))
  return 1
def func_number_3(func_number_3_param_0: int) -> int:
  func_number_3_param_0:int = 1
  number_23:int = 1
  number_24:int = 1
  number_23 + (-(-number_10))
  return number_24 - 1 // 1
def func_number_4(func_number_4_param_0: int, func_number_4_param_1: int) -> int:
  func_number_4_param_0:int = 1
  func_number_4_param_1:int = 1
  number_24:int = 1
  number_25:int = 1
  number_26:int = 1
  bool_11:bool = False
  def func_number_6(func_number_6_param_0: int, func_number_6_param_1: int) -> int:
    func_number_6_param_0:int = 1
    func_number_6_param_1:int = 1
    bool_12:bool = False
    bool_13:bool = False
    bool_14:bool = False
    bool_12
    bool_13 = bool_14
    1
    False
    func_number_2(number_6)
    return 1
  def func_bool_1() -> bool:
    bool_12:bool = False
    1 + number_26
    return func_bool_0(func_number_5(), True or 1 > 1, bool_12, number_17, 1)
  func_bool_1()
  if bool_11:
    number_0
  else:
    number_24
    func_number_1(False) - (-1 // func_number_6(func_number_0(), func_number_1(1 * number_25 - 1 % func_number_3(number_26 + 1) >= 1)))
  1
  return number_4
def func_number_5() -> int:
  number_19
  return number_3
def func_bool_0(func_bool_0_param_0: int, func_bool_0_param_1: bool, func_bool_0_param_2: bool, func_bool_0_param_3: int, func_bool_0_param_4: int) -> bool:
  func_bool_0_param_0:int = 1
  func_bool_0_param_3:int = 1
  func_bool_0_param_4:int = 1
  number_25:int = 1
  number_26:int = 1
  number_27:int = 1
  number_28:int = 1
  number_29:int = 1
  func_bool_0_param_1:bool = False
  func_bool_0_param_2:bool = False
  bool_13:bool = False
  def func_number_6(func_number_6_param_0: int) -> int:
    func_number_6_param_0:int = 1
    number_31:int = 1
    number_32:int = 1
    bool_14:bool = False
    func_number_6(func_number_1(bool_7))
    number_17 = 1 - 1 // number_31 + 1 % (-number_18) % 1
    if (not func_number_4(1, 1) != 1):
      bool_14 = (not func_number_3((-1) % 1) > func_number_5() % number_2)
      1
      number_26 * number_17
      if True or func_bool_0(func_bool_0_param_4, bool_6, False, func_number_4(1, 1), func_number_4(number_3, (-number_32))):
        1 + 1
      func_number_3(1)
    return (-1) * 1
  def func_number_7() -> int:
    1 * 1
    return 1
  func_bool_0(func_number_1(bool_3), True or func_bool_0(func_number_1(False), 1 - 1 // 1 % number_25 > 1, False, number_26, number_27), None == number_28, number_20 - func_number_6(1) * number_4 - 1, func_number_7())
  if True:
    number_29 = func_number_0() * func_number_1(True)
    None
  else:
    if 1 % number_0 < (-number_9):
      None
      if bool_3:
        (-1)
  return bool_13
if 1 >= number_0:
  number_0 = 1
else:
  1
  1
if bool_0:
  1 * 1 // 1
elif number_0 > number_0 - number_1 // number_2 - 1 * number_1 // 1 :
  1
elif False :
  1
  if bool_1:
    if (not True):
      if True:
        if 1 < number_2 * number_3:
          if (not False):
            func_number_0() // number_4
          None is None is None is None is None is None is None is None is None is None is None
          number_1 = number_5
          number_5
        else:
          (not bool_0)
          True
          1
          func_number_0()
      func_number_0()
    else:
      (not (not True))
      1
      False
      1
      if 1 > 1:
        number_6
      elif False or bool_2 :
        False
      func_number_1(True)
  elif False :
    (not (not (not 1 // number_7 == bool_2)))
    number_5 = (-1 * number_8 % func_number_0())
    if (not False):
      None
    else:
      1
  elif True :
    number_9 = (-number_10)
    number_10 = number_4
    None is None is None is None is None
    func_number_0()
    1
else:
  (-func_number_1(False == bool_3))
  if func_bool_0(number_0, (not (not 1 // (-func_number_0()) // 1 // number_6 // 1 + number_11 // func_number_0() * 1 > func_number_2(1))), number_12 == 1 * 1 * number_6, 1, 1 + number_13):
    func_bool_0((-1 % number_14) + number_8, False, True, func_number_0() + func_number_1(bool_4) // func_number_2((-1 - (-number_3))) // func_number_1(func_number_2(1) != 1 - func_number_1(True)) % 1 - 1 * func_number_3(func_number_3(1)) // (-(-func_number_0())), 1)
  elif bool_5 :
    False
  if bool_5:
    if True:
      1 * 1
      if True:
        if func_bool_0(number_15, False, False, 1 % func_number_3(number_7) % (-1) + 1, func_number_2(1)):
          func_number_3(func_number_1(bool_6))
        if False:
          func_number_4(number_16, func_number_3(1 - func_number_5()))
          if True:
            1
          elif bool_7 :
            bool_8
            None
          bool_9 = False
          True
          1
          bool_10
          (-number_17) * func_number_2(func_number_5())
        None
      else:
        1
      number_12 = 1
      if False:
        number_3
        number_18 = number_8
      else:
        number_19 = func_number_4(1, func_number_5())
      1
    elif 1 < func_number_1(True) :
      None is None is None
    else:
      1 * 1 + number_20 % number_19
    None
number_21 * 1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:(-1)
None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
(-1) * 1 * number_0 - number_0
1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
def func_none_0(func_none_0_param_0: int):
  func_none_0_param_0:int = 1
  number_2:int = 1
  number_3:int = 1
  number_4:int = 1
  number_0 // number_0
  func_none_0(number_0 % 1 * 1 - func_none_0_param_0 + 1 + number_2 + (-1) * number_3) is None is None is None is func_none_0(number_3) is None
  return func_none_0(number_2 * number_4) is None
None is None
number_0
None is func_none_0(number_0)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
bool_0:bool = False
if True:
  number_0
else:
  (not bool_0)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
if False:
  number_0 != 1 + number_0 == (not 1 > (-1) + number_0 + 1 * 1 % 1 // 1)
1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
def func_number_0() -> int:
  number_2:int = 1
  number_3:int = 1
  number_4:int = 1
  bool_0:bool = False
  bool_1:bool = False
  bool_2:bool = False
  def func_number_1(func_number_1_param_0: int) -> int:
    func_number_1_param_0:int = 1
    number_6:int = 1
    1
    bool_0
    if (-1 % (-1) // func_number_0()) <= 1:
      1
      (-number_1)
    func_number_0() - 1 + number_6
    return func_number_0()
  if True:
    None
  elif (not func_number_0() < 1) :
    bool_0 or (not (not False)) or False or True
    1
  else:
    1 >= 1
    1
    number_0 * 1
    if (not bool_0):
      if bool_0:
        1
      func_number_1(number_2 * func_number_0())
      if bool_1:
        if True:
          1
        else:
          (-1)
          bool_1 = func_number_0() > number_2
        False
        bool_1
        (not bool_0)
      elif False :
        True
        if bool_2 != 1:
          number_2 = number_3
      True
    True
    (-number_4)
  return 1 % 1
number_0 + number_0 // (-(-func_number_0() + 1 % func_number_0() * number_0)) * number_1 // func_number_0()
(-number_1)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
1
if bool_0:
  1
  bool_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
(not bool_0)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
bool_0:bool = False
def func_bool_0() -> bool:
  number_3:int = 1
  if (not False):
    number_2
    bool_0 = False
    number_3
  else:
    number_3 + 1 + 1
    False
  1
  (not True)
  1 * 1
  1
  return False
if func_bool_0():
  number_0
  number_0
elif bool_0 :
  number_1 - number_1
else:
  number_2
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:class class_0(object):
  pass
class_0_0:class_0 = None
class_0_0
1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
1 < number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
bool_1:bool = False
number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
number_5:int = 1
number_6:int = 1
number_7:int = 1
number_8:int = 1
number_9:int = 1
number_10:int = 1
number_11:int = 1
def func_number_0() -> int:
  bool_2:bool = False
  bool_3:bool = False
  bool_4:bool = False
  bool_5:bool = False
  bool_6:bool = False
  number_12:int = 1
  number_13:int = 1
  number_14:int = 1
  number_15:int = 1
  number_16:int = 1
  number_17:int = 1
  number_18:int = 1
  number_19:int = 1
  number_20:int = 1
  number_21:int = 1
  number_22:int = 1
  number_23:int = 1
  def func_number_4() -> int:
    bool_7:bool = False
    number_24:int = 1
    (-(-1))
    if bool_7:
      number_24
    else:
      1
    return (-number_13)
  def func_bool_0(func_bool_0_param_0: bool, func_bool_0_param_1: int, func_bool_0_param_2: int) -> bool:
    func_bool_0_param_0:bool = False
    bool_8:bool = False
    func_bool_0_param_1:int = 1
    func_bool_0_param_2:int = 1
    number_26:int = 1
    number_27:int = 1
    number_28:int = 1
    number_29:int = 1
    number_30:int = 1
    number_31:int = 1
    number_32:int = 1
    number_33:int = 1
    number_34:int = 1
    number_35:int = 1
    def func_number_5(func_number_5_param_0: bool, func_number_5_param_1: bool) -> int:
      func_number_5_param_0:bool = False
      func_number_5_param_1:bool = False
      number_36:int = 1
      number_37:int = 1
      number_38:int = 1
      if number_36 >= 1:
        number_37
      func_number_0()
      return func_number_2(1 % 1, number_38)
    def func_number_6() -> int:
      (not func_bool_0(bool_5, 1, func_number_3()))
      bool_4
      return 1
    def func_bool_1(func_bool_1_param_0: int, func_bool_1_param_1: int) -> bool:
      func_bool_1_param_0:int = 1
      func_bool_1_param_1:int = 1
      number_38:int = 1
      number_39:int = 1
      func_bool_1_param_0 > func_number_4() * number_38
      return func_bool_0((not func_bool_0(bool_2 or func_bool_1(1, 1) or number_39 <= (-1), 1, 1)), 1, 1)
    func_number_3() // 1
    (-func_number_1(func_number_4() - 1 % (-(-(-func_number_2(1, 1))) * 1 % 1 % number_0)) // func_number_1(func_number_0())) - func_number_0()
    None is None
    number_26 + (-(-number_27))
    if bool_8:
      False
      1 % (-number_27)
    elif func_bool_0(number_28 > 1 // 1, (-1) % 1 + 1, 1) :
      None
      if False:
        (not func_bool_0(False, 1, (-func_number_0())))
        func_number_5(func_bool_0(False, 1, 1), bool_2)
      else:
        if func_bool_0(number_1 <= func_number_0() or func_number_4() != 1, func_number_1(1 % (-func_number_2(1, func_number_3()))), func_number_3()):
          func_number_5(False, func_bool_1(func_number_1(1) - 1 - 1 * 1, func_number_2(1, func_number_3() % 1 + 1)))
          if func_bool_1((-1), (-number_29)):
            if func_bool_1(1, 1):
              number_1
              func_number_5(bool_2, False)
            else:
              number_30 - 1 // 1
              number_31
              1
            func_number_4()
          elif bool_0 :
            number_32 + func_number_6()
            func_number_2((-number_33), number_4)
        else:
          func_number_4() <= 1
        False
    else:
      1
      False
      bool_5
      number_34 = (-1)
      1
      1
    if func_bool_1(number_26, number_35):
      1
    else:
      number_6 = number_7
    return True
  if False:
    if bool_2:
      if True:
        (-number_0 * func_number_1(1 // number_3) % (-1) // number_12 - number_13)
      1
      if func_number_3() >= func_number_1((-number_8 + number_14 - 1)) * number_9:
        (-func_number_3())
      else:
        number_7 - (-1)
      1
    else:
      (not bool_3)
    func_number_1(number_15)
  else:
    (-1)
    number_16
    if False:
      1
    if bool_4:
      1 + 1
    func_bool_0((not True), number_15, number_17)
    number_18 != None
    number_19
    if func_bool_0(bool_3, (-func_number_3()), 1 + func_number_0()):
      1
      number_4
  True
  True
  1
  if number_7 // func_number_2(number_20, (-1 * func_number_4() // 1)) >= 1:
    if False:
      bool_5 = 1 * func_number_4() > number_21
    else:
      if True:
        func_number_0()
        number_22 = number_23 + 1
        1
      elif bool_6 :
        None
      else:
        None is None
      None
  else:
    True
  return 1
def func_number_1(func_number_1_param_0: int) -> int:
  func_number_1_param_0:int = 1
  number_13:int = 1
  number_14:int = 1
  number_15:int = 1
  number_16:int = 1
  number_17:int = 1
  number_18:int = 1
  number_19:int = 1
  def func_number_4(func_number_4_param_0: int) -> int:
    bool_2:bool = False
    bool_3:bool = False
    func_number_4_param_0:int = 1
    number_21:int = 1
    number_22:int = 1
    number_23:int = 1
    number_24:int = 1
    number_25:int = 1
    number_26:int = 1
    number_27:int = 1
    number_28:int = 1
    number_29:int = 1
    number_30:int = 1
    number_31:int = 1
    number_32:int = 1
    def func_number_8(func_number_8_param_0: int, func_number_8_param_1: int) -> int:
      func_number_8_param_0:int = 1
      func_number_8_param_1:int = 1
      True
      return 1
    def func_bool_0() -> bool:
      bool_4:bool = False
      bool_5:bool = False
      bool_6:bool = False
      number_33:int = 1
      number_33
      bool_4 = bool_5
      bool_6 = bool_5
      func_number_1(1)
      return True
    if bool_0:
      if False:
        1
        if number_0 != 1:
          func_number_6((-number_4))
        elif (not 1 == func_number_0()) :
          number_21
        else:
          False
          if bool_0:
            func_bool_0()
            number_22 = 1 - func_number_2((-number_15 - number_23), number_24)
            bool_1
            False
            1
            bool_2 = number_3 <= 1
          elif func_bool_0() :
            bool_0
            True
            func_bool_0()
          elif bool_1 :
            (not False)
      elif True :
        None
        if True:
          if (not bool_3):
            1 // 1
          else:
            number_25 = number_26
        else:
          func_number_8(number_27, 1)
          if True:
            number_28
          else:
            number_14
            if func_bool_0():
              number_29 = 1
            else:
              number_30
      func_number_6(number_6) % number_24
      func_number_0()
      if func_bool_0():
        if bool_0:
          1 > func_number_2(1, number_31 + 1) - 1 % number_24
          (not func_bool_0())
        else:
          False
        func_number_1(1) + 1
    else:
      func_number_3()
    return number_32
  def func_number_5() -> int:
    bool_2:bool = False
    number_20:int = 1
    number_21:int = 1
    def func_number_8(func_number_8_param_0: int) -> int:
      func_number_8_param_0:int = 1
      number_23:int = 1
      True
      return func_number_8(number_23) + func_number_3()
    def func_number_9(func_number_9_param_0: int) -> int:
      bool_3:bool = False
      func_number_9_param_0:int = 1
      number_23:int = 1
      def func_number_10() -> int:
        (not (not False) or False)
        return 1 // (-func_number_10() * number_7)
      if bool_1:
        None
        (-number_23)
        if (not bool_1):
          1
        else:
          func_number_10()
      else:
        (not bool_3)
      return func_number_3()
    if bool_1:
      if bool_2:
        (-1) // 1 // (-(-(-(-(-number_20) * func_number_8(number_21) * number_18)) * 1 * 1))
    else:
      1
    func_number_8((-1 + 1) % number_11)
    return 1 % func_number_6(func_number_9(func_number_1_param_0))
  def func_number_6(func_number_6_param_0: int) -> int:
    bool_2:bool = False
    bool_3:bool = False
    bool_4:bool = False
    bool_5:bool = False
    bool_6:bool = False
    bool_7:bool = False
    func_number_6_param_0:int = 1
    number_21:int = 1
    number_22:int = 1
    number_23:int = 1
    number_24:int = 1
    def func_bool_0(func_bool_0_param_0: int) -> bool:
      func_bool_0_param_0:int = 1
      1 + 1
      return False
    number_21
    func_number_4(number_6)
    if bool_0:
      if bool_2:
        number_9
      (-1 // number_0)
    elif True :
      func_number_1(func_number_2(1, (-1 + 1))) * 1 * number_22 * 1 % 1 % (-func_number_1(1))
    else:
      if bool_3:
        False
      elif bool_2 :
        if bool_4:
          if (-(-func_number_3())) > (-(-(-1))):
            number_13
            (-1)
            func_bool_0((-number_11))
          else:
            1
        else:
          bool_5
          bool_6
          func_number_6_param_0 * func_number_7(1 + (-(-1)))
        func_number_7(1)
      elif bool_7 :
        func_number_4(number_23)
        func_number_7(number_24)
      1
      if True:
        None
      func_number_3()
    return 1
  def func_number_7(func_number_7_param_0: int) -> int:
    func_number_7_param_0:int = 1
    number_21:int = 1
    number_22:int = 1
    number_21 - 1
    return number_22
  1
  if False:
    1 + number_13
  else:
    func_number_1(func_number_2(number_14 * number_15, (-number_14))) + number_4
    number_16 + (-1) <= (-1)
    if bool_1:
      number_6 = number_13 % 1
      1
    elif bool_0 :
      True
    else:
      1 + 1
      if False:
        if False:
          func_number_4(1) * 1
        else:
          number_8
          if False:
            number_4 = func_number_4((-1))
          if (not False):
            (-number_4 - func_number_0())
          else:
            if False:
              if func_number_3() > 1:
                1 % number_1 - func_number_2(number_15, 1)
              elif True :
                number_9 = (-1)
              else:
                1
              if False:
                func_number_5()
              number_0 = 1
            else:
              1
            func_number_6(func_number_3() // func_number_7(func_number_4(1)))
        1
        1
      (-number_17)
      1
      func_number_7((-1 - number_18))
      1
  return number_19
def func_number_2(func_number_2_param_0: int, func_number_2_param_1: int) -> int:
  func_number_2_param_0:int = 1
  func_number_2_param_1:int = 1
  number_14:int = 1
  None
  return func_number_2(number_14, func_number_1(1))
def func_number_3() -> int:
  bool_2:bool = False
  number_12:int = 1
  number_13:int = 1
  number_14:int = 1
  number_15:int = 1
  1
  if False:
    bool_0 = False
    func_number_0()
    if bool_2:
      if False:
        number_12
      number_13 = 1
      True
    if True:
      func_number_2(1, (-func_number_1(func_number_3()))) // func_number_2(1, number_1 * func_number_1(1)) * (-func_number_0()) // number_12 + 1
    else:
      func_number_2(func_number_1(number_4), 1)
    1
    None
  func_number_2(func_number_2(1, func_number_0()), 1) // number_14
  number_6 = 1
  (-1 + number_8) % number_15 * 1
  bool_1
  func_number_3() + func_number_1(func_number_3())
  1
  return 1
if bool_0:
  bool_1
else:
  if (not (not (not number_0 > 1))) or 1 > (-1 * 1):
    1 + number_1
    if False:
      if (not True) or (not bool_1 or (not True)):
        number_0
        1
      False
      (-1)
    else:
      if bool_1:
        if False or bool_1:
          bool_0
          number_1 % 1
        else:
          (-number_2)
      elif (not (not True)) :
        None
      else:
        None
        number_3
      1 - 1 % number_4 * func_number_0() % (-func_number_0() - number_5) + number_6 // 1 * 1
      (-(-func_number_0()))
      if bool_0:
        number_4
if True:
  1
  func_number_0()
  func_number_1(1 // func_number_2(1, number_7)) % 1
  number_8
  1
  bool_1 = (-func_number_0()) >= 1
  (not func_number_1(number_9) + 1 >= 1) or 1 * number_10 * func_number_3() > number_11
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
1
bool_0 = True
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
def func_number_0(func_number_0_param_0: int) -> int:
  func_number_0_param_0:int = 1
  number_2:int = 1
  number_3:int = 1
  number_4:int = 1
  number_5:int = 1
  number_6:int = 1
  bool_0:bool = False
  bool_1:bool = False
  def func_number_1(func_number_1_param_0: bool, func_number_1_param_1: int) -> int:
    func_number_1_param_1:int = 1
    number_8:int = 1
    number_9:int = 1
    func_number_1_param_0:bool = False
    (not True)
    1 - number_8
    return (-func_number_1(func_number_1(False, number_6) > func_number_1(func_number_2() == number_9, 1 % func_number_1_param_1), 1)) // (-number_5) // func_number_2() - 1 + 1 * number_8
  def func_number_2() -> int:
    number_7:int = 1
    number_8:int = 1
    number_9:int = 1
    number_7
    if False:
      False
    if 1 > 1:
      if 1 + 1 + 1 >= func_number_0(1 + 1):
        None
        if (not False):
          1
          number_5 = func_number_2()
      else:
        1 % 1 == True
        bool_1 = True or (not True)
        func_number_0(func_number_2() * func_number_2()) - func_number_1(False, 1)
        if False or func_number_0(1 - 1) > (-func_number_0(number_3)):
          number_4
        elif number_5 > number_8 % 1 :
          None
        func_number_0(1) > number_9
        False
        (-1)
      True
    return 1
  func_number_0(func_number_0(func_number_0(number_2)))
  number_3
  if bool_0 or number_0 < 1:
    (-1 // 1)
  func_number_0(func_number_0(1)) * func_number_1(bool_1, (-1 % func_number_1(func_number_1(True, number_4 * 1 - func_number_1(False, func_number_1((not True), 1) % 1)) + func_number_0((-1) // func_number_1(False, 1 // number_5)) == (-1 % 1 % func_number_2()), func_number_2())))
  return 1 // number_6
func_number_0(1 // 1 // func_number_0(number_0) // (-1) - 1)
1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
number_0:int = 1
number_1:int = 1
number_2:int = 1
def func_none_0():
  number_3:int = 1
  number_4:int = 1
  number_5:int = 1
  def func_number_0(func_number_0_param_0: int, func_number_0_param_1: int, func_number_0_param_2: int) -> int:
    func_number_0_param_0:int = 1
    func_number_0_param_1:int = 1
    func_number_0_param_2:int = 1
    number_9:int = 1
    number_10:int = 1
    number_11:int = 1
    def func_number_1() -> int:
      number_12:int = 1
      number_13:int = 1
      1
      return func_number_1() % func_number_0((-number_12), 1, func_number_0(number_9, 1, (-1))) - func_number_1() + func_number_0(func_number_0(1, number_13, 1), 1, number_12)
    number_9 = 1
    bool_0
    return func_number_0(1, (-func_number_1()), (-func_number_0((-number_4) // 1 // func_number_0(func_number_0(func_number_1(), 1, (-1)), (-func_number_1()), number_10), 1, number_11)))
  if number_2 > 1:
    number_3
    func_number_0((-1), number_4, number_5)
  return func_none_0() is func_none_0() is None
1
func_none_0() is None
if bool_0:
  1
  1
  1 + number_0 % (-number_1)
else:
  (-number_2 % 1)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
def func_number_0() -> int:
  bool_0:bool = False
  1
  False
  if bool_0:
    1
  return 1
if 1 // 1 >= (-1):
  1
elif number_0 == 1 :
  number_1 = 1
  number_2 = number_1
else:
  if True:
    1
  else:
    1 - 1
  func_number_0()
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
number_5:int = 1
number_6:int = 1
number_7:int = 1
def func_number_0() -> int:
  None
  return 1
if False:
  1
elif True :
  if bool_0:
    1
    if False:
      if True:
        1 + number_0
        number_0 + 1 // 1 * 1
      None is None is None is None is None is None is None is None is None
      if (-1) % 1 > (-number_1 - 1):
        number_1 > number_0 // number_2 or (not bool_0)
        False
    else:
      False
    False
    1
  if True:
    None
    1
  else:
    if 1 > number_2:
      number_1
      number_0 = 1
    else:
      bool_0
      if False:
        if False:
          number_3 = 1
        False
        number_4
        number_5
        number_6
        (-1 * (-1) * 1 // func_number_0()) + func_number_0()
      else:
        if bool_0:
          number_7 % 1
          None
  1
bool_0 = 1 - (-(-1) % 1 - 1) < 1
None
number_2 = number_7 + 1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
number_5:int = 1
number_6:int = 1
bool_0:bool = False
bool_1:bool = False
if False or number_0 > 1:
  if bool_0:
    if False:
      number_0 = 1 - 1
      True
    else:
      if False:
        (-number_0)
      else:
        1
        (-1)
        if True:
          if bool_0:
            1 // 1
            if False:
              (-1) // (-number_1) >= number_2
            elif bool_1 :
              True
              (-1) // 1 + number_3
      number_2 * 1
      if False:
        number_0
        number_4
      else:
        number_5
  (-1)
elif False :
  1 % 1
else:
  if (not (not False)):
    1
  (not 1 >= number_6)
None is None is None is None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
bool_0:bool = False
(-number_0)
bool_0
1
True or bool_0
(-1)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
None is None is None
number_0 = number_1 // number_0 // (-1) % (-1) + 1 % number_0 * 1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:None is None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
def func_number_0(func_number_0_param_0: int, func_number_0_param_1: int, func_number_0_param_2: int, func_number_0_param_3: int) -> int:
  func_number_0_param_0:int = 1
  func_number_0_param_1:int = 1
  func_number_0_param_2:int = 1
  func_number_0_param_3:int = 1
  number_9:int = 1
  number_10:int = 1
  number_11:int = 1
  number_12:int = 1
  number_13:int = 1
  number_14:int = 1
  number_15:int = 1
  number_16:int = 1
  number_17:int = 1
  number_18:int = 1
  number_19:int = 1
  number_20:int = 1
  number_21:int = 1
  number_22:int = 1
  number_23:int = 1
  number_24:int = 1
  number_25:int = 1
  bool_0:bool = False
  bool_1:bool = False
  bool_2:bool = False
  bool_3:bool = False
  def func_number_2(func_number_2_param_0: int, func_number_2_param_1: bool, func_number_2_param_2: int, func_number_2_param_3: int, func_number_2_param_4: int) -> int:
    func_number_2_param_0:int = 1
    func_number_2_param_2:int = 1
    func_number_2_param_3:int = 1
    func_number_2_param_4:int = 1
    number_30:int = 1
    number_31:int = 1
    number_32:int = 1
    func_number_2_param_1:bool = False
    bool_5:bool = False
    if number_18 > number_30:
      if bool_5:
        number_31
      None
    return func_number_0(number_4, number_2, func_number_3(True) - number_32 // (-1), 1)
  def func_number_3(func_number_3_param_0: bool) -> int:
    number_26:int = 1
    number_27:int = 1
    number_28:int = 1
    number_29:int = 1
    func_number_3_param_0:bool = False
    bool_5:bool = False
    bool_6:bool = False
    bool_7:bool = False
    bool_8:bool = False
    if False:
      func_number_0(1, func_number_3((not func_number_3_param_0)), number_26, (-func_number_3(1 > 1 % number_0)) // 1)
      True or False
      func_number_2(number_11 - func_number_1() // func_number_1(), (not True or True), 1, func_number_4(), 1)
    elif bool_1 != False :
      number_19 = func_number_0_param_0
      None is None
      number_27 = func_number_2(1, bool_5 or number_3 > 1, number_28, func_number_1(), 1)
      number_3
    True
    if bool_6:
      if number_19 > func_number_4() or bool_7:
        bool_8
      (-number_29)
    return number_28
  def func_number_4() -> int:
    1
    return number_21
  1 // 1
  1
  if bool_0:
    func_number_2(func_number_1(), bool_1, (-func_number_3(bool_1)), 1, 1)
  elif number_9 < func_number_0(func_number_2(number_4, False, func_number_2(1, bool_0 or True, (-(-1 - 1)), 1, 1), func_number_3(True), func_number_1() % number_10 - 1) * 1, func_number_1() // number_3, func_number_1(), 1) :
    if 1 > (-(-number_11)) - func_number_2(number_12 % number_1, bool_2, func_number_2(1, False, number_13, 1 * func_number_0_param_3, 1 - (-func_number_0(1, 1, func_number_2(func_number_2(1, True, 1, number_14 // func_number_1(), 1 // func_number_0((-func_number_0(1 - func_number_1(), 1, 1, number_15) + 1), 1 - (-1), 1, func_number_1())) % func_number_1() * 1, bool_0, func_number_1() + number_16, (-1), number_17 * 1), number_12)) % (-func_number_3(False)) - func_number_0(number_14, number_3, 1, 1)) % number_18, func_number_0_param_3, 1):
      bool_3 = (not (not (not bool_0)) or bool_1)
    else:
      if bool_1:
        1
  func_number_2(1, func_number_0_param_1 > 1, func_number_4() * 1, func_number_1() * number_19, 1 - 1 // (-(-func_number_0_param_3)))
  number_20 = number_21
  (-(-1)) * func_number_0(1, 1, (-number_22) - 1 % (-func_number_4()), number_23) % func_number_4() - func_number_2(1, (not (-1) // 1 + (-(-1)) * 1 <= 1), 1, (-1), 1)
  func_number_3(number_24 > number_25)
  return func_number_0_param_0
def func_number_1() -> int:
  number_5:int = 1
  number_6:int = 1
  bool_0:bool = False
  number_1
  if False:
    func_number_0((-1), number_4 * 1, 1, 1)
    1
    if True:
      bool_0 = True
      1
      if bool_0:
        True
      1
    else:
      (-number_3 - (-(-1 - number_5) * (-1))) * number_6
    1
  return (-1)
number_0 = (-number_1 + func_number_0(1, func_number_0(1, 1 + 1, (-1), number_2), 1, 1) % func_number_0(1, 1, func_number_0((-number_3), func_number_0(func_number_1(), 1, func_number_1(), number_3), number_2, 1), number_4) * 1 // number_1 + number_4) * number_4
False
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
bool_1:bool = False
number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
def func_number_0() -> int:
  number_4:int = 1
  number_5:int = 1
  def func_none_0(func_none_0_param_0: int, func_none_0_param_1: bool):
    func_none_0_param_1:bool = False
    bool_3:bool = False
    bool_4:bool = False
    bool_5:bool = False
    func_none_0_param_0:int = 1
    number_7:int = 1
    number_8:int = 1
    number_9:int = 1
    number_10:int = 1
    number_11:int = 1
    number_12:int = 1
    number_13:int = 1
    number_14:int = 1
    number_15:int = 1
    number_16:int = 1
    number_17:int = 1
    number_18:int = 1
    number_19:int = 1
    number_20:int = 1
    number_21:int = 1
    number_22:int = 1
    number_23:int = 1
    number_24:int = 1
    number_25:int = 1
    number_26:int = 1
    number_27:int = 1
    number_28:int = 1
    number_29:int = 1
    def func_number_1(func_number_1_param_0: bool, func_number_1_param_1: int) -> int:
      func_number_1_param_0:bool = False
      func_number_1_param_1:int = 1
      (not bool_0)
      return 1
    def func_number_2(func_number_2_param_0: bool) -> int:
      func_number_2_param_0:bool = False
      func_number_2_param_0
      1
      func_none_1(func_number_2(func_bool_0()), func_bool_0(), 1) is None
      return func_number_3(number_4, func_number_2(func_bool_0()), func_number_2_param_0, 1)
    def func_number_3(func_number_3_param_0: int, func_number_3_param_1: int, func_number_3_param_2: bool, func_number_3_param_3: int) -> int:
      func_number_3_param_2:bool = False
      func_number_3_param_0:int = 1
      func_number_3_param_1:int = 1
      func_number_3_param_3:int = 1
      number_33:int = 1
      number_33
      return (-(-1))
    def func_number_4() -> int:
      bool_6:bool = False
      bool_6 = False
      return 1
    def func_none_1(func_none_1_param_0: int, func_none_1_param_1: bool, func_none_1_param_2: int):
      func_none_1_param_1:bool = False
      func_none_1_param_0:int = 1
      func_none_1_param_2:int = 1
      number_32:int = 1
      (not False)
      return func_none_0(number_32 % func_none_1_param_2, func_none_0_param_0 >= func_number_4()) is func_none_0(func_number_2(True), func_bool_0()) is None
    if number_7 < 1:
      if func_bool_0():
        number_8
      else:
        None
        1
    if True:
      1 - (-(-1 * (-number_3) - func_number_0() % func_number_0() - number_9)) * (-1 + (-1 * 1) + 1 // 1 + 1 * 1)
      if False:
        func_number_1(bool_1, func_number_1(bool_3 or False, number_10))
      if number_11 <= 1 or func_number_0() > (-func_number_1(number_7 <= number_12 // func_number_1(func_bool_0(), 1), 1 + 1 % 1)):
        func_number_2((not False))
        (-number_13)
        (not func_bool_0())
      else:
        None
        1
        (-1)
        1
      1
      if (not False):
        bool_4
        1 > (-func_number_1(func_bool_0(), 1) // func_number_2(bool_1) * number_2)
        number_12
        1
        func_number_2(True) + 1 // number_14 * 1 * (-1) * func_number_1(number_0 >= number_8, number_10 - 1 // number_15) // func_number_1(func_bool_0(), func_number_0()) // func_number_3(number_16 + (-1 % 1), func_number_2(False), True, 1)
      elif True :
        number_17 // 1
        bool_1 = bool_1
      elif func_bool_0() or number_18 // number_19 % 1 % func_none_0_param_0 <= number_20 :
        if func_bool_0():
          func_none_0(func_number_0(), func_bool_0()) is None is func_none_1(func_number_4(), func_bool_0(), func_number_2(bool_4)) is None
          func_number_1(func_none_0_param_1, 1) % func_number_2((not False))
        else:
          func_number_3(1, func_number_3(func_number_1(bool_3, (-1)), number_17 + 1 % func_number_0(), True, number_21 % func_number_1(1 != 1, number_22) - 1) * 1, False, 1)
        if func_number_4() // func_number_2(func_number_4() > (-number_8) - 1) > number_23:
          1
          1
          (-1 * 1)
        elif bool_5 or func_bool_0() :
          number_24 = 1
          number_5
      else:
        number_25 = 1
        if 1 == 1:
          (-func_number_1((-func_number_0() * 1) // (-func_number_2(bool_3)) < 1, number_15))
          func_bool_0()
        else:
          func_bool_0()
    if func_bool_0():
      1
    else:
      if False:
        number_4
      func_number_4()
      if False:
        if func_bool_0():
          False
        elif bool_5 :
          number_26
        else:
          func_number_1((not number_27 > func_number_0() % number_18), 1 - number_28)
          None is None
          func_bool_0()
        number_13 = 1
      number_29 = 1
    return func_none_0(1, (not True))
  number_4 < func_number_0()
  if bool_0:
    number_5
    if func_bool_0():
      func_number_0()
      if func_bool_0():
        func_none_0(1, 1 < func_number_0()) is None is None
  return 1
def func_bool_0() -> bool:
  bool_2:bool = False
  def func_number_1() -> int:
    bool_3:bool = False
    bool_4:bool = False
    number_4:int = 1
    bool_3 = True
    if bool_4:
      (-(-func_number_0())) * 1
      number_4
    else:
      bool_0 = True
    func_bool_0()
    return func_number_0()
  bool_2 = func_bool_0() or number_2 - func_number_1() - 1 * number_3 // 1 + 1 % 1 + 1 < number_3 or func_bool_0()
  (-func_number_1())
  return True
if bool_0:
  1
elif bool_0 :
  if (not bool_1):
    (-number_0) - (-1)
    number_0 = 1 % func_number_0()
  elif bool_1 :
    func_number_0()
  elif func_bool_0() :
    None
    bool_0 = 1 > 1
    (not True) or False
  else:
    func_number_0()
  number_1
elif number_2 % func_number_0() + number_2 > number_3 :
  1 + (-1)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
def func_number_0(func_number_0_param_0: int) -> int:
  func_number_0_param_0:int = 1
  number_3:int = 1
  bool_0:bool = False
  def func_number_1(func_number_1_param_0: bool) -> int:
    number_4:int = 1
    func_number_1_param_0:bool = False
    func_number_2()
    number_4
    return func_number_1(True)
  def func_number_2() -> int:
    if False:
      True
      func_number_0_param_0 = 1
    return func_number_2()
  number_3
  return func_number_1(func_number_0_param_0 > func_number_2() or bool_0)
if number_0 + func_number_0(1) * func_number_0(number_0) > (-(-func_number_0((-1) % func_number_0(number_0 - 1) - number_1) % 1 * 1)):
  func_number_0(1 // (-1) + number_0)
  func_number_0(func_number_0(1))
  1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
if 1 > number_0 or number_1 > 1:
  (-1)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
1
number_0 = 1
1
number_1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:True
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
bool_0:bool = False
1 % number_0
None
1
None is None
number_0 = (-1 * number_1)
if True:
  number_1
else:
  1
  True or bool_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0
1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
(-1)
number_0 * (-number_0)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:def func_none_0():
  number_0:int = 1
  number_1:int = 1
  1
  1 - 1 == 1
  if False:
    number_0
    1
    number_0 = number_1
    if True:
      1
  return None
None is func_none_0()
(not False)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
None
number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
bool_0:bool = False
number_0 * number_1 // number_0
bool_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
bool_0:bool = False
if False:
  number_0
elif 1 > 1 :
  1
  if number_1 == bool_0:
    (-1)
    1
  else:
    if bool_0:
      False
      1
if bool_0:
  bool_0
  if (-number_0) > number_1:
    1
    number_2 // (-1)
  number_1
False
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
bool_1:bool = False
bool_2:bool = False
bool_3:bool = False
bool_4:bool = False
bool_5:bool = False
bool_6:bool = False
number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
number_5:int = 1
number_6:int = 1
number_7:int = 1
number_8:int = 1
number_9:int = 1
def func_none_0(func_none_0_param_0: int):
  func_none_0_param_0:int = 1
  number_11:int = 1
  number_12:int = 1
  number_13:int = 1
  number_14:int = 1
  def func_bool_0() -> bool:
    number_15:int = 1
    number_15 = 1
    return (not True)
  if (not (not 1 >= 1)):
    if number_9 == number_11 - 1:
      1
  elif False or func_bool_0() :
    1
  elif True :
    func_number_0()
  else:
    number_4 * 1 % (-1) + number_12 // number_0
  return func_none_0(number_13) is func_none_0(number_2) is func_none_0(func_number_0()) is func_none_0(number_14)
def func_number_0() -> int:
  bool_2 == 1 // func_number_0()
  func_number_0()
  return func_number_0()
1
if (not bool_0 or True or 1 == None):
  number_0 + 1
  if bool_1:
    bool_2 = bool_3
    bool_4
  else:
    number_0 // 1 + (-number_0 + 1 * (-number_1) // 1) + 1 <= number_2
    (-1)
    (-1 - 1)
  None is None is None is None is None is None
  if bool_5:
    False
    if False:
      (-1)
    else:
      True
  1 * 1
elif (not True) :
  1
1
None is None is None is None is None is None is None is None is None is None is None is None is None is func_none_0(number_0) is None is None
if bool_6:
  number_1 = number_3
  (not (not number_2 > 1))
number_4 = (-1) + number_3
if number_5 > 1:
  (-1 // number_6) < 1
else:
  1 % func_number_0()
  number_7 = 1
  number_8
  (-number_9)
  1
bool_0
None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
None
number_0
number_1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:class class_0(object):
  pass
number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
bool_0:bool = False
bool_1:bool = False
class_0_0:class_0 = None
def func_bool_0() -> bool:
  def func_bool_1() -> bool:
    number_5:int = 1
    number_6:int = 1
    def func_number_0() -> int:
      number_7:int = 1
      (-1)
      (-1)
      func_number_0()
      return number_7
    (-number_3 // 1 + (-func_number_0()) - number_5 + func_number_0() - number_6) + 1 + func_number_0()
    return False
  func_bool_1()
  return bool_1
1 * (-(-number_0))
1 - number_0 % 1
if 1 < 1:
  func_bool_0()
  if number_0 <= 1 - 1:
    1
  else:
    bool_0 = func_bool_0()
    1
    number_1
  bool_1
elif True :
  (-number_2)
  number_1 = (-number_1)
else:
  1
  number_3 = number_4
class_0_0
None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
bool_1:bool = False
bool_2:bool = False
bool_3:bool = False
bool_4:bool = False
bool_5:bool = False
number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
number_5:int = 1
number_6:int = 1
number_7:int = 1
number_8:int = 1
number_9:int = 1
def func_number_0(func_number_0_param_0: int) -> int:
  func_number_0_param_0:int = 1
  func_number_0_param_0 = 1
  None
  return number_4
def func_number_1() -> int:
  number_10:int = 1
  number_11:int = 1
  func_number_1()
  number_8
  func_number_0(number_10) % 1 // number_11
  (-(-1) + (-1 // number_1 * 1))
  1
  1
  return number_4
(-(-(-1))) % 1
if bool_0:
  1
elif True :
  number_0 = number_0
elif False :
  None
  1
else:
  1
  bool_0
  if bool_1:
    (not False)
    if False:
      if bool_2:
        True
        number_0 = number_0
        (-number_0 % number_0) + number_1 > 1
        1
        bool_2
    bool_1
    1
if number_1 > 1:
  number_2
  if number_0 > number_0:
    if True:
      if False:
        number_2
        1
        number_3
      else:
        bool_3 = number_1 < 1 or True
        if False:
          if number_1 >= func_number_0(func_number_0(1 % func_number_0(1))):
            1 * number_4 // func_number_0(func_number_1() + func_number_1())
            number_4
            1
          if False:
            number_5 + number_6
            if bool_3:
              if func_number_1() <= (-1 + func_number_0(1 % 1 - 1) - number_7):
                1
              else:
                1
          else:
            True
            1 + number_1 - 1
else:
  (-1) > func_number_1() * 1
if 1 > func_number_0(1):
  if bool_4:
    if func_number_0(func_number_1() % (-number_8 * 1)) // 1 >= 1:
      bool_5
      func_number_0((-func_number_0((-func_number_0(number_5)) // number_3) % 1))
    elif bool_5 :
      (-1)
    else:
      1
      (-(-1)) * 1
      (-(-(-1) - 1 - 1 - 1 - 1))
      None
else:
  1
  number_1 > 1 or func_number_1() > (-number_9 % 1)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
number_5:int = 1
number_6:int = 1
number_7:int = 1
number_8:int = 1
number_9:int = 1
number_10:int = 1
number_11:int = 1
number_12:int = 1
number_13:int = 1
number_14:int = 1
number_15:int = 1
number_16:int = 1
number_17:int = 1
number_18:int = 1
number_19:int = 1
number_20:int = 1
bool_0:bool = False
bool_1:bool = False
bool_2:bool = False
def func_none_0():
  func_bool_0()
  return None
def func_bool_0() -> bool:
  False
  return func_bool_0()
def func_number_0() -> int:
  None
  return 1
if number_0 >= number_0:
  1
  number_0 // (-number_0 % (-1) * number_1 % number_2)
  if False:
    if (not False):
      number_3
    else:
      (-number_4)
    number_5
    1 * number_6
  else:
    if True:
      if True:
        True
        1
    elif 1 > 1 :
      number_7
  number_8 = (-(-(-(-1 % (-1 - 1 % number_9 * number_2) * number_10)) * 1 // number_11)) // 1
  number_1
  if bool_0:
    (-1)
    number_6 = 1 % (-1)
    if bool_1:
      False
    else:
      number_12
      func_none_0()
      number_13 % 1
      if bool_0:
        None
      elif bool_2 :
        1
      else:
        number_14
        if True:
          number_15
          number_8
        else:
          if True:
            None
            (not True)
            number_0 % 1 - 1 + number_16 - 1 // number_1
          1
          False
      bool_0
      number_17
      if func_bool_0():
        1
    1
    number_14 = 1
  elif False :
    1
else:
  (-func_number_0())
  if number_13 > number_16 * 1:
    func_number_0()
  number_18 - func_number_0() - number_16 - 1
number_14
1
(-1)
number_19 % number_20 + 1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
(-number_0)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
(-1) + number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:class class_0(object):
  pass
bool_0:bool = False
class_0_0:class_0 = None
1
bool_0 = class_0_0 != True
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
bool_0
True
1 >= 1 + 1 or False
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0 = (-(-1)) % 1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
(-number_0 - 1)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1 + (-1)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
if True:
  bool_0 = False
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
bool_0:bool = False
False
number_0
if bool_0:
  1
1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
(not bool_0)
1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
number_0:int = 1
number_1:int = 1
number_2:int = 1
if bool_0:
  1
  if 1 // 1 // 1 > 1 - 1:
    False
  elif 1 <= number_0 or True :
    if True:
      1
    else:
      1
  elif (not (not (not False))) :
    1
    1
    if True:
      1
    else:
      number_0
    if number_1 > number_0:
      number_0
else:
  number_2
  1
(-1)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
None is None is None is None
number_0 * 1
1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
number_0:int = 1
number_1:int = 1
number_2:int = 1
def func_number_0() -> int:
  1
  return func_number_0() * func_number_0()
if bool_0:
  (-1)
  number_0
else:
  if True:
    1 > (-1)
    (-number_0) % number_0 // number_1 % func_number_0() - func_number_0() * (-number_2 + 1 // 1)
True
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0
(-1) * 1 * number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
def func_none_0(func_none_0_param_0: int):
  func_none_0_param_0:int = 1
  number_2:int = 1
  number_3:int = 1
  number_4:int = 1
  number_5:int = 1
  number_6:int = 1
  number_7:int = 1
  number_8:int = 1
  number_9:int = 1
  number_10:int = 1
  bool_0:bool = False
  bool_1:bool = False
  def func_none_1():
    number_11:int = 1
    number_12:int = 1
    number_13:int = 1
    number_14:int = 1
    number_15:int = 1
    number_16:int = 1
    number_17:int = 1
    bool_2:bool = False
    bool_3:bool = False
    def func_bool_1() -> bool:
      number_18:int = 1
      number_19:int = 1
      bool_4:bool = False
      def func_bool_2(func_bool_2_param_0: int, func_bool_2_param_1: int, func_bool_2_param_2: bool) -> bool:
        func_bool_2_param_0:int = 1
        func_bool_2_param_1:int = 1
        number_22:int = 1
        func_bool_2_param_2:bool = False
        bool_6:bool = False
        def func_none_3():
          None is None is None
          (-(-func_number_1()))
          return func_none_1()
        def func_bool_3() -> bool:
          number_23:int = 1
          number_24:int = 1
          number_25:int = 1
          number_26:int = 1
          number_27:int = 1
          number_28:int = 1
          number_29:int = 1
          number_30:int = 1
          bool_7:bool = False
          bool_8:bool = False
          bool_9:bool = False
          bool_10:bool = False
          def func_number_2() -> int:
            number_31:int = 1
            number_32:int = 1
            number_31 = 1
            return number_32
          if func_bool_1():
            False
            number_16 * 1 > number_23
          else:
            None
            if bool_3:
              func_number_0(func_number_0(False) > (-number_24))
              func_number_0(True) * (-func_bool_2_param_1) + 1
              None is None is None
              1
            elif func_bool_1() :
              number_14 = (-func_number_2()) * number_25
              if True or True:
                number_26
                if (not bool_7):
                  if func_bool_2(1, func_number_0(bool_8), 1 > 1):
                    func_number_0(bool_9)
                  elif False :
                    1 + func_number_0(func_bool_1()) + 1
                    number_27
                  if False:
                    if func_bool_3():
                      None
                    else:
                      number_24 = 1
                  elif func_bool_1() :
                    if True:
                      number_28
                      1
                    1
                    True
                  else:
                    (-1 * func_number_0((not 1 + 1 > number_28 // number_29)) % 1 % 1)
              else:
                1
            else:
              1
              if bool_10:
                number_30
                1
            (not func_bool_1())
          return True
        1
        if True:
          None is func_none_2(1 % 1 % number_9 + 1 + func_number_1(), (-1))
        else:
          if func_bool_3():
            None
          elif bool_6 :
            if number_22 >= 1:
              1
              bool_0
            else:
              number_5
            1 > 1
            False
            func_none_3()
          1
        return func_bool_1() or func_bool_3()
      def func_number_1() -> int:
        number_17 // number_13 - func_number_1()
        1
        number_19 = 1
        return func_number_1()
      func_number_0(False)
      if False:
        if bool_4 or True or func_bool_0(1 * 1, number_18 * func_number_0(1 == 1)):
          func_number_0(func_bool_1())
        else:
          func_none_2(func_number_1(), (-func_number_1()))
        func_number_0(func_bool_2(number_19, (-1 - func_number_1()), func_number_1() > 1 // (-1)))
      return bool_3
    if func_bool_0(1, 1):
      number_11 = (-1)
      (-1) - number_12
      1
      False
    elif bool_2 :
      number_13
      number_3 % func_number_0(bool_3)
    elif func_bool_0(1 % 1, (-(-number_12 * number_14)) + func_number_0(number_14 < 1)) :
      1
      func_number_0(func_bool_1()) * func_number_0((not func_bool_0(number_15, number_16))) % 1 != number_3 + number_17
    return None
  def func_none_2(func_none_2_param_0: int, func_none_2_param_1: int):
    func_none_2_param_0:int = 1
    func_none_2_param_1:int = 1
    number_13:int = 1
    number_13
    func_number_0(False)
    return None
  def func_bool_0(func_bool_0_param_0: int, func_bool_0_param_1: int) -> bool:
    func_bool_0_param_0:int = 1
    func_bool_0_param_1:int = 1
    def func_bool_1(func_bool_1_param_0: int) -> bool:
      func_bool_1_param_0:int = 1
      bool_2:bool = False
      1 - func_number_0(True) > (-(-func_number_0(func_bool_1(number_4))))
      return bool_2
    func_bool_0(func_number_0(func_bool_1((-(-number_5)))), 1)
    1
    return number_5 > 1
  def func_number_0(func_number_0_param_0: bool) -> int:
    func_number_0_param_0:bool = False
    None
    return number_8 // number_5
  1 * func_none_0_param_0 % 1
  number_2 >= 1 * 1
  number_3 = 1
  bool_0 = True
  number_0
  (-1)
  if True:
    1
  else:
    (-1) + 1
    if bool_0:
      if (not 1 > number_0 + 1):
        func_none_0_param_0
        1
        1
        number_0 = 1
        None
        if False:
          func_none_0_param_0 = 1
          (-1)
        elif False :
          number_4
          number_5
        else:
          number_4 = 1 - number_6
          1
        (-(-1))
        if func_bool_0(1, 1):
          func_none_0(number_7) is None
          1 % number_8 - 1
        elif False :
          number_4 + number_5
    else:
      func_none_1() is None
    number_9
    1
    (-number_10)
    func_number_0(True)
  return func_none_2(number_10, (-func_number_0(bool_1)))
func_none_0(1) is None
number_0 == None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
bool_1:bool = False
bool_2:bool = False
bool_3:bool = False
bool_4:bool = False
number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
def func_number_0(func_number_0_param_0: bool, func_number_0_param_1: int) -> int:
  func_number_0_param_0:bool = False
  bool_6:bool = False
  func_number_0_param_1:int = 1
  number_5:int = 1
  bool_6
  return number_5
if bool_0:
  if False or number_0 == 1:
    1 % (-1) * number_0
  elif False :
    number_1
    number_1
  if bool_0:
    if (not False):
      1
      1
    if (not (-(-number_0)) > 1):
      number_1 + number_2 + number_0 - (-number_1)
    1
  elif bool_1 :
    1 - (-func_number_0(False, number_3))
    True
    bool_2 = bool_3
  else:
    number_3
  1 * 1
  1
if (not bool_4):
  number_0 < 1
else:
  False
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:(-1)
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
number_5:int = 1
number_6:int = 1
number_7:int = 1
number_8:int = 1
number_9:int = 1
number_10:int = 1
bool_0:bool = False
bool_1:bool = False
bool_2:bool = False
bool_3:bool = False
bool_4:bool = False
bool_5:bool = False
def func_none_0(func_none_0_param_0: bool, func_none_0_param_1: int):
  func_none_0_param_1:int = 1
  func_none_0_param_0:bool = False
  bool_7:bool = False
  if bool_7:
    (-1)
    func_bool_0(func_bool_0(False, 1), func_none_0_param_1)
  if (not False):
    1
  return None
def func_none_1():
  number_11:int = 1
  number_12:int = 1
  number_13:int = 1
  number_14:int = 1
  number_15:int = 1
  number_16:int = 1
  number_17:int = 1
  number_18:int = 1
  number_19:int = 1
  number_20:int = 1
  number_21:int = 1
  number_22:int = 1
  number_23:int = 1
  number_24:int = 1
  number_25:int = 1
  number_26:int = 1
  number_27:int = 1
  number_28:int = 1
  number_29:int = 1
  number_30:int = 1
  number_31:int = 1
  number_32:int = 1
  number_33:int = 1
  number_34:int = 1
  number_35:int = 1
  number_36:int = 1
  number_37:int = 1
  number_38:int = 1
  number_39:int = 1
  number_40:int = 1
  number_41:int = 1
  number_42:int = 1
  number_43:int = 1
  number_44:int = 1
  number_45:int = 1
  number_46:int = 1
  number_47:int = 1
  number_48:int = 1
  number_49:int = 1
  number_50:int = 1
  number_51:int = 1
  number_52:int = 1
  number_53:int = 1
  number_54:int = 1
  number_55:int = 1
  number_56:int = 1
  number_57:int = 1
  bool_6:bool = False
  bool_7:bool = False
  bool_8:bool = False
  bool_9:bool = False
  bool_10:bool = False
  bool_11:bool = False
  bool_12:bool = False
  bool_13:bool = False
  bool_14:bool = False
  bool_15:bool = False
  bool_16:bool = False
  bool_17:bool = False
  bool_18:bool = False
  bool_19:bool = False
  bool_20:bool = False
  bool_21:bool = False
  bool_22:bool = False
  def func_bool_1(func_bool_1_param_0: int) -> bool:
    func_bool_1_param_0:int = 1
    number_59:int = 1
    bool_23:bool = False
    def func_number_8() -> int:
      (not bool_15)
      return 1
    True
    func_none_0(func_bool_1(func_number_4(bool_11)), number_29) is None is func_none_0((not (not func_bool_1(func_number_6())) or True), func_number_3()) is None
    bool_23
    bool_12
    func_number_7(1)
    None
    return func_bool_0(func_number_2((-1) + func_number_8() + number_59 * 1) >= func_number_1(number_27, 1), number_7)
  def func_number_1(func_number_1_param_0: int, func_number_1_param_1: int) -> int:
    func_number_1_param_0:int = 1
    func_number_1_param_1:int = 1
    1
    return 1
  def func_number_2(func_number_2_param_0: int) -> int:
    func_number_2_param_0:int = 1
    number_59:int = 1
    number_60:int = 1
    func_number_2(1) + func_number_7(1)
    return (-number_59) * number_60
  def func_number_3() -> int:
    number_58:int = 1
    number_59:int = 1
    bool_23:bool = False
    func_number_6()
    bool_23
    number_58 + func_number_6()
    number_13
    return number_59
  def func_number_4(func_number_4_param_0: bool) -> int:
    number_58:int = 1
    number_59:int = 1
    func_number_4_param_0:bool = False
    1 % (-(-number_58)) * number_2
    number_27 = number_59
    False
    func_number_3()
    if True:
      (-number_42)
      bool_3 = 1 == 1
    return 1
  def func_number_5() -> int:
    number_58:int = 1
    number_59:int = 1
    def func_number_8(func_number_8_param_0: int) -> int:
      func_number_8_param_0:int = 1
      number_61:int = 1
      def func_number_9() -> int:
        number_62:int = 1
        number_62
        1
        func_number_6() + func_number_9()
        return number_23
      if True:
        number_33
        number_35 = number_19
      else:
        if bool_20 or 1 % number_12 >= number_61 % 1 * 1:
          number_41
          func_number_4(1 < (-number_29) or func_bool_1(1 * func_number_6())) * number_11
      return number_35 // func_number_9()
    if False:
      1
    if (not True):
      number_50 = 1
      number_58
    else:
      number_59
    return 1 // func_number_8(number_25)
  def func_number_6() -> int:
    number_58:int = 1
    number_59:int = 1
    number_60:int = 1
    number_61:int = 1
    bool_23:bool = False
    if False:
      func_bool_1(1)
    elif True :
      1
      1
    else:
      if True:
        1
        1
      else:
        1
    1
    1 % number_58 - 1
    if func_bool_0(bool_23, func_number_7(func_number_3()) // 1) or func_bool_0((not False), number_59):
      if func_bool_0((not False), func_number_0() - 1 * number_60 % number_9):
        number_49 = number_61 % 1
      func_bool_1((-number_36))
    return func_number_2((-1 + number_42))
  def func_number_7(func_number_7_param_0: int) -> int:
    func_number_7_param_0:int = 1
    number_59:int = 1
    bool_23:bool = False
    bool_24:bool = False
    if bool_23:
      func_number_7(func_number_6())
      number_59
    bool_7 = (not bool_24)
    return 1
  if bool_6:
    if True:
      (-func_number_0() - 1 * number_11 * number_12)
      func_number_0()
    number_13
    func_number_0() // 1 // func_number_1(func_number_1(func_number_0(), 1), (-number_14 * func_number_1(number_15, func_number_1(1, number_2)) % 1))
    if func_number_1((-1), 1) >= func_number_0():
      if True or True:
        if (not 1 % 1 - (-1) % 1 - func_number_2(func_number_2(func_number_2(1))) * (-func_number_1(func_number_2(number_16) - (-1) * number_4 // number_14 - 1 * number_17, func_number_0()) - number_18 % func_number_2(number_19) * number_20 + number_21) % number_22 > 1):
          1 + number_23
        else:
          1
          if func_bool_0(False, func_number_0()):
            if bool_4:
              func_none_0(func_bool_0(func_bool_0(False, number_24 + 1) or 1 * 1 < number_5, 1), number_25)
            elif func_bool_0(func_bool_0(False, func_number_1(func_number_0(), number_26)), number_5) or bool_7 :
              if func_bool_0(bool_8, number_27):
                func_number_0()
                func_number_0()
              elif True :
                number_17 = 1
                number_28
                1
                number_16 = number_19
              else:
                1 - 1
              if True:
                1
              func_bool_0(bool_7 != number_29, func_number_2(number_13) // func_number_1(1, 1 * 1))
            1
            1
            func_number_2(func_number_1(1, 1 - func_number_1(1, 1)))
            number_24 = 1
        False
        number_1
    elif bool_0 :
      func_number_2(number_12)
      if 1 * 1 > number_15:
        (-1) - func_number_2(number_7)
        if bool_9:
          if bool_9:
            if func_bool_0(func_bool_0(bool_10, (-1) % 1), (-func_number_1(1, number_30))):
              if func_bool_0((not 1 * func_number_0() % number_31 <= func_number_2(1)), (-number_2)):
                1
                False
                func_bool_1(1 - number_32 % 1)
              else:
                number_33
                if True:
                  True
                elif bool_11 or 1 != 1 :
                  1
                else:
                  if 1 < number_25:
                    number_34 = (-number_35) - func_number_1(number_36, func_number_0() + number_37 * number_38 - (-func_number_1(1, 1) // func_number_2(number_39)) - number_40 + (-func_number_0())) * func_number_2(1)
                    if False:
                      True
                    number_15 = func_number_1((-1), func_number_0())
                  1 + 1 % func_number_1(func_number_0(), 1)
                  (-(-func_number_3()))
                number_41 = func_number_1((-func_number_4(bool_7) // 1 - number_42 * func_number_4(number_43 <= 1) + 1 * (-1 - (-func_number_1(1, 1)))), (-1)) * number_0
                number_2
            elif True :
              if False:
                1
                if func_bool_1(func_number_0()):
                  func_number_0()
                elif (not func_bool_1(1)) :
                  number_44
              elif True :
                if False:
                  (-(-1 + 1 + (-1 % func_number_1(number_9 % func_number_2((-func_number_4((-number_18 * func_number_0() - 1) != 1))) - number_45 * func_number_5() * 1, number_23))))
                func_number_1(func_number_2(1), func_number_2(1) + (-1) % number_39)
                None
                func_number_1(number_12 % func_number_1(1, func_number_2(1)) * number_20, 1)
              elif bool_0 :
                bool_12
              elif func_bool_0(bool_13, number_19) == (-number_1) :
                number_46
              elif number_47 % number_0 == func_number_6() + func_number_6() :
                (-(-number_40) // number_48 + 1 * 1) // (-1)
                if bool_11:
                  func_none_0(bool_14, number_49)
                  (not func_bool_0(True, func_number_3()))
                (-number_13) % number_50
                if False:
                  number_51 % 1 // number_15 - 1
              False or func_bool_1(1)
              func_bool_0(bool_15, (-func_number_6()) % 1)
            elif (not bool_0) :
              number_48 = func_number_1(1, number_52 % func_number_1(1, 1))
              if True:
                1 - func_number_7(1) // number_53
              bool_1
            bool_16 = bool_5
            func_number_0()
            number_15 = func_number_7(1 - (-func_number_6())) - func_number_4(bool_12)
          else:
            if True:
              func_bool_1(1)
            else:
              func_number_5()
            func_none_1()
      elif bool_17 :
        if bool_18:
          number_54 = 1
          if bool_19:
            if bool_20:
              if True:
                bool_10
              elif (not func_bool_0(bool_21, number_29)) :
                bool_7
                1
                bool_16
                number_52
              else:
                (-(-(-number_55)))
            else:
              True
          number_37 = 1
          func_number_4(bool_22)
          1
          None is func_none_1() is func_none_1() is None is func_none_0(bool_8, number_56 - 1 - number_51) is None
          if bool_11 or bool_6:
            number_57 = 1
            False
      1
  elif (not False) :
    1
    1
    number_54 = 1
  else:
    1
  return None is func_none_1()
def func_bool_0(func_bool_0_param_0: bool, func_bool_0_param_1: int) -> bool:
  func_bool_0_param_1:int = 1
  number_12:int = 1
  number_13:int = 1
  func_bool_0_param_0:bool = False
  1 + 1
  func_bool_0_param_1
  (-func_number_0())
  return (not number_5 < number_12 or func_bool_0(True != func_bool_0(True, 1), number_13))
def func_number_0() -> int:
  number_11:int = 1
  number_12:int = 1
  number_13:int = 1
  def func_bool_1(func_bool_1_param_0: int, func_bool_1_param_1: int) -> bool:
    func_bool_1_param_0:int = 1
    func_bool_1_param_1:int = 1
    number_16:int = 1
    func_number_0()
    return number_16 + 1 < func_number_0() + func_number_1()
  def func_number_1() -> int:
    bool_6:bool = False
    if (-func_number_0()) > number_2 % number_2 % func_number_1() or func_bool_0((not bool_6), number_12):
      number_5
    return 1 * 1
  func_number_1()
  True
  if func_bool_0(func_bool_1(func_number_1(), func_number_0()), number_11):
    number_12 = 1
    True or 1 + func_number_0() + (-number_13) > func_number_1()
  return func_number_1()
number_0 % 1
if bool_0:
  (-(-number_1) * number_2) - 1
  1
  number_3
  1 * (-(-1))
else:
  True
  bool_1 or True
  bool_1
1
(-1)
if True or bool_0:
  if (not True):
    None is None is None is None is None is None is None is None is func_none_0(func_bool_0(False, number_4), 1) is func_none_0(bool_2, 1) is None is None
    (-1) % 1
  else:
    if func_bool_0((-1) == 1, 1 * 1):
      1
    if True:
      func_bool_0(bool_3, 1 % 1 * number_5 // number_2 + (-1))
      if True or True:
        bool_4
    else:
      if bool_5:
        1
        1 <= 1 or False
      1 * 1
    if False:
      True
      func_bool_0(func_bool_0(True, number_6), (-number_7))
      number_0 = number_7
      number_4 = number_2
    else:
      number_7 % number_2
      if True:
        1
        False
        (-(-number_8 - (-(-(-1))) + (-1 // number_9 * number_10) // func_number_0() - 1))
    1
1 != None is func_none_1()
1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
1
if (-number_0) >= 1:
  1
elif True :
  1 % number_1 - 1 * number_1 * 1 + 1
elif False :
  number_2 = 1
else:
  (-1 // number_1)
  if (-number_3) * 1 * 1 > number_4 % 1:
    True
  else:
    1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
(-1 - number_0 // 1)
if True:
  number_0
  number_0 = (-1)
else:
  if True:
    1
  1 % 1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
bool_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
bool_1:bool = False
bool_2:bool = False
number_0:int = 1
number_1:int = 1
number_2:int = 1
number_3:int = 1
number_4:int = 1
number_5:int = 1
number_6:int = 1
number_7:int = 1
number_8:int = 1
number_9:int = 1
number_10:int = 1
number_11:int = 1
number_12:int = 1
number_13:int = 1
number_14:int = 1
number_15:int = 1
number_16:int = 1
number_17:int = 1
number_18:int = 1
number_19:int = 1
def func_bool_0(func_bool_0_param_0: int, func_bool_0_param_1: int, func_bool_0_param_2: int, func_bool_0_param_3: bool) -> bool:
  func_bool_0_param_3:bool = False
  bool_4:bool = False
  func_bool_0_param_0:int = 1
  func_bool_0_param_1:int = 1
  func_bool_0_param_2:int = 1
  bool_4 or True
  return False
def func_number_0(func_number_0_param_0: int) -> int:
  func_number_0_param_0:int = 1
  func_number_1(1)
  return func_number_0(1)
def func_number_1(func_number_1_param_0: int) -> int:
  func_number_1_param_0:int = 1
  number_21:int = 1
  (-1)
  return number_21
def func_none_0(func_none_0_param_0: int):
  func_none_0_param_0:int = 1
  def func_none_1(func_none_1_param_0: int):
    bool_3:bool = False
    func_none_1_param_0:int = 1
    bool_3
    bool_3 = True
    None
    return None is func_none_0(1)
  None
  None is None is func_none_0((-1))
  return func_none_1(number_5) is None
False
(not bool_0)
1 * (-1) - 1 - 1
if bool_1:
  number_0
  1 // (-1) + number_0 // 1 - number_1
  if func_bool_0(1, 1 * 1 + (-1 % 1 % number_2), 1, (not bool_2) or func_bool_0(func_number_0(func_number_0(1)), 1, 1 - 1, False)):
    bool_0
    func_number_0(1)
  else:
    func_none_0(func_number_0(number_3))
    1
    True
    number_1
    1
  number_4
elif True :
  if (not True):
    func_bool_0(number_5, 1, func_number_0(1 % 1), number_6 < func_number_0(func_number_1(1)))
  elif func_bool_0((-number_7) % 1, 1, (-1), False) :
    (-func_number_1((-1 - number_8 - func_number_1(1 + (-number_9 // number_10) // number_6 * (-(-func_number_1(number_11)))))))
    if (not True):
      bool_2
    elif bool_1 :
      func_number_1(1)
    else:
      1
      number_12
    (-number_13)
  number_4 * func_number_0((-1))
else:
  if False:
    1
    number_10 = 1 * 1
  (not func_bool_0(number_14, number_15, func_number_0(func_number_1(1) % number_8 + 1), func_bool_0(number_13, 1 + 1 // (-1), 1, True)))
  (not func_bool_0(number_16, func_number_1(number_17), 1, bool_1))
  number_12 = number_18
  number_19
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
(-1) * number_0 // 1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_1:int = 1
bool_0:bool = False
number_0 - number_1 * 1 // number_1
bool_0 = True
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:class class_0(object):
  pass
class_0_0:class_0 = None
class_0_0 = class_0_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
number_0
None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:bool_0:bool = False
bool_0
None
None is None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:True
1
1
1
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
None is None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:None
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:number_0:int = 1
def func_number_0() -> int:
  number_1:int = 1
  number_2:int = 1
  number_3:int = 1
  number_4:int = 1
  number_5:int = 1
  number_6:int = 1
  number_7:int = 1
  bool_0:bool = False
  bool_1:bool = False
  bool_2:bool = False
  bool_3:bool = False
  bool_4:bool = False
  def func_number_1(func_number_1_param_0: bool) -> int:
    number_8:int = 1
    number_9:int = 1
    number_10:int = 1
    number_11:int = 1
    func_number_1_param_0:bool = False
    bool_6:bool = False
    def func_number_3(func_number_3_param_0: int, func_number_3_param_1: int, func_number_3_param_2: bool) -> int:
      func_number_3_param_0:int = 1
      func_number_3_param_1:int = 1
      func_number_3_param_2:bool = False
      func_none_0(1)
      1
      return number_10
    number_3
    if (not True):
      if False:
        func_number_1(1 == 1)
    else:
      func_number_1(False)
      1
      if func_number_0() != number_0:
        bool_6
        1
    bool_3 = True
    1
    if True:
      1
      if True:
        number_7 // func_number_2(number_0 - func_number_0()) + 1 // (-1) - (-1) // 1
        False
        number_8
    number_4 = number_5
    1
    return (-number_9 // func_number_3((-number_10) % func_number_2(number_10), number_11, (not True)))
  def func_number_2(func_number_2_param_0: int) -> int:
    func_number_2_param_0:int = 1
    number_9:int = 1
    number_10:int = 1
    number_11:int = 1
    number_12:int = 1
    number_13:int = 1
    number_14:int = 1
    number_15:int = 1
    number_16:int = 1
    number_17:int = 1
    number_18:int = 1
    number_19:int = 1
    number_20:int = 1
    bool_5:bool = False
    bool_6:bool = False
    bool_7:bool = False
    bool_8:bool = False
    bool_9:bool = False
    def func_bool_0(func_bool_0_param_0: int, func_bool_0_param_1: bool) -> bool:
      func_bool_0_param_0:int = 1
      number_22:int = 1
      func_bool_0_param_1:bool = False
      number_22
      True
      return False
    if True:
      func_number_1(False)
      if bool_5:
        (-number_9)
        (-1 * func_number_0() // 1 * func_number_0())
        False
        number_10 = func_number_0()
      elif True :
        bool_2
      elif (not False) :
        func_number_0() + number_6 - func_number_1((not (not func_bool_0(1, True))))
        if False:
          func_none_0(1)
        else:
          func_bool_0(1, (not bool_6))
          number_11
          if number_12 > 1:
            1
            number_11
          else:
            bool_7
            number_13 = 1
      elif (not False) :
        if 1 <= (-(-number_14 // 1 * number_3)) + number_15 * number_3 % number_16 + number_17:
          number_4 * func_number_0()
        else:
          number_6
        number_18 = number_19
      else:
        if True:
          False
          if func_bool_0(1 * 1, bool_3 or (not bool_0)):
            1
            number_20
            (-1)
          elif bool_6 :
            number_17
            func_bool_0(1, bool_8)
            bool_9
            func_number_0()
          True
          number_3
    else:
      if (not False):
        func_number_2(number_2)
        func_number_1(True or bool_0 != 1 - 1 // 1)
        if (-1) - func_number_1(False) < 1:
          1
        else:
          number_15
          True
        1 % number_11
      elif True :
        1
        True
        number_11 = number_5
      1
    func_number_0()
    1
    return 1
  def func_none_0(func_none_0_param_0: int):
    func_none_0_param_0:int = 1
    number_9:int = 1
    number_10:int = 1
    number_11:int = 1
    number_12:int = 1
    bool_5:bool = False
    bool_6:bool = False
    bool_7:bool = False
    bool_8:bool = False
    def func_number_3() -> int:
      bool_9:bool = False
      def func_number_6() -> int:
        number_13:int = 1
        number_14:int = 1
        1 * 1 + number_13
        return (-(-number_11)) - 1 - func_number_1(func_number_6() != number_14 < 1)
      1 % number_10 * 1
      if True:
        1
        1
        if (not bool_9):
          1
        else:
          bool_6 = False
        func_number_4()
        1
      else:
        (-func_number_6())
      return 1
    def func_number_4() -> int:
      number_13:int = 1
      number_14:int = 1
      number_15:int = 1
      number_16:int = 1
      number_17:int = 1
      number_18:int = 1
      number_19:int = 1
      number_20:int = 1
      bool_9:bool = False
      bool_10:bool = False
      bool_11:bool = False
      if True:
        if False:
          if bool_4:
            1
        else:
          number_9
        1
        number_13
      else:
        1
        if True:
          func_number_4()
          number_14 - 1 // 1
        else:
          if 1 < number_15:
            1
            (-number_5)
            None
          elif True :
            number_15
            number_13
            if False:
              number_16
              func_number_3()
            (-(-1 - 1 - func_number_1(True)))
          func_number_1((-1) == 1 or bool_8) < 1 + func_number_2(number_17 % func_number_4())
        bool_9
        (-1)
        if func_number_0() < func_number_0() * number_17:
          func_number_4()
        elif 1 > func_number_0() // 1 :
          number_13 = 1
        else:
          1
          (-number_11)
          1
        number_18 = func_number_1(bool_10)
        1
      bool_11
      func_number_3()
      1 * func_number_1(number_19 - func_number_3() % number_20 < func_number_3()) + 1
      1 // 1
      bool_1
      return 1 * (-1) * (-1)
    def func_number_5() -> int:
      1
      return func_none_0_param_0
    if (not (not (not bool_1))):
      if True:
        1
        if (not False):
          number_7 = number_9
          if True:
            (-1)
            if bool_5:
              1
              number_10
              True
              False
            else:
              1
              (-func_number_2(func_number_2(number_11))) + 1
              1
              number_9
            func_number_3()
            1
            bool_1
            number_12
        else:
          (-(-func_number_1((-1) >= 1)))
          func_none_0_param_0 = func_number_0()
          (-func_number_0())
      elif bool_2 :
        number_3 = 1
      else:
        func_number_0()
        False
      if (-1) > number_7:
        1 * 1
        (-func_number_4())
      bool_6
    elif False :
      func_none_0((-func_number_5()))
    else:
      if bool_7:
        bool_6
        1
      elif bool_8 :
        func_number_5()
        number_9
      else:
        func_none_0(1)
        func_number_0()
    return func_none_0(number_11)
  (-func_number_0()) % 1 // (-1)
  number_0
  number_0
  bool_0 = bool_0
  if True:
    func_number_0()
  elif bool_0 :
    if True:
      if True:
        None
        1 // 1
    (-number_1)
    if False:
      bool_1 = bool_0 or number_2 + 1 > (-1 % func_number_0())
      bool_2
    if (-number_0) > (-1):
      (-1 + func_number_0())
      1
    else:
      (not bool_3 or 1 < 1 or number_3 > (-1))
      func_none_0(number_3)
      1
      False
      if True:
        (-func_number_0())
        func_number_0()
      1
  elif True :
    if bool_4:
      func_number_1(number_1 < 1)
    elif True :
      bool_0
      if bool_2:
        False
        func_number_1(True)
      else:
        bool_1
    else:
      number_4
  else:
    func_number_2(number_2)
    number_4
    if (not func_number_0() <= 1):
      number_3 + func_number_0()
      number_5 = (-(-number_6))
  return number_7
func_number_0() + number_0
Compiler value: [object Object]
Python value: [object Object]--------------------
Fuzzer program failed
 Program source:1
1
Compiler value: [object Object]
Python value: [object Object]